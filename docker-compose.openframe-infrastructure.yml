name: openframe-infrastructure
services:
  # MongoDB
  mongodb:
    container_name: openframe-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: openframe
      MONGO_INITDB_ROOT_PASSWORD: password123456789
      MONGO_APP_DATABASE: openframe
      MONGO_APP_USERNAME: openframe
      MONGO_APP_PASSWORD: password123456789
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init/mongodb:/docker-entrypoint-initdb.d
      - mongodb_logs:/var/log/mongodb # Shared volume for logs
    networks:
      - openframe-network
    depends_on:
      - loki
    healthcheck:
      test: ["CMD", "mongosh", "--username", "openframe", "--password", "password123456789", "--eval", "db.adminCommand('ping').ok", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    image: openframe-mongodb:latest
  # MongoDB Exporter
  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: openframe-mongodb-exporter
    environment:
      MONGODB_URI: mongodb://openframe:password123456789@mongodb:27017/openframe
    ports:
      - "9216:9216"
    depends_on:
      - mongodb
      - loki
    networks:
      - openframe-network
  # Cassandra
  cassandra:
    container_name: openframe-cassandra
    ports:
      - "9042:9042"
      - "7199:7199"
      - "9404:9404"
    volumes:
      - cassandra_data:/var/lib/cassandra
      - cassandra_logs:/var/log/cassandra
      - ./init/cassandra:/docker-entrypoint-initdb.d
      - ./infrastructure/cassandra/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    environment:
      CASSANDRA_CLUSTER_NAME: openframe_cluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_START_RPC: "true"
      CASSANDRA_NATIVE_TRANSPORT_MAX_THREADS: 128
      CASSANDRA_NATIVE_TRANSPORT_PORT_SSL: 9142
      CASSANDRA_NATIVE_TRANSPORT_MAX_FRAME_SIZE: 256MB
      CASSANDRA_STARTUP_TIMEOUT: 300
      CASSANDRA_SYSTEM_AUTH_BOOTSTRAP_DELAY: 0
      GOSSIP_WAIT_TIME_IN_MS: 0
      HEAP_NEWSIZE: 128M
      MAX_HEAP_SIZE: 512M
      LOCAL_JMX: "no"
      JMX_PORT: 7199
    healthcheck:
      test: ["CMD-SHELL", "(nodetool -u cassandra -pw cassandra status && cqlsh -u cassandra -p cassandra -e 'SELECT now() FROM system.local') || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - openframe-network
    depends_on:
      - loki
    image: openframe-cassandra:latest
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: openframe-zookeeper
    ports:
      - "2181:2181"
      - "7070:7070"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOO_4LW_COMMANDS_WHITELIST: "srvr,ruok,conf,stat"
      ZOOKEEPER_TICK_TIME: 2000
      EXTRA_ARGS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=7070:/opt/jmx_exporter/config.yml
    volumes:
      - ./infrastructure/zookeeper/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    networks:
      - openframe-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:7070/commands/stat || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      - loki
  # Kafka
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: openframe-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
      - "9308:9308"
    volumes:
      - kafka_logs:/var/log/kafka
      - ./infrastructure/kafka/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: openframe-zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      KAFKA_LISTENERS: EXTERNAL://0.0.0.0:9092,INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:9092,INTERNAL://openframe-kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CREATE_TOPICS: "pinot-events:1:1"
      KAFKA_MESSAGE_MAX_BYTES: 104857600
      KAFKA_REPLICA_FETCH_MAX_BYTES: 104857600
      KAFKA_MAX_REQUEST_SIZE: 104857600
      KAFKA_OPTS: "-javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9308:/opt/jmx_exporter/config.yml -Dzookeeper.connect.timeout.ms=60000 -Dzookeeper.session.timeout.ms=60000"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CLEANUP_POLICY: "delete"
      KAFKA_LOG_CLEANUP_POLICY: "delete"
      KAFKA_LOG_RETENTION_HOURS: "24"
    networks:
      - openframe-network
    depends_on:
      loki:
        condition: service_healthy
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
  # Nifi
  nifi:
    container_name: openframe-nifi
    ports:
      - "8443:8443"
      - "9096:9096"
    environment:
      NIFI_WEB_HTTPS_PORT: 8443
      NIFI_WEB_HTTP_HOST: 0.0.0.0
      SINGLE_USER_CREDENTIALS_USERNAME: openframe
      SINGLE_USER_CREDENTIALS_PASSWORD: password123456789
    volumes:
      - nifi_content:/opt/nifi/nifi-current/content_repository
      - nifi_database:/opt/nifi/nifi-current/database_repository
      - nifi_flowfile:/opt/nifi/nifi-current/flowfile_repository
      - nifi_provenance:/opt/nifi/nifi-current/provenance_repository
      - nifi_state:/opt/nifi/nifi-current/state
      - nifi_logs:/opt/nifi/nifi-current/logs
    networks:
      - openframe-network
    depends_on:
      - loki
    image: openframe-nifi:latest
  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: openframe-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - openframe-network
    depends_on:
      - loki
  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: openframe-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=openframe
      - GF_SECURITY_ADMIN_PASSWORD=password123456789
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/etc/grafana/dashboards/home-dashboard.json
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_SECURITY_COOKIE_SAMESITE=none
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
      - GF_SECURITY_ALLOW_EMBEDDING_FROM_ANYWHERE=true
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/etc/grafana/dashboards
      - grafana_data:/var/lib/grafana
    networks:
      - openframe-network
    depends_on:
      - loki
      - prometheus
  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: openframe-kafka-ui
    ports:
      - "8081:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=openframe-kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=openframe-zookeeper:2181
    networks:
      - openframe-network
    depends_on:
      - loki
      - kafka
  # Mongo Express
  mongo-express:
    image: mongo-express:latest
    container_name: openframe-mongo-express
    ports:
      - "8010:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: openframe
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123456789
      ME_CONFIG_MONGODB_URL: mongodb://openframe:password123456789@mongodb:27017/
    networks:
      - openframe-network
    depends_on:
      - loki
      - mongodb
  # Redis Exporter
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: openframe-redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://openframe-redis:6379
    networks:
      - openframe-network
    depends_on:
      - redis
      - loki
  # Promtail
  promtail:
    image: grafana/promtail:latest
    container_name: openframe-promtail
    volumes:
      - /var/log:/var/log
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./monitoring/promtail:/etc/promtail
    command:
      - "-config.file=/etc/promtail/config.yml"
      - "-config.expand-env=true"
    environment:
      - HOSTNAME=promtail
    networks:
      - openframe-network
    depends_on:
      - loki
    user: root
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "{{.Name}}"
  # Redis
  redis:
    image: redis:latest
    container_name: openframe-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - openframe-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  # Loki
  loki:
    image: grafana/loki:latest
    container_name: openframe-loki
    ports:
      - "3100:3100"
    command:
      - "-config.file=/etc/loki/local-config.yaml"
      - "-config.expand-env=true"
      - "-validation.allow-structured-metadata=false"
    environment:
      - LOKI_RETENTION_PERIOD=24h
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/loki
    networks:
      - openframe-network
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider --tries=1 http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 40s
    restart: unless-stopped
  pinot-controller:
    image: apachepinot/pinot:latest
    container_name: openframe-pinot-controller
    command: StartController -configFileName /opt/pinot/config/pinot.conf
    ports:
      - "9000:9000"
      - "9011:9011" # JMX Exporter metrics
    volumes:
      - ./infrastructure/pinot/config:/opt/pinot/config
      - pinot_controller_data:/opt/pinot/data
      - ./infrastructure/pinot/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    environment:
      JAVA_OPTS: >
        -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9011:/opt/jmx_exporter/config.yml -Xmx1G -Xms1G -XX:+UseG1GC -XX:MaxGCPauseMillis=200

    networks:
      - openframe-network
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
  pinot-broker:
    image: apachepinot/pinot:latest
    container_name: openframe-pinot-broker
    command: StartBroker -clusterName openframe-pinot -zkAddress openframe-zookeeper:2181 -configFileName /opt/pinot/config/pinot.conf
    ports:
      - "8099:8099"
      - "9012:9012" # JMX Exporter metrics
    volumes:
      - ./infrastructure/pinot/config:/opt/pinot/config
      - pinot_broker_data:/opt/pinot/data
      - ./infrastructure/pinot/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    environment:
      JAVA_OPTS: >
        -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9012:/opt/jmx_exporter/config.yml -Xmx2G -Xms2G -XX:+UseG1GC -XX:MaxGCPauseMillis=200

    networks:
      - openframe-network
    depends_on:
      pinot-controller:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8099/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  pinot-server:
    image: apachepinot/pinot:latest
    container_name: openframe-pinot-server
    command: StartServer -clusterName openframe-pinot -zkAddress openframe-zookeeper:2181 -configFileName /opt/pinot/config/pinot.conf
    ports:
      - "8097:8097" # Admin port
      - "9013:9013" # JMX Exporter metrics
    volumes:
      - ./infrastructure/pinot/config:/opt/pinot/config
      - pinot_server_data:/opt/pinot/data
      - ./infrastructure/pinot/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    environment:
      JAVA_OPTS: >
        -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9013:/opt/jmx_exporter/config.yml -Xmx2G -Xms2G -XX:+UseG1GC -XX:MaxGCPauseMillis=200

    networks:
      - openframe-network
    depends_on:
      pinot-controller:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8097/health"]
      interval: 30s
      timeout: 10s
      retries: 5
  config-server:
    container_name: openframe-config-server
    ports:
      - "8888:8888"
      - "8889:8889"
    networks:
      - openframe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://openframe-config-server:8888/xml/shared-logback-spring.xml"]
      interval: 30s
      timeout: 10s
      retries: 5
    image: openframe-config:latest
  api:
    container_name: openframe-api
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://openframe-config-server:8888
      - OPENFRAME_MANAGEMENT_KEY=${OPENFRAME_MANAGEMENT_KEY:-docker-management-key-123}
    ports:
      - "8090:8090"
      - "8091:8091"
    depends_on:
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    networks:
      - openframe-network
    image: openframe-api:latest
  management:
    container_name: openframe-management
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://openframe-config-server:8888
      - OPENFRAME_MANAGEMENT_KEY=${OPENFRAME_MANAGEMENT_KEY:-docker-management-key-123}
    ports:
      - "8095:8095"
      - "8096:8096"
    depends_on:
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - openframe-network
    image: openframe-management:latest
  openframe-ui:
    environment:
      - VITE_CLIENT_ID=openframe_web_dashboard
      - VITE_CLIENT_SECRET=prod_secret
    ports:
      - "80:80"
    depends_on:
      - api
      - management
    networks:
      - openframe-network
    image: openframe-ui:latest
  stream:
    container_name: openframe-stream
    ports:
      - "8082:8082"
      - "8083:8083"
    depends_on:
      kafka:
        condition: service_healthy
      config-server:
        condition: service_healthy
      cassandra:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    networks:
      - openframe-network
    image: openframe-stream:latest
  gateway:
    container_name: openframe-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_CONFIG_IMPORT=optional:configserver:http://openframe-config-server:8888
    ports:
      - "8100:8100"
      - "8101:8101"
    depends_on:
      config-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      cassandra:
        condition: service_healthy
    networks:
      - openframe-network
    image: openframe-gateway:latest
networks:
  openframe-network:
    name: openframe-network
    driver: bridge
    external: true
volumes:
  loki_data:
  mongodb_data:
  mongodb_logs: # MongoDB logs
  cassandra_data:
  cassandra_logs: # Cassandra logs
  kafka_logs: # Kafka logs
  nifi_content:
  nifi_database:
  nifi_flowfile:
  nifi_provenance:
  nifi_state:
  nifi_logs: # Nifi logs
  prometheus_data:
  grafana_data:
  pinot_broker_data:
  pinot_server_data:
  pinot_controller_data:
  redis_data:
