name: openframe-tacticalrmm

services:

  tactical-mongodb:
    container_name: openframe-tactical-mongodb
    image: mongo:4.4.18
    platform: linux/arm64
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongouser
      MONGO_INITDB_ROOT_PASSWORD: mongopass
      MONGO_INITDB_DATABASE: meshcentral
    networks:
      - tactical-network
    volumes:
      - tactical_mongo_data:/data/db
    user: root
    command: >
      bash -c "
        chown -R mongodb:mongodb /data/db &&
        chmod -R 0700 /data/db &&
        exec docker-entrypoint.sh mongod --auth"
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-postgres:
    container_name: openframe-tactical-postgres
    image: postgres:13-alpine
    platform: linux/arm64
    restart: always
    environment:
      POSTGRES_DB: tacticalrmm
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgrespass
    volumes:
      - tactical_postgres_data:/var/lib/postgresql/data
    networks:
      - tactical-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-redis:
    container_name: openframe-tactical-redis
    image: redis:6.0-alpine
    restart: always
    volumes:
      - tactical_redis_data:/data
    networks:
      - tactical-network
    command: redis-server --save 3600 1 300 100 60 10000
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-nats:
    container_name: openframe-tactical-nats
    image: tacticalrmm/tactical-nats:latest
    platform: linux/amd64
    restart: always
    environment:
      API_HOST: tactical-backend:8001  # Updated to match new port
    volumes:
      - tactical_nats_data:/opt/tactical
    networks:
      - tactical-network

  tactical-meshcentral:
    container_name: openframe-tactical-meshcentral
    platform: linux/amd64
    build:
      context: ./infrastructure/tactical-rmm/tactical-meshcentral
      dockerfile: Dockerfile
    environment:
      MESH_HOST: tactical-meshcentral
      MESH_USER: tactical
      MESH_PASS: tactical
      MONGODB_USER: mongouser
      MONGODB_PASSWORD: mongopass
      NGINX_HOST_IP: tactical-nginx
      NGINX_HOST_PORT: 8080
      MESH_PERSISTENT_CONFIG: 0
      WS_MASK_OVERRIDE: 1
      MESH_DISABLE_SSL: 1
    networks:
      - tactical-network
    volumes:
      - tactical_meshcentral_data:/opt/tactical
    user: root
    entrypoint: [ "/entrypoint.sh" ]
    depends_on:
      tactical-mongodb:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "pgrep -f 'node.*meshcentral' && curl -s http://localhost:4443/health.ashx" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  tactical-frontend:
    container_name: openframe-tactical-frontend
    build:
      context: ./infrastructure/tactical-rmm/tactical-frontend
      dockerfile: Dockerfile
      args:
        NODE_ENV: "development"
        DOCKER_BUILD: "false"
    restart: always
    networks:
      - tactical-network
    volumes:
      - tactical_frontend_data:/opt/tactical
    environment:
      API_HOST: localhost:8001  # Updated to match new port
      TRMM_PROTO: http
      PUBLIC_DIR: /usr/share/nginx/html
      TACTICAL_READY_FILE: /opt/tactical/tmp/tactical/ready
      TACTICAL_DIR: /opt/tactical
      NODE_ENV: "development"
      DOCKER_BUILD: "false"
      WS_PROTO: "ws"

  tactical-nginx:
    container_name: openframe-tactical-nginx
    build:
      context: ./infrastructure/tactical-rmm/tactical-nginx
      dockerfile: Dockerfile
    platform: linux/amd64
    restart: always
    environment:
      APP_HOST: tactical-frontend:8080
      API_HOST: tactical-backend:8001  # Updated to match new port
      MESH_HOST: tactical-meshcentral:4443
      TRMM_PROTO: http
      DOCKER_BUILD: "false"
      NODE_ENV: "development"
    networks:
      - tactical-network
    ports:
      - "8081:8080"  # Changed from 8080 to avoid conflict with Kafka UI
      - "8001:8000"  # Changed to maintain consistent port scheme
      - "8384:8383"  # Changed to maintain consistent port scheme
    volumes:
      - tactical_nginx_data:/opt/tactical
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://tactical-nginx:8080/nginx_status" ]  # Using internal port for healthcheck
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-backend:
    container_name: openframe-tactical-backend
    build:
      context: ./infrastructure/tactical-rmm/tactical-base
      dockerfile: Dockerfile
    platform: linux/amd64
    command: [ "tactical-backend" ]
    restart: always
    environment:
      TRMM_DISABLE_2FA: "True"
      DOCKER_BUILD: "false"
      NODE_ENV: "development"
      MESH_WS_URL: ws://tactical-meshcentral:4443
      POSTGRES_USER: postgres
      POSTGRES_PASS: postgrespass
      APP_HOST: tactical-frontend:8080
      API_HOST: tactical-backend:8001  # Updated to match new port
      MESH_USER: tactical
      MESH_HOST: tactical-meshcentral:4443
      TRMM_USER: tactical
      TRMM_PASS: tactical
      TRMM_DISABLE_WEB_TERMINAL: "False"
      TRMM_DISABLE_SERVER_SCRIPTS: "False"
      TRMM_DISABLE_SSO: "False"
    networks:
      - tactical-network
    volumes:
      - tactical_backend_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
      tactical-nginx:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  tactical-websockets:
    container_name: openframe-tactical-websockets
    build:
      context: ./infrastructure/tactical-rmm/tactical-base
      dockerfile: Dockerfile
    platform: linux/amd64
    command: [ "tactical-websockets" ]
    restart: always
    environment:
      TRMM_DISABLE_2FA: "True"
      DOCKER_BUILD: "false"
      NODE_ENV: "development"
      MESH_WS_URL: ws://tactical-meshcentral:4443
      POSTGRES_USER: postgres
      POSTGRES_PASS: postgrespass
      APP_HOST: tactical-frontend:8080
      API_HOST: tactical-backend:8001  # Updated to match new port
      MESH_USER: tactical
      MESH_HOST: tactical-meshcentral:4443
      TRMM_USER: tactical
      TRMM_PASS: tactical
      TRMM_DISABLE_WEB_TERMINAL: "False"
      TRMM_DISABLE_SERVER_SCRIPTS: "False"
      TRMM_DISABLE_SSO: "False"
    networks:
      - tactical-network
    volumes:
      - tactical_websockets_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
      tactical-nginx:
        condition: service_healthy
      tactical-backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-celery:
    container_name: openframe-tactical-celery
    build:
      context: ./infrastructure/tactical-rmm/tactical-base
      dockerfile: Dockerfile
    platform: linux/amd64
    command: [ "tactical-celery" ]
    restart: always
    networks:
      - tactical-network
    environment:
      TRMM_DISABLE_2FA: "True"
      DOCKER_BUILD: "false"
      NODE_ENV: "development"
      MESH_WS_URL: ws://tactical-meshcentral:4443
      POSTGRES_USER: postgres
      POSTGRES_PASS: postgrespass
      APP_HOST: tactical-frontend:8080
      API_HOST: tactical-backend:8001  # Updated to match new port
      MESH_USER: tactical
      MESH_HOST: tactical-meshcentral:4443
      TRMM_USER: tactical
      TRMM_PASS: tactical
      TRMM_DISABLE_WEB_TERMINAL: "False"
      TRMM_DISABLE_SERVER_SCRIPTS: "False"
      TRMM_DISABLE_SSO: "False"
    volumes:
      - tactical_celery_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
      tactical-nginx:
        condition: service_healthy
      tactical-backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-celerybeat:
    container_name: openframe-tactical-celerybeat
    build:
      context: ./infrastructure/tactical-rmm/tactical-base
      dockerfile: Dockerfile
    platform: linux/amd64
    command: [ "tactical-celerybeat" ]
    restart: always
    environment:
      TRMM_DISABLE_2FA: "True"
      DOCKER_BUILD: "false"
      NODE_ENV: "development"
      MESH_WS_URL: ws://tactical-meshcentral:4443
      POSTGRES_USER: postgres
      POSTGRES_PASS: postgrespass
      APP_HOST: tactical-frontend:8080
      API_HOST: tactical-backend:8001  # Updated to match new port
      MESH_USER: tactical
      MESH_HOST: tactical-meshcentral:4443
      TRMM_USER: tactical
      TRMM_PASS: tactical
      TRMM_DISABLE_WEB_TERMINAL: "False"
      TRMM_DISABLE_SERVER_SCRIPTS: "False"
      TRMM_DISABLE_SSO: "False"
    networks:
      - tactical-network
    volumes:
      - tactical_celerybeat_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
      tactical-nginx:
        condition: service_healthy
      tactical-backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
networks:
  tactical-network:
    driver: bridge
  openframe-network:
    external: true

volumes:
  tactical_websockets_data:
  tactical_nats_data:
  tactical_celerybeat_data:
  tactical_meshcentral_data:
  tactical_init_data:
  tactical_frontend_data:
  tactical_backend_data:
  tactical_nginx_data:
  tactical_celery_data:
  tactical_redis_data:
  tactical_postgres_data:
  tactical_mongo_data:


