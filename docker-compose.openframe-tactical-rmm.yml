name: openframe-tactical-rmm

x-environment: &default-environment
  # MongoDB Configuration
  MONGO_INITDB_ROOT_USERNAME: &mongo-user mongouser
  MONGO_INITDB_ROOT_PASSWORD: &mongo-pass mongopass
  MONGO_INITDB_DATABASE: &mongo-db meshcentral
  MONGODB_USER: *mongo-user
  MONGODB_PASSWORD: *mongo-pass
  MONGODB_HOST: &mongo-host tactical-mongodb
  MONGODB_PORT: &mongo-port 27017

  # PostgreSQL Configuration
  POSTGRES_DB: &postgres-db tacticalrmm
  POSTGRES_USER: &postgres-user postgres
  POSTGRES_PASSWORD: &postgres-pass postgrespass
  POSTGRES_HOST: &postgres-host tactical-postgres
  POSTGRES_PORT: &postgres-port 5432

  # Redis Configuration
  REDIS_HOST: &redis-host tactical-redis

  # MeshCentral Configuration
  MESH_USER: &mesh-user tactical@openframe.io
  MESH_PASS: &mesh-pass tacticalpass@1234
  MESH_DEVICE_GROUP: &mesh-device-group TacticalRMM
  MESH_PORT: &mesh-port 8383
  MESH_HOST: &mesh-host tactical-meshcentral
  MESH_SERVICE: *mesh-host
  MESH_WS_URL: &mesh-ws-url ws://tactical-meshcentral:8383
  MESH_PERSISTENT_CONFIG: &mesh-persistent 0
  MESH_DISABLE_SSL: &mesh-ssl 1
  MESH_COMPRESSION_ENABLED: &mesh-compression true
  MESH_WEBRTC_ENABLED: &mesh-webrtc false

  # SMTP Configuration
  SMTP_HOST: &smtp-host smtp.example.com
  SMTP_PORT: &smtp-port 587
  SMTP_FROM: &smtp-from mesh@example.com
  SMTP_USER: &smtp-user mesh@example.com
  SMTP_PASS: &smtp-pass mesh-smtp-pass
  SMTP_TLS: &smtp-tls false

  # NGINX Configuration
  NGINX_HOST_IP: &nginx-host tactical-nginx
  NGINX_HOST_PORT: &nginx-port 8080

  # Tactical RMM Configuration
  TRMM_USER: &trmm-user tactical
  TRMM_PASS: &trmm-pass tactical
  TACTICAL_BACKEND_PORT: &backend-port 8000
  TRMM_PROTO: &trmm-proto http
  TRMM_DISABLE_WEB_TERMINAL: &web-terminal "False"
  TRMM_DISABLE_SERVER_SCRIPTS: &server-scripts "False"
  TRMM_DISABLE_SSO: &sso "False"
  TRMM_DISABLE_2FA: &tfa "True"

  # Development Settings
  NODE_ENV: &node-env "development"
  DOCKER_BUILD: &docker-build "false"

  # WebSocket Configuration
  WS_PROTO: &ws-proto "ws"
  WS_MASK_OVERRIDE: &ws-mask 1

  # Frontend Configuration
  PUBLIC_DIR: &public-dir /usr/share/nginx/html
  TACTICAL_READY_FILE: &ready-file /opt/tactical/tmp/tactical/ready
  TACTICAL_DIR: &tactical-dir /opt/tactical
  TACTICAL_TMP_DIR: &tactical-tmp-dir /tmp/tactical

  # API Configuration
  API_HOST: &api-host tactical-backend:8000
  API_LOCALHOST_HOST: &api-local-host localhost:8000
  APP_HOST: &app-host tactical-frontend:8080
  APP_LOCALHOST_HOST: &app-local-host localhost:8080

  #NATS args
  NATS_CONFIG: &nats-config "/opt/tactical/nats-rmm.conf"
  NATS_API_CONFIG: &nats-api-config "/opt/tactical/nats-api.conf"
  NATS_CONFIG_CHECK_INTERVAL: &nats-config-check-interval 5
  NATS_STD_BIND_HOST: &nats-std-bind-host tactical-nats
  NATS_WS_BIND_HOST: &nats-ws-bind-host tactical-nats
  NATS_CONNECT_HOST: &nats-connect-host tactical-nats
  NATS_STANDARD_PORT: &nats-http-port 9235
  NATS_WEBSOCKET_PORT: &nats-ws-port 4222

x-args: &default-args
  # MongoDB args
  MONGO_INITDB_ROOT_USERNAME: *mongo-user
  MONGO_INITDB_ROOT_PASSWORD: *mongo-pass
  MONGO_INITDB_DATABASE: *mongo-db
  MONGODB_USER: *mongo-user
  MONGODB_PASSWORD: *mongo-pass
  MONGODB_HOST: *mongo-host
  MONGODB_PORT: *mongo-port

  # PostgreSQL args
  POSTGRES_DB: *postgres-db
  POSTGRES_USER: *postgres-user
  POSTGRES_PASSWORD: *postgres-pass
  POSTGRES_HOST: *postgres-host
  POSTGRES_PORT: *postgres-port

  # Redis args
  REDIS_HOST: *redis-host

  # MeshCentral args
  MESH_USER: *mesh-user
  MESH_PASS: *mesh-pass
  MESH_DEVICE_GROUP: *mesh-device-group
  MESH_PORT: *mesh-port
  MESH_HOST: *mesh-host
  MESH_SERVICE: *mesh-host
  MESH_WS_URL: *mesh-ws-url
  MESH_PERSISTENT_CONFIG: *mesh-persistent
  MESH_DISABLE_SSL: *mesh-ssl
  MESH_COMPRESSION_ENABLED: *mesh-compression
  MESH_WEBRTC_ENABLED: *mesh-webrtc

  # SMTP args
  SMTP_HOST: *smtp-host
  SMTP_PORT: *smtp-port
  SMTP_FROM: *smtp-from
  SMTP_USER: *smtp-user
  SMTP_PASS: *smtp-pass
  SMTP_TLS: *smtp-tls

  # NGINX args
  NGINX_HOST_IP: *nginx-host
  NGINX_HOST_PORT: *nginx-port

  # Tactical RMM args
  TRMM_USER: *trmm-user
  TRMM_PASS: *trmm-pass
  TACTICAL_BACKEND_PORT: *backend-port
  TRMM_PROTO: *trmm-proto
  TRMM_DISABLE_WEB_TERMINAL: *web-terminal
  TRMM_DISABLE_SERVER_SCRIPTS: *server-scripts
  TRMM_DISABLE_SSO: *sso
  TRMM_DISABLE_2FA: *tfa

  # Development args
  NODE_ENV: *node-env
  DOCKER_BUILD: *docker-build

  # WebSocket args
  WS_PROTO: *ws-proto
  WS_MASK_OVERRIDE: *ws-mask

  # Frontend args
  PUBLIC_DIR: *public-dir
  TACTICAL_READY_FILE: *ready-file
  TACTICAL_DIR: *tactical-dir
  TACTICAL_TMP_DIR: *tactical-tmp-dir

  # API args
  API_HOST: *api-host
  API_LOCALHOST_HOST: *api-local-host
  APP_HOST: *app-host
  APP_LOCALHOST_HOST: *app-local-host

  #NATS args
  NATS_CONFIG_CHECK_INTERVAL: *nats-config-check-interval
  NATS_STD_BIND_HOST: *nats-std-bind-host
  NATS_WS_BIND_HOST: *nats-ws-bind-host
  NATS_CONNECT_HOST: *nats-connect-host
  NATS_STANDARD_PORT: *nats-http-port
  NATS_WEBSOCKET_PORT: *nats-ws-port
  NATS_CONFIG: *nats-config
  NATS_API_CONFIG: *nats-api-config

# Default service configuration that all services will extend
x-service-defaults: &service-defaults
  restart: always
  networks:
    - openframe-network
  environment: *default-environment

services:
  tactical-mongodb:
    <<: *service-defaults
    container_name: openframe-tactical-mongodb
    image: mongo:4.4.18
    platform: linux/amd64
    volumes:
      - tactical_mongo_data:/data/db
    user: root
    command: >
      bash -c "
        chown -R mongodb:mongodb /data/db &&
        chmod -R 0700 /data/db &&
        exec docker-entrypoint.sh mongod --auth"
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-postgres:
    <<: *service-defaults
    container_name: openframe-tactical-postgres
    image: postgres:13-alpine
    platform: linux/amd64
    volumes:
      - tactical_postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-redis:
    <<: *service-defaults
    container_name: openframe-tactical-redis
    image: redis:6.0-alpine
    volumes:
      - tactical_redis_data:/data
    command: redis-server --save 3600 1 300 100 60 10000
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-meshcentral:
    <<: *service-defaults
    container_name: openframe-tactical-meshcentral
    platform: linux/amd64
    build:
      context: ./infrastructure/tactical-rmm
      dockerfile: tactical-meshcentral/Dockerfile
      args: *default-args
    volumes:
      - tactical_meshcentral_data:/opt/tactical
    user: root
    entrypoint: [ "/entrypoint.sh" ]
    depends_on:
      tactical-mongodb:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8383/health.ashx" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  tactical-frontend:
    <<: *service-defaults
    container_name: openframe-tactical-frontend
    build:
      context: ./infrastructure/tactical-rmm
      dockerfile: tactical-frontend/Dockerfile
      args: *default-args
    volumes:
      - tactical_frontend_data:/opt/tactical

  tactical-nginx:
    <<: *service-defaults
    container_name: openframe-tactical-nginx
    build:
      context: ./infrastructure/tactical-rmm
      dockerfile: tactical-nginx/Dockerfile
      args: *default-args
    platform: linux/amd64
    ports:
      - "8080:8080"  
      - "8000:8000"
      - "8383:8383"
    volumes:
      - tactical_nginx_data:/opt/tactical
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://tactical-nginx:8081/nginx_status" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-backend:
    <<: *service-defaults
    container_name: openframe-tactical-backend
    build:
      context: ./infrastructure/tactical-rmm
      dockerfile: tactical-base/Dockerfile
      args: *default-args
    platform: linux/amd64
    command: [ "tactical-backend" ]
    volumes:
      - tactical_backend_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
      tactical-nginx:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  tactical-nats:
    <<: *service-defaults
    container_name: openframe-tactical-nats
    build:
      context: ./infrastructure/tactical-rmm
      dockerfile: tactical-base/Dockerfile
      args: *default-args
    platform: linux/amd64
    command: [ "tactical-nats" ]
    volumes:
      - tactical_nats_data:/opt/tactical
    depends_on:
      tactical-backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s

  tactical-websockets:
    <<: *service-defaults
    container_name: openframe-tactical-websockets
    build:
      context: ./infrastructure/tactical-rmm
      dockerfile: tactical-base/Dockerfile
      args: *default-args
    platform: linux/amd64
    command: [ "tactical-websockets" ]
    volumes:
      - tactical_websockets_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
      tactical-nginx:
        condition: service_healthy
      tactical-backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-celery:
    <<: *service-defaults
    container_name: openframe-tactical-celery
    build:
      context: ./infrastructure/tactical-rmm
      dockerfile: tactical-base/Dockerfile
      args: *default-args
    platform: linux/amd64
    command: [ "tactical-celery" ]
    volumes:
      - tactical_celery_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
      tactical-nginx:
        condition: service_healthy
      tactical-backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  tactical-celerybeat:
    <<: *service-defaults
    container_name: openframe-tactical-celerybeat
    build:
      context: ./infrastructure/tactical-rmm
      dockerfile: tactical-base/Dockerfile
      args: *default-args
    platform: linux/amd64
    command: [ "tactical-celerybeat" ]
    volumes:
      - tactical_celerybeat_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy
      tactical-nginx:
        condition: service_healthy
      tactical-backend:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "cat", "/opt/tactical/tmp/tactical/ready" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  openframe-network:
    # driver: bridge

volumes:
  tactical_websockets_data:
  tactical_nats_data:
  tactical_celerybeat_data:
  tactical_meshcentral_data:
  tactical_init_data:
  tactical_frontend_data:
  tactical_backend_data:
  tactical_nginx_data:
  tactical_celery_data:
  tactical_redis_data:
  tactical_postgres_data:
  tactical_mongo_data:


