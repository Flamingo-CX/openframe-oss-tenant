name: openframe-tactical-rmm

x-environment: &common-vars
  IMAGE_REPO: tacticalrmm/
  VERSION: latest
  TRMM_USER: tactical
  TRMM_PASS: tactical
  TRMM_HTTP_PORT: 8080
  TRMM_HTTPS_PORT: 8443
  APP_HOST: app.openframe-tactical.io
  API_HOST: api.openframe-tactical.io
  MESH_HOST: mesh.openframe-tactical.io
  MESH_USER: tactical
  MESH_PASS: tactical
  MONGODB_USER: mongouser
  MONGODB_PASSWORD: mongopass
  MONGODB_DATABASE: meshcentral
  MONGO_INITDB_ROOT_USERNAME: mongouser
  MONGO_INITDB_ROOT_PASSWORD: mongopass
  MONGO_APP_DATABASE: meshcentral
  MONGO_APP_USERNAME: mongouser
  MONGO_APP_PASSWORD: mongopass
  MESH_PERSISTENT_CONFIG: 1
  POSTGRES_USER: tacticalrmm
  POSTGRES_PASS: postgrespass
  POSTGRES_PASSWORD: postgrespass
  POSTGRES_DB: tacticalrmm
  TRMM_DISABLE_WEB_TERMINAL: "False"
  TRMM_DISABLE_SERVER_SCRIPTS: "False"
  TRMM_DISABLE_SSO: "True"
  DEMO: "False"
  POSTGRES_HOST: openframe-tactical-postgres
  POSTGRES_PORT: 5432
  TACTICAL_USER: tactical
  TACTICAL_DIR: /opt/tactical
  TACTICAL_TMP_DIR: /tmp/tactical
  TACTICAL_READY_FILE: /tmp/tactical-ready
  PGDATA: /var/lib/postgresql/data/pgdata

# networks
networks:
  proxy:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24
  api-db:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.1.0/24
  redis:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.2.0/24
  mesh-db:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.3.0/24

# docker managed persistent volumes
volumes:
  tactical_data: null
  postgres_data: null
  mongo_data: null
  mesh_data: null
  redis_data: null
  tactical_tmp: null

services:
  tactical-redis:
    container_name: openframe-tactical-redis
    image: redis:6.0-alpine
    platform: linux/arm64
    user: 1000:1000
    command: redis-server
    restart: always
    environment:
      <<: *common-vars
    volumes:
      - redis_data:/data
    networks:
      - redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  tactical-mongodb:
    container_name: openframe-tactical-mongodb
    image: mongo:4.4
    platform: linux/arm64
    user: root
    restart: always
    environment:
      <<: *common-vars
    networks:
      - mesh-db
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping').ok", "--quiet"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  tactical-postgres:
    build:
      context: ./infrastructure/postgresql
      dockerfile: Dockerfile
    container_name: openframe-tactical-postgres
    platform: linux/arm64
    user: postgres
    environment:
      <<: *common-vars
    volumes:
      - postgres_data:/var/lib/postgresql/data/pgdata
    networks:
      - api-db
      - proxy
      - redis
      - mesh-db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tacticalrmm -d tacticalrmm"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    restart: unless-stopped

  tactical-init:
    container_name: openframe-tactical-init
    image: tacticalrmm/tactical:latest
    platform: linux/amd64
    restart: on-failure
    command: ["tactical-init"]
    environment:
      <<: *common-vars
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-meshcentral:
        condition: service_started
      tactical-redis:
        condition: service_healthy
    networks:
      - api-db
      - proxy
      - redis
    volumes:
      - tactical_data:/opt/tactical
      - mesh_data:/meshcentral-data
      - mongo_data:/mongo/data/db
      - redis_data:/redis/data
      - tactical_tmp:/tmp

  tactical-backend:
    container_name: openframe-tactical-backend
    image: tacticalrmm/tactical:latest
    platform: linux/amd64
    user: root
    command: ["tactical-backend"]
    restart: always
    expose:
      - "8443"
    environment:
      <<: *common-vars
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - tactical_data:/opt/tactical
      - tactical_tmp:/tmp
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy

  tactical-nats:
    container_name: openframe-tactical-nats
    image: tacticalrmm/tactical-nats:latest
    platform: linux/amd64
    user: 1000:1000
    restart: always
    environment:
      <<: *common-vars
    ports:
      - "4222:4222"
    volumes:
      - tactical_data:/opt/tactical
    networks:
      api-db: null
      proxy:
        aliases:
          - api.openframe-tactical.io

  tactical-meshcentral:
    container_name: openframe-tactical-meshcentral
    image: tacticalrmm/tactical-meshcentral:latest
    platform: linux/amd64
    user: root
    restart: always
    environment:
      <<: *common-vars
    ports:
      - "8087:8087"
      - "7443:7443"
    networks:
      proxy:
        aliases:
          - mesh.openframe-tactical.io
      mesh-db: null
    volumes:
      - tactical_data:/opt/tactical
      - mesh_data:/home/node/app/meshcentral-data
    depends_on:
      - tactical-mongodb

  tactical-frontend:
    container_name: openframe-tactical-frontend
    image: tacticalrmm/tactical-frontend:latest
    platform: linux/amd64
    user: 1000:1000
    restart: always
    networks:
      - proxy
    volumes:
      - tactical_data:/opt/tactical
      - tactical_tmp:/tmp
    environment:
      <<: *common-vars
    expose:
      - "4443"

  tactical-websockets:
    container_name: openframe-tactical-websockets
    image: tacticalrmm/tactical:latest
    platform: linux/amd64
    user: 1000:1000
    command: ["tactical-websockets"]
    restart: always
    environment:
      <<: *common-vars
    networks:
      - proxy
      - api-db
      - redis
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - tactical-postgres
      - tactical-backend

  tactical-nginx:
    container_name: openframe-tactical-rmm-nginx
    build:
      context: ./infrastructure/tactical-rmm/tactical-nginx
      dockerfile: Dockerfile
    platform: linux/amd64
    user: 1000:1000
    restart: always
    environment:
      <<: *common-vars
    networks:
      proxy:
        ipv4_address: 172.20.0.20
    ports:
      - "8443:4443"
      - "8099:8099"
      - "9993:9993"
      - "9994:9994"
      - "8100:8100"
      - "9995:9995"
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      - tactical-frontend
      - tactical-backend
      - tactical-meshcentral

  tactical-celery:
    container_name: openframe-tactical-celery
    image: tacticalrmm/tactical:latest
    platform: linux/amd64
    user: 1000:1000
    command: ["tactical-celery"]
    restart: always
    environment:
      <<: *common-vars
    networks:
      - redis
      - proxy
      - api-db
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy

  tactical-celerybeat:
    container_name: openframe-tactical-celerybeat
    image: tacticalrmm/tactical:latest
    platform: linux/amd64
    user: 1000:1000
    command: ["tactical-celerybeat"]
    restart: always
    environment:
      <<: *common-vars
    networks:
      - proxy
      - redis
      - api-db
    volumes:
      - tactical_data:/opt/tactical
    depends_on:
      tactical-postgres:
        condition: service_healthy
      tactical-redis:
        condition: service_healthy