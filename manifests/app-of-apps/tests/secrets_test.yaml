suite: secrets generation tests
templates:
  - templates/docker-secret.yaml
  - templates/repo-secret.yaml
tests:
  # ========================================
  # DOCKER SECRET TESTS
  # ========================================

  - it: should generate docker secret with correct structure
    template: templates/docker-secret.yaml
    set:
      deployment.oss.enabled: true
      deployment.oss.ingress.localhost.enabled: true
      deployment.oss.ingress.ngrok.enabled: false
      deployment.saas.enabled: false
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: docker-pat-secret
      - equal:
          path: type
          value: kubernetes.io/dockerconfigjson
      - exists:
          path: data[".dockerconfigjson"]

  - it: should generate docker secret with custom registry values
    template: templates/docker-secret.yaml
    set:
      deployment.oss.enabled: true
      deployment.oss.ingress.localhost.enabled: true
      deployment.oss.ingress.ngrok.enabled: false
      deployment.saas.enabled: false
      registry.docker.username: "testuser"
      registry.docker.password: "testpass"
      registry.docker.email: "test@example.com"
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: docker-pat-secret
      - equal:
          path: type
          value: kubernetes.io/dockerconfigjson

  # ========================================
  # REPO SECRET TESTS
  # ========================================

  - it: should generate repo secret with correct structure
    template: templates/repo-secret.yaml
    set:
      deployment.oss.enabled: true
      deployment.oss.ingress.localhost.enabled: true
      deployment.oss.ingress.ngrok.enabled: false
      deployment.saas.enabled: false
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: Secret
      - equal:
          path: metadata.name
          value: repo-openframe
      - equal:
          path: type
          value: Opaque
      - equal:
          path: metadata.labels["argocd.argoproj.io/secret-type"]
          value: repository

  - it: should include required repo secret data
    template: templates/repo-secret.yaml
    set:
      deployment.oss.enabled: true
      deployment.oss.ingress.localhost.enabled: true
      deployment.oss.ingress.ngrok.enabled: false
      deployment.saas.enabled: false
    asserts:
      - exists:
          path: stringData.url
      - exists:
          path: stringData.username
      - exists:
          path: stringData.password
      - equal:
          path: stringData.url
          value: https://github.com/flamingo-cx/openframe-oss-tenant.git

  # ========================================
  # SECRETS GENERATION FOR BOTH DEPLOYMENTS
  # ========================================

  - it: should generate both secrets for any deployment type
    set:
      deployment.oss.enabled: false
      deployment.saas.enabled: true
      deployment.saas.ingress.localhost.enabled: true
    asserts:
      - hasDocuments:
          count: 1
        template: templates/docker-secret.yaml
      - hasDocuments:
          count: 1
        template: templates/repo-secret.yaml
      - equal:
          path: metadata.name
          value: docker-pat-secret
        template: templates/docker-secret.yaml
      - equal:
          path: metadata.name
          value: repo-openframe
        template: templates/repo-secret.yaml

  # ========================================
  # SECRET DATA VALIDATION
  # ========================================

  - it: should contain valid GitHub repository configuration
    template: templates/repo-secret.yaml
    set:
      deployment.oss.enabled: true
      deployment.oss.ingress.localhost.enabled: true
      deployment.oss.ingress.ngrok.enabled: false
      deployment.saas.enabled: false
    asserts:
      - matchRegex:
          path: stringData.url
          pattern: "https://github.com/.*"
      - isNotEmpty:
          path: stringData.username
      - isNotEmpty:
          path: stringData.password