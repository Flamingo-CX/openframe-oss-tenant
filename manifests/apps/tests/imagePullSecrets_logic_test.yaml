suite: imagePullSecrets app-helpers tests
templates:
  - templates/application.yaml
tests:
  # Test apps with global.imagePullSecrets structure
  - it: should add global.imagePullSecrets for grafana when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "grafana:"
        documentSelector:
          path: metadata.name
          value: "grafana"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "global:"
        documentSelector:
          path: metadata.name
          value: "grafana"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "imagePullSecrets:"
        documentSelector:
          path: metadata.name
          value: "grafana"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "grafana"

  - it: should add global.imagePullSecrets for prometheus when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "kube-prometheus-stack:"
        documentSelector:
          path: metadata.name
          value: "prometheus"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "global:"
        documentSelector:
          path: metadata.name
          value: "prometheus"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "prometheus"

  - it: should add global.imagePullSecrets for kafka when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "kafka:"
        documentSelector:
          path: metadata.name
          value: "kafka"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "global:"
        documentSelector:
          path: metadata.name
          value: "kafka"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "kafka"

  - it: should add global.imagePullSecrets for promtail when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "promtail:"
        documentSelector:
          path: metadata.name
          value: "promtail"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "global:"
        documentSelector:
          path: metadata.name
          value: "promtail"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "promtail"

  # Test apps with direct imagePullSecrets structure
  - it: should add direct imagePullSecrets for kafka-ui when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "kafka-ui:"
        documentSelector:
          path: metadata.name
          value: "kafka-ui"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "imagePullSecrets:"
        documentSelector:
          path: metadata.name
          value: "kafka-ui"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "kafka-ui"

  - it: should add direct imagePullSecrets for loki when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "loki:"
        documentSelector:
          path: metadata.name
          value: "loki"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "imagePullSecrets:"
        documentSelector:
          path: metadata.name
          value: "loki"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "loki"

  - it: should add direct imagePullSecrets for cassandra when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "cassandra:"
        documentSelector:
          path: metadata.name
          value: "cassandra"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "imagePullSecrets:"
        documentSelector:
          path: metadata.name
          value: "cassandra"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "cassandra"

  - it: should add direct imagePullSecrets for redis when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "redis:"
        documentSelector:
          path: metadata.name
          value: "redis"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "imagePullSecrets:"
        documentSelector:
          path: metadata.name
          value: "redis"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "redis"

  - it: should add direct imagePullSecrets for mongodb-exporter when docker password is set
    set:
      registry.docker.password: "test123"
    asserts:
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "mongodb-exporter:"
        documentSelector:
          path: metadata.name
          value: "mongodb-exporter"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "imagePullSecrets:"
        documentSelector:
          path: metadata.name
          value: "mongodb-exporter"
      - matchRegex:
          path: spec.sources[0].helm.values
          pattern: "docker-pat-secret"
        documentSelector:
          path: metadata.name
          value: "mongodb-exporter"

  # Test empty password scenarios - should NOT add imagePullSecrets
  - it: should NOT add imagePullSecrets for grafana when docker password is empty
    set:
      registry.docker.password: ""
    asserts:
      - notMatchRegex:
          path: spec.sources[0].helm.values
          pattern: "grafana:"
        documentSelector:
          path: metadata.name
          value: "grafana"

  - it: should NOT add imagePullSecrets for kafka-ui when docker password is empty
    set:
      registry.docker.password: ""
    asserts:
      - notMatchRegex:
          path: spec.sources[0].helm.values
          pattern: "kafka-ui:"
        documentSelector:
          path: metadata.name
          value: "kafka-ui"

  - it: should NOT add imagePullSecrets for prometheus when docker password is empty
    set:
      registry.docker.password: ""
    asserts:
      - notMatchRegex:
          path: spec.sources[0].helm.values
          pattern: "kube-prometheus-stack:"
        documentSelector:
          path: metadata.name
          value: "prometheus"

  - it: should NOT add imagePullSecrets for kafka when docker password is empty
    set:
      registry.docker.password: ""
    asserts:
      - notMatchRegex:
          path: spec.sources[0].helm.values
          pattern: "kafka:"
        documentSelector:
          path: metadata.name
          value: "kafka"

  # Test undefined password scenarios - should NOT add imagePullSecrets
  - it: should NOT add imagePullSecrets for any app when docker password is undefined
    asserts:
      - notMatchRegex:
          path: spec.sources[0].helm.values
          pattern: "grafana:"
        documentSelector:
          path: metadata.name
          value: "grafana"
      - notMatchRegex:
          path: spec.sources[0].helm.values
          pattern: "kafka-ui:"
        documentSelector:
          path: metadata.name
          value: "kafka-ui"
      - notMatchRegex:
          path: spec.sources[0].helm.values
          pattern: "kube-prometheus-stack:"
        documentSelector:
          path: metadata.name
          value: "prometheus"