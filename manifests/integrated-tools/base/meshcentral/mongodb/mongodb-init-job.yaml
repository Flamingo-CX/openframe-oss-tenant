apiVersion: batch/v1
kind: Job
metadata:
  name: mongodb-init
  namespace: integrated-tools
spec:
  backoffLimit: 4
  template:
    spec:
      restartPolicy: OnFailure
      containers:
      - name: mongo-init
        image: mongo:8.0.9
        envFrom:
          - secretRef:
            name: mongodb-secret
          - configMapRef:
            name: mongodb-config
        env:
        - name: MONGO_HOST
          value: "meshcentral-mongodb.integrated-tools.svc.cluster.local:27017"
        command:
        - /bin/bash
        - -ec
        - |
          echo "Waiting for MongoDB replica set to be ready..."
          for i in {1..30}; do
            if mongosh --host "$MONGO_HOST" --eval "try { rs.status().ok } catch(e) { 0 }" | grep -q 1; then
              break
            fi
            echo "Retry $i: MongoDB not ready yet..."
            sleep 5
          done

          echo "Checking replica set status..."
          if ! mongosh --host "$MONGO_HOST" --eval "rs.status()" 2>/dev/null | grep -q '"ok" : 1'; then
            echo "Initializing replica set..."
            mongosh --host "$MONGO_HOST" --eval '
              rs.initiate({
                _id: "rs0",
                members: [
                  { _id: 0, host: "meshcentral-mongodb.integrated-tools.svc.cluster.local:27017" }
                ]
              })    
            '
            sleep 10
          else
            echo "Replica set already initialized"
          fi

          echo "Checking admin user..."
          if ! mongosh --host "$MONGO_HOST" -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "db.adminCommand('ping')" >/dev/null 2>&1; then
            echo "Creating admin user..."
            mongosh --host "$MONGO_HOST" --eval "
              db.getSiblingDB('admin').createUser({
                user: '$MONGO_INITDB_ROOT_USERNAME',
                pwd: '$MONGO_INITDB_ROOT_PASSWORD',
                roles: [
                  { role: 'root', db: 'admin' },
                  { role: 'userAdminAnyDatabase', db: 'admin' },
                  { role: 'dbAdminAnyDatabase', db: 'admin' },
                  { role: 'readWriteAnyDatabase', db: 'admin' }
                ]
              })
            "
          else
            echo "Admin user already exists"
          fi

          echo "Final replica set status:"
          mongosh --host "$MONGO_HOST" -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD" --authenticationDatabase admin --eval "rs.status()"
