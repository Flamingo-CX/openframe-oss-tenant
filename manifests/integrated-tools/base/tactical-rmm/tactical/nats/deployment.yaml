apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-nats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-nats
  template:
    metadata:
      labels:
        app: tactical-nats
    spec:
      imagePullSecrets:
        - name: github-pat-secret

      initContainers:
      - name: wait-for-redis
        image: redis:6.0-alpine
        command: ['sh', '-c', '
          echo "Waiting for Redis..." &&
          until redis-cli -h $REDIS_HOST -p 6379 get "tactical_nats_rmm_conf" > /dev/null; do sleep 2; done &&
          until redis-cli -h $REDIS_HOST -p 6379 get "tactical_nats_api_conf" > /dev/null; do sleep 2; done &&
          echo "Redis is ready!"
          ']
        envFrom:
        - configMapRef:
            name: tactical-default
        - configMapRef:
            name: tactical-postgres
        - configMapRef:
            name: tactical-redis
        - secretRef:
            name: tactical-postgres

      - name: wait-for-backend
        image: postgres:14-alpine
        command:
        - sh
        - -c
        - |
          echo "Checking PostgreSQL connection..." &&
          until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT; do
            echo "Waiting for PostgreSQL to accept connections...";
            sleep 2;
          done &&
          echo "PostgreSQL is accepting connections!" &&
          echo "Verifying PostgreSQL query execution..." &&
          until PGPASSWORD=$POSTGRES_PASSWORD psql -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER -c "SELECT 1;" > /dev/null 2>&1; do
            echo "Waiting for PostgreSQL to execute queries...";
            sleep 2;
          done &&
          echo "PostgreSQL is fully operational!" &&
          echo "Waiting for Backend port..." &&
          HOST_IP=$(echo $API_HOST | cut -d':' -f1) &&
          HOST_PORT=$(echo $API_HOST | cut -d':' -f2) &&
          until nc -z $HOST_IP $HOST_PORT; do
            echo "Waiting for backend port to be ready...";
            sleep 2;
          done &&
          echo "Backend port is ready!" &&
          echo "Checking Backend health endpoint..." &&
          until wget -q --spider ${TRMM_PROTO}://$API_HOST 2>/dev/null; do
            echo "Waiting for backend health endpoint...";
            sleep 2;
          done &&
          echo "Backend is fully ready!"
        envFrom:
        - configMapRef:
            name: tactical-default
        - configMapRef:
            name: tactical-postgres
        - configMapRef:
            name: tactical-redis
        - secretRef:
            name: tactical-postgres

      containers:
      - name: openframe-tactical-nats
        image: openframe-tactical-nats
        args: ["tactical-nats"]
        ports:
        - containerPort: 9235
        - containerPort: 4222
        envFrom:
        - configMapRef:
            name: tactical-default
        - configMapRef:
            name: tactical-postgres
        - configMapRef:
            name: tactical-redis
        - secretRef:
            name: tactical-postgres
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 15
        volumeMounts:
        - name: nats-data
          mountPath: /opt/tactical
      volumes:
      - name: nats-data
        persistentVolumeClaim:
          claimName: tactical-nats-data
