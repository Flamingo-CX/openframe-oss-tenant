# Add resolver for Docker DNS
resolver 127.0.0.11 valid=30s;

# Backend API Server
server {
    listen 4443 ssl;
    server_name ${API_HOST};
    
    ssl_certificate /opt/tactical/certs/public.crt;
    ssl_certificate_key /opt/tactical/certs/private.key;
    
    location / {
        set $upstream_backend ${BACKEND_SERVICE}:8080;
        proxy_pass http://$upstream_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /ws/ {
        set $upstream_websockets ${WEBSOCKETS_SERVICE}:8383;
        proxy_pass http://$upstream_websockets;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    location /natsws {
        set $upstream_nats ${NATS_SERVICE}:9235;
        proxy_pass http://$upstream_nats;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }
}

# Frontend Server
server {
    listen 4443 ssl;
    server_name ${APP_HOST};
    
    ssl_certificate /opt/tactical/certs/public.crt;
    ssl_certificate_key /opt/tactical/certs/private.key;
    
    location / {
        set $upstream_frontend ${FRONTEND_SERVICE}:8080;
        proxy_pass http://$upstream_frontend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# MeshCentral Server
server {
    listen 4443 ssl;
    server_name ${MESH_HOST};
    
    ssl_certificate /opt/tactical/certs/public.crt;
    ssl_certificate_key /opt/tactical/certs/private.key;
    
    location / {
        set $upstream_mesh ${MESH_SERVICE}:4443;
        proxy_pass http://$upstream_mesh;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        proxy_send_timeout 330s;
        proxy_read_timeout 330s;
    }
}

# HTTP to HTTPS redirect for all hosts
server {
    listen 8080;
    server_name ${API_HOST} ${APP_HOST} ${MESH_HOST};
    return 301 https://$host$request_uri;
}

# Default server for direct container access
server {
    listen 8080;
    server_name _;

    location / {
        root /usr/share/nginx/html;
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        set $upstream_backend ${BACKEND_SERVICE}:8080;
        proxy_pass http://$upstream_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
} 