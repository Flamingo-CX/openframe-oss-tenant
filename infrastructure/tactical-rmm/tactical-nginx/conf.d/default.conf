# backend config
server {
    resolver 127.0.0.11 valid=30s;
    server_name ${API_HOST};

    location / {
        set $api http://tactical-rmm-backend:8080;
        proxy_pass $api;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 30s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }

    location /static/ {
        root /opt/tactical/api/;
        add_header Access-Control-Allow-Origin "https://${APP_HOST}";
    }

    location /private/ {
        internal;
        add_header "Access-Control-Allow-Origin" "https://${APP_HOST}";
        alias /opt/tactical/api/tacticalrmm/private/;
    }

    location ~ ^/ws/ {
        set $ws http://tactical-rmm-websockets:8383;
        proxy_pass $ws;

        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_redirect off;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Host $server_name;
    }

    location /assets/ {
        internal;
        add_header "Access-Control-Allow-Origin" "https://${APP_HOST}";
        alias /opt/tactical/reporting/assets/;
    }

    location ~ ^/natsws {
        set $natswebsocket http://tactical-rmm-nats:9235;
        proxy_pass $natswebsocket;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Forwarded-Host $host:$server_port;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    client_max_body_size 300M;

    listen 4443 ssl http2;
    ssl_certificate /opt/tactical/certs/fullchain.pem;
    ssl_certificate_key /opt/tactical/certs/private.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Disable SSL stapling for self-signed certs
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # ssl_trusted_certificate /opt/tactical/certs/chain.pem;

    add_header Strict-Transport-Security "max-age=15768000" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
}

# frontend config
server {
    resolver 127.0.0.11 valid=30s;
    server_name ${APP_HOST};

    location / {
        set $frontend http://tactical-rmm-frontend:80;
        proxy_pass $frontend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    client_max_body_size 300M;

    listen 8080;
    listen 4443 ssl http2;
    ssl_certificate /opt/tactical/certs/fullchain.pem;
    ssl_certificate_key /opt/tactical/certs/private.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Disable SSL stapling for self-signed certs
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # ssl_trusted_certificate /opt/tactical/certs/chain.pem;

    add_header Strict-Transport-Security "max-age=15768000" always;
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
}

server {
    listen 8080;
    server_name ${MESH_HOST};
    return 301 https://$server_name$request_uri;
}

server {
    listen 4443 ssl http2;
    server_name ${MESH_HOST};

    ssl_certificate /opt/tactical/certs/fullchain.pem;
    ssl_certificate_key /opt/tactical/certs/private.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

    # modern configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    # Disable SSL stapling for self-signed certs
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # ssl_trusted_certificate /opt/tactical/certs/chain.pem;

    add_header Strict-Transport-Security "max-age=15768000" always;

    location / {
        proxy_pass http://trmm-meshcentral:443;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
    }
} 