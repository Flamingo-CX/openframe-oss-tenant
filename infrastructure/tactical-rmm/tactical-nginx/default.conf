resolver 127.0.0.11 valid=1s;
resolver_timeout 1s;

# nginx status
server {
    listen 8081;
    server_name _;

    access_log off;

    location /nginx_status {
        stub_status on;
        allow 127.0.0.1;
        allow 172.18.0.0/16;
        deny all;
    }
}

# frontend config
server {
    listen 8080;
    server_name _;

    location / {
        set $frontend_upstream http://tactical-frontend:8080;
        proxy_pass $frontend_upstream;
        proxy_http_version  1.1;
        proxy_cache_bypass  $http_upgrade;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "upgrade";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;
        proxy_set_header Origin            $http_origin;
        proxy_redirect off;
    }
}

# backend config
server {
    listen 8000;
    server_name _;

    # Global CORS settings for all backend endpoints
    location / {
        set $backend_upstream http://tactical-backend:8000;
        proxy_pass $backend_upstream;
        proxy_http_version  1.1;
        proxy_cache_bypass  $http_upgrade;
        proxy_set_header Upgrade           $http_upgrade;
        proxy_set_header Connection        "upgrade";
        proxy_set_header Host              $host;
        proxy_set_header X-Real-IP         $remote_addr;
        proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host  $host;
        proxy_set_header X-Forwarded-Port  $server_port;
        proxy_set_header Origin            $http_origin;
        proxy_set_header Authorization     $http_authorization;

        # Hide any existing CORS headers from upstream
        proxy_hide_header Access-Control-Allow-Origin;
        proxy_hide_header Access-Control-Allow-Methods;
        proxy_hide_header Access-Control-Allow-Headers;
        proxy_hide_header Access-Control-Allow-Credentials;
        proxy_hide_header Access-Control-Expose-Headers;

        # Add our own CORS headers
        add_header 'Access-Control-Allow-Origin' $http_origin always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH' always;
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken,Accept,Accept-Encoding' always;
        add_header 'Access-Control-Expose-Headers' 'Content-Type,Authorization,X-CSRFToken' always;

        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, DELETE, PUT, PATCH' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-CSRFToken,Accept,Accept-Encoding' always;
            add_header 'Access-Control-Max-Age' 1728000 always;
            add_header 'Content-Type' 'text/plain charset=UTF-8' always;
            add_header 'Content-Length' 0 always;
            return 204;
        }
    }

    location /static/ {
        root /opt/tactical/api/;
    }

    location /private/ {
        internal;
        alias /opt/tactical/api/tacticalrmm/private/;
    }

    location ~ ^/ws/ {
        set $websockets_upstream http://tactical-websockets:8383;
        proxy_pass $websockets_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_set_header   X-Forwarded-Host  $host;
        proxy_set_header   X-Forwarded-Port  $server_port;
        proxy_set_header   Origin $http_origin;
    }

    location /assets/ {
        internal;
        alias /opt/tactical/reporting/assets/;
    }

    location ~ ^/natsws {
        set $nats_upstream http://tactical-nats:9235;
        proxy_pass $nats_upstream;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Origin $http_origin;
    }

    client_max_body_size 300M;
}

# meshcentral config
server {
    listen 8383;
    server_name _;
    proxy_send_timeout 330s;
    proxy_read_timeout 330s;

    location / {
        set $mesh_upstream http://tactical-meshcentral:8383;
        proxy_pass $mesh_upstream;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host tactical-meshcentral;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto http;
        proxy_set_header Origin http://tactical-meshcentral:8383;
    }

    # Add a health check endpoint
    location /health {
        return 200 "healthy\n";
    }
}