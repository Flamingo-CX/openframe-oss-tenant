apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-mongodb-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openframe-mongodb-config
data:
  MONGO_INITDB_DATABASE: "openframe"
  MONGO_APP_USERNAME: "openframe"
  DATA_DIR: "/data"

---
apiVersion: v1
kind: Secret
metadata:
  name: openframe-mongodb-secret
type: Opaque
data:
  # MONGO_INITDB_ROOT_USERNAME: cm9vdA==  # base64(root)
  MONGO_INITDB_ROOT_USERNAME: b3BlbmZyYW1l  # base64(openframe)
  MONGO_INITDB_ROOT_PASSWORD: cGFzc3dvcmQxMjM0NTY3ODk=  # base64(password123456789)
  MONGO_APP_PASSWORD: cGFzc3dvcmQxMjM0NTY3ODk=  # base64(password123456789)

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openframe-mongodb-init
data:
  mongo-init.sh: |
    #!/bin/bash

    # Export all environment variables
    set -a
    [ -f /etc/environment ] && source /etc/environment
    set +a

    # Ensure environment variables are set
    : "${MONGO_INITDB_ROOT_USERNAME:?Required}"
    : "${MONGO_INITDB_ROOT_PASSWORD:?Required}"
    : "${MONGO_INITDB_DATABASE:?Required}"
    : "${MONGO_APP_USERNAME:?Required}"
    : "${MONGO_APP_PASSWORD:?Required}"

    if [ ! -f "$DATA_DIR/db/s.mongodb_password_set" ]; then
      echo "First time initialization..."

      # mkdir -p $DATA_DIR/.mongodb

      # Initialize MongoDB with users
      mongosh admin -u $MONGO_INITDB_ROOT_USERNAME -p $MONGO_INITDB_ROOT_PASSWORD --eval <<EOF
    db = db.getSiblingDB('$MONGO_INITDB_DATABASE');

    // Create the database explicitly
    db.createCollection('system.users');

    // Only create app user if username is not 'root'
    if ('$MONGO_APP_USERNAME' !== 'root') {
        db.createUser({
            user: '$MONGO_APP_USERNAME',
            pwd: '$MONGO_APP_PASSWORD',
            roles: [
                { role: 'readWrite', db: '$MONGO_INITDB_DATABASE' },
                { role: 'dbAdmin', db: '$MONGO_INITDB_DATABASE' }
            ]
        });
    }

    db.createCollection('events');
    db.events.insertMany([
        {
        id: 'evt-001',
        type: 'USER_ACTION',
        payload: JSON.stringify({
            action: 'LOGIN',
            userId: 'user-123',
            timestamp: new Date()
        }),
        timestamp: new Date(),
        userId: 'user-123'
        },
        {
        id: 'evt-002',
        type: 'SYSTEM_EVENT',
        payload: JSON.stringify({
            action: 'BACKUP_COMPLETED',
            status: 'SUCCESS',
            timestamp: new Date()
        }),
        timestamp: new Date(),
        userId: 'system'
        }
    ]);

    db.events.createIndex({ 'userId': 1, 'timestamp': -1 });
    db.events.createIndex({ 'type': 1 });
    EOF

      # Mark initialization as complete
      touch $DATA_DIR/db/.mongodb_password_set
    fi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openframe-mongodb-readiness
data:
  readiness-command.sh: |
    #!/bin/bash
    mongosh \
      --authenticationDatabase "${MONGO_INITDB_DATABASE}" \
      --username "${MONGO_APP_USERNAME}" \
      --password "${MONGO_APP_PASSWORD}" \
      --eval "db.adminCommand('ping').ok" \
      --quiet

---
apiVersion: v1
kind: Service
metadata:
  name: openframe-mongodb
spec:
  selector:
    app: openframe-mongodb
  ports:
    - name: mongodb
      protocol: TCP
      port: 27017
      targetPort: 27017
  clusterIP: None  # Headless service for StatefulSet

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: openframe-mongodb
spec:
  serviceName: "openframe-mongodb"
  replicas: 1
  selector:
    matchLabels:
      app: openframe-mongodb
  template:
    metadata:
      labels:
        app: openframe-mongodb
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchLabels:
                  app: openframe-mongodb
              topologyKey: kubernetes.io/hostname
            weight: 1
      containers:
        - name: openframe-mongodb
          image: mongo:7.0.18
          ports:
            - containerPort: 27017
          envFrom:
            - configMapRef:
                name: openframe-mongodb-config
            - secretRef:
                name: openframe-mongodb-secret
          volumeMounts:
            - name: openframe-mongodb-storage
              mountPath: /data/db
            - name: init-script
              mountPath: /docker-entrypoint-initdb.d
            - name: logs
              mountPath: /var/log/mongodb
            - name: readiness-command
              mountPath: /usr/local/bin/readiness-command.sh
              subPath: readiness-command.sh
          readinessProbe:
            exec:
              command: ["/bin/bash", "/usr/local/bin/readiness-command.sh"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: init-script
          configMap:
            name: openframe-mongodb-init
        - name: logs
          emptyDir: {}
        - name: openframe-mongodb-storage
          persistentVolumeClaim:
            claimName: openframe-mongodb-pvc
        - name: readiness-command
          configMap:
            name: openframe-mongodb-readiness
            defaultMode: 0755
