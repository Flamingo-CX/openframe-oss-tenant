apiVersion: v1
kind: ConfigMap
metadata:
  name: openframe-cassandra-jmx-config
data:
  config.yml: |
    lowercaseOutputName: true
    lowercaseOutputLabelNames: true
    username: cassandra
    password: cassandra
    whitelistObjectNames: ["org.apache.cassandra.*:*"]
    blacklistObjectNames: []
    rules:
      - pattern: 'org.apache.cassandra.metrics<type=(Connection|Streaming|CommitLog|ClientRequest|Cache|ThreadPools|GossipStage|StorageProxy|Storage|HintsService|BatchRemove|Compaction|Repair|NettyStage|RequestResponseStage|ReadRepairStage|MiscStage|MemtablePostFlusher|MemtableReclaimMemory|PendingRangeCalculator|Migration|AntiEntropySessions|CASStage|SecondaryIndexManagement|HintsDispatcher|Native|TombstoneWarnings|MemtableFlushWriter|ValidationExecutor|SizeTieredCompactionStrategy|LeveledCompactionStrategy|TimeWindowCompactionStrategy|DateTieredCompactionStrategy|GCInspector|ScheduledTasks|Gossiper|MessagingService|CommitLogService|MigrationStage|MemtableFlushWriter|CompactionExecutor|InternalResponseStage|ViewMutationStage|AntiEntropyStage|CacheCleanupExecutor|CounterMutationStage|MiscStage|MemtablePostFlush|ValidationExecutor|SamplingExecutor|MemtableReclaimMemory|PendingRangeCalculator|GossipStage|SecondaryIndexManagement|HintsDispatcher|RequestResponseStage|ReadRepairStage|Sampler|ColumnFamilySerialization|Commitlog|Compaction|MessagingService|ClientMetrics|Storage|ThreadPools|BufferPool|BlockingExecutor|MemtablePool|JVM|FileCache), scope=(\w+), name=(\w+)><>Value'
        name: cassandra_$1_$3
        labels:
          scope: $2
      - pattern: 'org.apache.cassandra.metrics<type=(Connection|Streaming|CommitLog|ClientRequest|Cache|ThreadPools|GossipStage|StorageProxy|Storage|HintsService|BatchRemove|Compaction|Repair|NettyStage|RequestResponseStage|ReadRepairStage|MiscStage|MemtablePostFlusher|MemtableReclaimMemory|PendingRangeCalculator|Migration|AntiEntropySessions|CASStage|SecondaryIndexManagement|HintsDispatcher|Native|TombstoneWarnings|MemtableFlushWriter|ValidationExecutor|SizeTieredCompactionStrategy|LeveledCompactionStrategy|TimeWindowCompactionStrategy|DateTieredCompactionStrategy|GCInspector|ScheduledTasks|Gossiper|MessagingService|CommitLogService|MigrationStage|MemtableFlushWriter|CompactionExecutor|InternalResponseStage|ViewMutationStage|AntiEntropyStage|CacheCleanupExecutor|CounterMutationStage|MiscStage|MemtablePostFlush|ValidationExecutor|SamplingExecutor|MemtableReclaimMemory|PendingRangeCalculator|GossipStage|SecondaryIndexManagement|HintsDispatcher|RequestResponseStage|ReadRepairStage|Sampler|ColumnFamilySerialization|Commitlog|Compaction|MessagingService|ClientMetrics|Storage|ThreadPools|BufferPool|BlockingExecutor|MemtablePool|JVM|FileCache), name=(\w+)><>Value'
        name: cassandra_$1_$2
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-cassandra-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-cassandra-logs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openframe-cassandra
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openframe-cassandra
  template:
    metadata:
      labels:
        app: openframe-cassandra
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: init-jmx
        image: busybox
        command:
          - "sh"
          - "-c"
          - "wget -O /opt/jmx_exporter/jmx_prometheus_javaagent.jar https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/1.0.1/jmx_prometheus_javaagent-1.0.1.jar"
        volumeMounts:
        - name: jmx-exporter
          mountPath: /opt/jmx_exporter
      containers:
        - name: openframe-cassandra
          image: ghcr.io/flamingo-cx/openframe-cassandra:latest
          ports:
            - containerPort: 9042
            - containerPort: 7199
            - containerPort: 9404
          volumeMounts:
            - name: openframe-cassandra-data
              mountPath: /var/lib/cassandra
            - name: openframe-cassandra-logs
              mountPath: /var/log/cassandra
            - name: openframe-cassandra-init
              mountPath: /docker-entrypoint-initdb.d
            - name: jmx-exporter
              mountPath: /opt/jmx_exporter
            - name: openframe-cassandra-jmx-config
              mountPath: /opt/jmx_exporter/config.yml
              subPath: config.yml
          env:
            - name: CASSANDRA_CLUSTER_NAME
              value: "openframe_cluster"
            - name: CASSANDRA_DC
              value: "datacenter1"
            - name: CASSANDRA_START_RPC
              value: "true"
            - name: CASSANDRA_NATIVE_TRANSPORT_MAX_THREADS
              value: "128"
            - name: CASSANDRA_NATIVE_TRANSPORT_PORT_SSL
              value: "9142"
            - name: CASSANDRA_NATIVE_TRANSPORT_MAX_FRAME_SIZE
              value: "256MB"
            - name: CASSANDRA_STARTUP_TIMEOUT
              value: "300"
            - name: CASSANDRA_SYSTEM_AUTH_BOOTSTRAP_DELAY
              value: "0"
            - name: GOSSIP_WAIT_TIME_IN_MS
              value: "0"
            - name: HEAP_NEWSIZE
              value: "128M"
            - name: MAX_HEAP_SIZE
              value: "512M"
            - name: LOCAL_JMX
              value: "no"
            - name: JMX_PORT
              value: "7199"
          livenessProbe:
            exec:
              command:
                - "/bin/sh"
                - "-c"
                - "(nodetool -u cassandra -pw cassandra status && cqlsh -u cassandra -p cassandra -e 'SELECT now() FROM system.local') || exit 1"
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5
          readinessProbe:
            exec:
              command:
                - "/bin/sh"
                - "-c"
                - "(nodetool -u cassandra -pw cassandra status && cqlsh -u cassandra -p cassandra -e 'SELECT now() FROM system.local') || exit 1"
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 5
      volumes:
        - name: openframe-cassandra-data
          persistentVolumeClaim:
            claimName: openframe-cassandra-data
        - name: openframe-cassandra-logs
          persistentVolumeClaim:
            claimName: openframe-cassandra-logs
        - name: openframe-cassandra-init
          configMap:
            name: openframe-cassandra-init
        - name: jmx-exporter
          emptyDir: {}
        - name: openframe-cassandra-jmx-config
          configMap:
            name: openframe-cassandra-jmx-config
            items:
              - key: config.yml
                path: config.yml
---
apiVersion: v1
kind: Service
metadata:
  name: openframe-cassandra
spec:
  selector:
    app: openframe-cassandra
  ports:
    - port: 9042
      targetPort: 9042
      name: cql
    - port: 7199
      targetPort: 7199
      name: jmx
    - port: 9404
      targetPort: 9404
      name: jmx-exporter
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: openframe-cassandra-init
data:
  cassandra-init.sql: |
    CREATE KEYSPACE IF NOT EXISTS openframe_events
    WITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1};

    USE openframe_events;

    CREATE TABLE IF NOT EXISTS event_streams (
        user_id text,
        stream_id text,
        event_id uuid,
        timestamp timestamp,
        payload text,
        event_type text,    -- Fixed column name
        metadata map<text, text>,
        PRIMARY KEY ((user_id), stream_id, event_id, timestamp)
    ) WITH CLUSTERING ORDER BY (stream_id ASC, event_id ASC, timestamp DESC);

    CREATE INDEX IF NOT EXISTS idx_event_type ON event_streams(event_type);
---
