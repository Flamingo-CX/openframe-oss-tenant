apiVersion: v1
kind: ConfigMap
metadata:
  name: tool-registrations
data:
  register-tools.sh: |
    #!/bin/sh

    # Function to check job status
    check_job_status() {
      job_name=$1
      max_attempts=30
      attempt=1
      wait_time=10

      echo "Checking status of job: $job_name"
      while [ $attempt -le $max_attempts ]; do
        status=$(kubectl get job $job_name -o jsonpath='{.status.conditions[?(@.type=="Complete")].status}')
        if [ "$status" = "True" ]; then
          echo "Job $job_name completed successfully"
          return 0
        fi

        failed=$(kubectl get job $job_name -o jsonpath='{.status.conditions[?(@.type=="Failed")].status}')
        if [ "$failed" = "True" ]; then
          echo "Job $job_name failed"
          kubectl logs job/$job_name
          return 1
        fi

        echo "Waiting for job $job_name to complete... (attempt $attempt/$max_attempts)"
        attempt=$((attempt + 1))
        sleep $wait_time
      done

      echo "Job $job_name did not complete within the expected time"
      return 1
    }

    # Function to register an integrated tool
    register_tool() {
      tool_id=$1
      tool_type=$2
      name=$3
      description=$4
      urls_json=$5
      username=$6
      password=$7
      token=$8
      category=$9
      platform_category=${10}
      layer=${11}
      layer_order=${12}
      layer_color=${13}
      api_key_type=${14:-"BEARER_TOKEN"}
      api_key_name=${15:-""}

      echo "Registering $name with OpenFrame API..."

      # Build credentials object based on what's provided
      credentials_parts=""
      if [ -n "$username" ]; then
        credentials_parts="$credentials_parts\"username\": \"$username\""
      fi
      if [ -n "$password" ]; then
        if [ -n "$credentials_parts" ]; then
          credentials_parts="$credentials_parts,"
        fi
        credentials_parts="$credentials_parts\"password\": \"$password\""
      fi
      if [ -n "$token" ]; then
        if [ -n "$credentials_parts" ]; then
          credentials_parts="$credentials_parts,"
        fi
        api_key_json="{\"key\": \"$token\", \"type\": \"$api_key_type\""
        if [ "$api_key_type" != "BEARER_TOKEN" ] && [ -n "$api_key_name" ]; then
          api_key_json="$api_key_json, \"keyName\": \"$api_key_name\""
        fi
        api_key_json="$api_key_json}"
        credentials_parts="$credentials_parts\"apiKey\": $api_key_json"
      fi

      credentials_json="{$credentials_parts}"

      # Prepare the full JSON payload
      json_payload="{
        \"tool\": {
          \"id\": \"$tool_id\",
          \"toolType\": \"$tool_type\",
          \"name\": \"$name\",
          \"description\": \"$description\",
          \"toolUrls\": $urls_json,
          \"type\": \"$tool_type\",
          \"category\": \"$category\",
          \"platformCategory\": \"$platform_category\",
          \"enabled\": true,
          \"credentials\": $credentials_json,
          \"layer\": \"$layer\",
          \"layerOrder\": $layer_order,
          \"layerColor\": \"$layer_color\",
          \"metricsPath\": \"/metrics\",
          \"healthCheckEndpoint\": \"/health\",
          \"healthCheckInterval\": 30,
          \"connectionTimeout\": 5000,
          \"readTimeout\": 5000,
          \"allowedEndpoints\": [\"/api/v1/*\", \"/metrics\"]
        }
      }"

      # Send the request
      curl -X POST "http://openframe-management:8095/v1/tools/$tool_id" \
        -H "Content-Type: application/json" \
        -d "$json_payload" \
        --retry 5 \
        --retry-delay 2 \
        --retry-all-errors

      if [ $? -ne 0 ]; then
        echo "Failed to register $name"
        return 1
      fi

      echo "$name registered successfully!"
      return 0
    }

    # Register OpenFrame UI Service
    register_tool \
      "openframe-ui" \
      "OPENFRAME" \
      "OpenFrame UI" \
      "OpenFrame User Interface Service" \
      '[{"url": "http://openframe-ui", "port": "4000", "type": "DASHBOARD"}]' \
      "" \
      "" \
      "" \
      "User Interface" \
      "OpenFrame Core" \
      "Interface" \
      1 \
      "#FFB300"

    # Register OpenFrame Gateway Service
    register_tool \
      "openframe-gateway" \
      "OPENFRAME" \
      "OpenFrame Gateway" \
      "OpenFrame Gateway Service" \
      '[{"url": "http://openframe-gateway", "port": "8100", "type": "API"}]' \
      "" \
      "" \
      "" \
      "Gateway" \
      "OpenFrame Core" \
      "Application" \
      1 \
      "#455A64"

    # Register OpenFrame API Service
    register_tool \
      "openframe-api" \
      "OpenFrame API" \
      "OpenFrame API Gateway Service" \
      '[{"url": "http://openframe-api", "port": "8095", "type": "API"}]' \
      "" \
      "" \
      "" \
      "API Gateway" \
      "OpenFrame Core" \
      "Application" \
      2 \
      "#455A64"

    # Register OpenFrame Stream Service
    register_tool \
      "openframe-stream" \
      "OPENFRAME" \
      "OpenFrame Stream" \
      "OpenFrame Stream Processing Service" \
      '[{"url": "http://openframe-stream", "port": "8091", "type": "API"}]' \
      "" \
      "" \
      "" \
      "Stream Processing" \
      "OpenFrame Core" \
      "Application" \
      3 \
      "#455A64"

    # Register OpenFrame Management Service
    register_tool \
      "openframe-management" \
      "OPENFRAME" \
      "OpenFrame Management" \
      "OpenFrame Management Service" \
      '[{"url": "http://openframe-management", "port": "8096", "type": "API"}]' \
      "" \
      "" \
      "" \
      "Management" \
      "OpenFrame Core" \
      "Application" \
      4 \
      "#455A64"

    # Register OpenFrame Config Service
    register_tool \
      "openframe-config" \
      "OPENFRAME" \
      "OpenFrame Config" \
      "OpenFrame Configuration Service" \
      '[{"url": "http://openframe-config", "port": "8090", "type": "API"}]' \
      "" \
      "" \
      "" \
      "Configuration" \
      "OpenFrame Core" \
      "Configuration" \
      1 \
      "#FFB74D"

    # Register Kafka
    register_tool \
      "kafka-primary" \
      "KAFKA" \
      "Kafka Message Broker" \
      "Apache Kafka Event Streaming Platform" \
      '[{"url": "http://kafka-ui", "port": "8081", "type": "DASHBOARD"}, {"url": "http://openframe-kafka", "port": "9092", "type": "BROKER"}, {"url": "http://openframe-kafka", "port": "29092", "type": "INTERNAL"}]' \
      "" \
      "" \
      "" \
      "Message Broker" \
      "OpenFrame Service" \
      "Streaming" \
      1 \
      "#1E88E5"

    # Register Zookeeper
    register_tool \
      "zookeeper-primary" \
      "ZOOKEEPER" \
      "Zookeeper Coordinator" \
      "Apache Zookeeper Distributed Coordinator" \
      '[{"url": "http://zookeeper", "port": "2181", "type": "COORDINATOR"}]' \
      "" \
      "" \
      "" \
      "Service Discovery" \
      "OpenFrame Service" \
      "Streaming" \
      2 \
      "#1E88E5"

    # Register NiFi
    register_tool \
      "nifi-primary" \
      "NIFI" \
      "Apache NiFi" \
      "NiFi Data Integration Platform" \
      '[{"url": "https://openframe-nifi", "port": "8443", "type": "DASHBOARD"}, {"url": "https://openframe-nifi", "port": "9096", "type": "API"}]' \
      "openframe" \
      "password123456789" \
      "" \
      "Data Integration" \
      "OpenFrame Service" \
      "Data Integration" \
      1 \
      "#0D47A1"

    # Register MongoDB
    register_tool \
      "mongodb-primary" \
      "MONGODB" \
      "MongoDB Database" \
      "MongoDB NoSQL Database" \
      '[{"url": "mongodb://openframe-mongodb", "port": "27017", "type": "DATABASE"}, {"url": "http://openframe-mongo-express", "port": "8010", "type": "DASHBOARD"}]' \
      "openframe" \
      "password123456789" \
      "" \
      "NoSQL Database" \
      "OpenFrame Datasource" \
      "Datasource" \
      1 \
      "#616161"

    # Register Redis
    register_tool \
      "redis-primary" \
      "REDIS" \
      "Redis Cache" \
      "Redis In-Memory Cache" \
      '[{"url": "redis://openframe-redis-headless", "port": "6379", "type": "DATABASE"}]' \
      "" \
      "" \
      "" \
      "In-Memory Database" \
      "OpenFrame Datasource" \
      "Datasource" \
      2 \
      "#616161"

    # Register Cassandra
    register_tool \
      "cassandra-primary" \
      "CASSANDRA" \
      "Cassandra Database" \
      "Cassandra Distributed Database" \
      '[{"url": "cassandra://openframe-cassandra", "port": "9042", "type": "DATABASE"}]' \
      "" \
      "" \
      "" \
      "NoSQL Database" \
      "OpenFrame Datasource" \
      "Datasource" \
      3 \
      "#616161"

    # Register Pinot
    register_tool \
      "pinot-primary" \
      "PINOT" \
      "Apache Pinot" \
      "Apache Pinot Real-time Analytics Database" \
      '[{"url": "http://openframe-pinot-controller", "port": "9000", "type": "CONTROLLER"},{"url": "http://openframe-pinot-broker", "port": "8099", "type": "BROKER"},{"url": "http://openframe-pinot-server", "port": "8097", "type": "SERVER"}]' \
      "" \
      "" \
      "" \
      "Analytics Database" \
      "OpenFrame Service" \
      "Datasource" \
      4 \
      "#616161"

    # Register Grafana
    register_tool \
      "grafana-primary" \
      "GRAFANA" \
      "Grafana" \
      "Grafana Monitoring Dashboard" \
      '[{"url": "http://kube-prometheus-stack-grafana.monitoring.svc", "port": "3000", "type": "DASHBOARD"}, {"url": "http://openframe-grafana", "port": "3000", "type": "API"}]' \
      "openframe" \
      "password123456789" \
      "" \
      "Monitoring Dashboard" \
      "OpenFrame Service" \
      "Monitoring" \
      1 \
      "#78909C"

    # Register Prometheus
    register_tool \
      "prometheus-primary" \
      "PROMETHEUS" \
      "Prometheus" \
      "Prometheus Metrics Database" \
      '[{"url": "http://kube-prometheus-stack-prometheus.monitoring.svc", "port": "9090", "type": "API"}]' \
      "" \
      "" \
      "" \
      "Metrics Database" \
      "OpenFrame Service" \
      "Monitoring" \
      2 \
      "#78909C"

    # Register Loki
    register_tool \
      "loki-primary" \
      "LOKI" \
      "Loki" \
      "Loki Log Aggregation System" \
      '[{"url": "http://openframe-loki.monitoring.svc", "port": "3100", "type": "API"}]' \
      "" \
      "" \
      "" \
      "Log Aggregation" \
      "OpenFrame Service" \
      "Monitoring" \
      3 \
      "#78909C"

    # Register Integrated Tools MySQL
    register_tool \
      "integrated-tools-mysql" \
      "MYSQL" \
      "Integrated Tools MySQL" \
      "MySQL Database for Integrated Tools" \
      '[{"url": "mysql://openframe-integrated-tools-mysql", "port": "3306", "type": "DATABASE"}]' \
      "integrated-tools-user" \
      "integrated-tools-password-1234" \
      "" \
      "SQL Database" \
      "Integrated Tool" \
      "Integrated Tools Datasource" \
      1 \
      "#9E9E9E"

    # Register Integrated Tools PostgreSQL
    register_tool \
      "integrated-tools-postgresql" \
      "POSTGRESQL" \
      "Integrated Tools PostgreSQL" \
      "PostgreSQL Database for Integrated Tools" \
      '[{"url": "postgresql://openframe-integrated-tools-postgresql", "port": "5432", "type": "DATABASE"}]' \
      "integrated-tools-user" \
      "integrated-tools-password-1234" \
      "" \
      "SQL Database" \
      "Integrated Tool" \
      "Integrated Tools Datasource" \
      2 \
      "#9E9E9E"

    # Register Integrated Tools Redis
    register_tool \
      "integrated-tools-redis" \
      "REDIS" \
      "Integrated Tools Redis" \
      "Redis Cache for Integrated Tools" \
      '[{"url": "redis://openframe-integrated-tools-redis", "port": "6379", "type": "DATABASE"}]' \
      "" \
      "" \
      "" \
      "In-Memory Database" \
      "Integrated Tool" \
      "Integrated Tools Datasource" \
      3 \
      "#9E9E9E"

    # Register Fleet
    register_tool \
      "fleet" \
      "FLEET" \
      "Fleet MDM" \
      "Fleet Device Management Platform" \
      '[{"url": "http://openframe-fleet.fleet.svc", "port": "8070", "type": "API"}, {"url": "http://openframe-fleet.fleet.svc", "port": "8070", "type": "DASHBOARD"}]' \
      "admin@openframe.local" \
      "openframe123!" \
      "$FLEET_TOKEN" \
      "Device Management" \
      "Integrated Tool" \
      "Integrated Tools" \
      1 \
      "#455A64" \
      "BEARER_TOKEN"

    # Register MeshCentral
    register_tool \
      "meshcentral" \
      "MESHCENTRAL" \
      "MeshCentral" \
      "MeshCentral Remote Management Platform" \
      '[{"url": "https://openframe-meshcentral-nginx.meshcentral.svc", "port": "8383", "type": "DASHBOARD"}, {"url": "https://openframe-meshcentral.meshcentral.svc", "port": "8383", "type": "API"}]' \
      "mesh@openframe.io" \
      "meshpass@1234" \
      "$MESHCENTRAL_API_KEY" \
      "Device Management" \
      "Integrated Tool" \
      "Integrated Tools" \
      2 \
      "#455A64" \
      "BEARER_TOKEN"

    # Register Authentik
    register_tool \
      "authentik" \
      "AUTHENTIK" \
      "Authentik SSO" \
      "Authentik Identity Provider" \
      '[{"url": "http://openframe-authentik-server.authentik.svc", "port": "5001", "type": "API"}, {"url": "http://openframe-authentik-server.authentik.svc", "port": "5001", "type": "DASHBOARD"}]' \
      "akadmin@openframe.local" \
      "openframe123!" \
      "openframe-api-token-123456789" \
      "Identity Provider" \
      "Integrated Tool" \
      "Integrated Tools" \
      4 \
      "#455A64" \
      "BEARER_TOKEN"

    # Register Tactical RMM
    register_tool \
      "tactical-rmm" \
      "TACTICAL_RMM" \
      "Tactical RMM" \
      "Remote Monitoring and Management Platform" \
      '[{"url": "http://openframe-tactical-backend.tactical.svc", "port": "8000", "type": "API"}, {"url": "http://openframe-tactical-frontend.tactical.svc", "port": "8080", "type": "DASHBOARD"}]' \
      "tactical" \
      "tactical" \
      "$TACTICAL_API_KEY" \
      "Device Management" \
      "Integrated Tool" \
      "Integrated Tools" \
      3 \
      "#455A64" \
      "HEADER" \
      "X-API-KEY"
---
apiVersion: batch/v1
kind: Job
metadata:
  name: register-tools
spec:
  template:
    spec:
      containers:
      - name: register-tools
        image: curlimages/curl:latest
        command: ["/bin/sh", "/scripts/register-tools.sh"]
        env:
        - name: FLEET_TOKEN
          valueFrom:
            secretKeyRef:
              name: fleet-secrets
              key: api-token
        - name: MESHCENTRAL_API_KEY
          valueFrom:
            secretKeyRef:
              name: meshcentral-secrets
              key: api-token
        - name: TACTICAL_API_KEY
          valueFrom:
            secretKeyRef:
              name: tactical-rmm-secrets
              key: api-token
        volumeMounts:
        - name: scripts
          mountPath: /scripts
        lifecycle:
          postStart:
            exec:
              command: ["/bin/sh", "-c", "check_job_status register-tools"]
      volumes:
      - name: scripts
        configMap:
          name: tool-registrations
      restartPolicy: Never
