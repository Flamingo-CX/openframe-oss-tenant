apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-postgres
  template:
    metadata:
      labels:
        app: tactical-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgrespass"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: tactical-postgres-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-redis
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-redis
  template:
    metadata:
      labels:
        app: tactical-redis
    spec:
      containers:
      - name: redis
        image: redis:6.0-alpine
        command: ["redis-server", "--save", "3600", "1", "300", "100", "60", "10000"]
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-data
          mountPath: /data
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: tactical-redis-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-nginx
  template:
    metadata:
      labels:
        app: tactical-nginx
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      containers:
      - name: nginx
        image: ghcr.io/flamingo-cx/openframe-tactical-nginx:latest
        ports:
        - containerPort: 8080
        - containerPort: 8000
        env:
        - name: NGINX_HOST_IP
          value: "tactical-nginx.tactical-rmm.svc.cluster.local"
        - name: NGINX_HOST_PORT
          value: "8080"
        - name: API_HOST
          value: "tactical-backend.tactical-rmm.svc.cluster.local:8000"
        - name: APP_HOST
          value: "tactical-frontend.tactical-rmm.svc.cluster.local:8080"
        - name: NATS_STD_BIND_HOST
          value: tactical-nats.tactical-rmm.svc.cluster.local
        - name: NATS_STANDARD_PORT
          value: "9235"
        - name: NATS_WEBSOCKET_HOST
          value: tactical-websockets.tactical-rmm.svc.cluster.local
        - name: NATS_WEBSOCKET_PORT
          value: "4222"
        - name: WEBSOCKET_PORT
          value: "8383"
        - name: WEBSOCKETS_BIND_HOST
          value: "tactical-websockets"
        - name: TACTICAL_DIR
          value: "/opt/tactical"
        - name: TACTICAL_TMP_DIR
          value: "/tmp/tactical"
        - name: RESOLVER
          value: "kube-dns.kube-system.svc.cluster.local"
        volumeMounts:
        - name: nginx-data
          mountPath: /opt/tactical
        startupProbe:
          httpGet:
            path: /nginx_status
            port: 8081
          failureThreshold: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /nginx_status
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: nginx-data
        persistentVolumeClaim:
          claimName: tactical-nginx-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-frontend
  template:
    metadata:
      labels:
        app: tactical-frontend
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      containers:
      - name: frontend
        image: ghcr.io/flamingo-cx/openframe-tactical-frontend:latest
        ports:
        - containerPort: 8080
        env:
        - name: NODE_ENV
          value: "development"
        - name: API_HOST
          value: "tactical-backend:8000"
          # value: "tactical-rmm-backend.192.168.100.100.nip.io"
        - name: API_LOCALHOST_HOST
          value: "tactical-rmm-backend.192.168.100.100.nip.io"
        - name: APP_HOST
          value: "tactical-frontend:8080"
        - name: APP_LOCALHOST_HOST
          value: "localhost:8080"
        - name: PUBLIC_DIR
          value: "/usr/share/nginx/html"
        - name: TACTICAL_DIR
          value: "/opt/tactical"
        - name: TACTICAL_TMP_DIR
          value: "/tmp/tactical"
        - name: TRMM_PROTO
          value: "http"
        - name: WS_PROTO
          value: "ws"
        volumeMounts:
        - name: frontend-data
          mountPath: /opt/tactical
      volumes:
      - name: frontend-data
        persistentVolumeClaim:
          claimName: tactical-frontend-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-backend
  template:
    metadata:
      labels:
        app: tactical-backend
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: setup-fontconfig
        image: busybox:1.28
        command: ['sh', '-c', '
          mkdir -p /opt/tactical/.cache/fontconfig &&
          mkdir -p /opt/tactical/.local/share/fontconfig &&
          chown -R 1000:1000 /opt/tactical/.cache &&
          chown -R 1000:1000 /opt/tactical/.local
        ']
        volumeMounts:
        - name: backend-data
          mountPath: /opt/tactical
      - name: wait-for-dependencies
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for PostgreSQL..." &&
          until nc -z tactical-postgres 5432; do sleep 2; done &&
          echo "PostgreSQL is ready!" &&
          echo "Waiting for Redis..." &&
          until nc -z tactical-redis 6379; do sleep 2; done &&
          echo "Redis is ready!" &&
          echo "Waiting for Nginx..." &&
          until nc -z tactical-nginx 8080; do sleep 2; done &&
          echo "Nginx is ready!"
          ']
      containers:
      - name: backend
        image: ghcr.io/flamingo-cx/openframe-tactical-backend:latest
        args: ["tactical-backend"]
        ports:
        - containerPort: 8000
        # resources:
        #   requests:
        #     memory: "512Mi"
        #     cpu: "250m"
        #   limits:
        #     memory: "1Gi"
        #     cpu: "500m"
        env:
        # - name: DJANGO_SETTINGS_MODULE
        #   value: "tacticalrmm.settings"
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgrespass"
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: SMTP_HOST
          value: "smtp.example.com"
        - name: SMTP_PORT
          value: "587"
        - name: SMTP_FROM
          value: "mesh@example.com"
        - name: SMTP_USER
          value: "mesh@example.com"
        - name: SMTP_PASS
          value: "mesh-smtp-pass"
        - name: SMTP_TLS
          value: "False"
        - name: TRMM_USER
          value: "tactical"
        - name: TRMM_PASS
          value: "tactical"
        - name: TACTICAL_BACKEND_PORT
          value: "8000"
        - name: TRMM_PROTO
          value: "http"
        - name: TRMM_DISABLE_WEB_TERMINAL
          value: "False"
        - name: TRMM_DISABLE_SERVER_SCRIPTS
          value: "False"
        - name: TRMM_DISABLE_SSO
          value: "False"
        - name: TRMM_DISABLE_2FA
          value: "True"
        - name: NODE_ENV
          value: "development"
        - name: WS_PROTO
          value: "ws"
        - name: WS_MASK_OVERRIDE
          value: "1"
        - name: TACTICAL_DIR
          value: "/opt/tactical"
        - name: TACTICAL_TMP_DIR
          value: "/tmp/tactical"
        - name: API_HOST
          value: "tactical-backend:8000"
        - name: APP_HOST
          value: "tactical-frontend:8080"
        - name: NATS_CONFIG
          value: "/opt/tactical/nats-rmm.conf"
        - name: NATS_API_CONFIG
          value: "/opt/tactical/nats-api.conf"
        - name: NATS_CONFIG_CHECK_INTERVAL
          value: "5"
        - name: NATS_STD_BIND_HOST
          value: "tactical-nats"
        - name: NATS_WS_BIND_HOST
          value: "tactical-nats"
        - name: NATS_CONNECT_HOST
          value: "tactical-nats"
        - name: NATS_STANDARD_PORT
          value: "9235"
        - name: NATS_WEBSOCKET_HOST
          value: "tactical-websockets"
        - name: NATS_WEBSOCKET_PORT
          value: "4222"
        - name: WEBSOCKET_PORT
          value: "8383"
        - name: WEBSOCKETS_BIND_HOST
          value: "tactical-websockets"
        # - name: UWSGI_UID
        #   value: "1000"
        # - name: UWSGI_GID
        #   value: "1000"
        # - name: UWSGI_CHEAP
        #   value: "true"
        # - name: UWSGI_PROCESSES
        #   value: "2"
        # - name: UWSGI_THREADS
        #   value: "4"
        # - name: UWSGI_HARAKIRI
        #   value: "120"
        # - name: UWSGI_MAX_REQUESTS
        #   value: "1000"
        # - name: UWSGI_BUFFER_SIZE
        #   value: "32768"
        - name: UWSGI_POST_BUFFERING
          value: "4096"
        - name: UWSGI_TIMEOUT
          value: "60"
        - name: UWSGI_SOCKET_TIMEOUT
          value: "60"
        - name: UWSGI_KEEPALIVE
          value: "5"
        - name: UWSGI_GRACEFUL_TIMEOUT
          value: "30"
        - name: XDG_CACHE_HOME
          value: "/opt/tactical/.cache"
        - name: XDG_DATA_HOME
          value: "/opt/tactical/.local"
        - name: HOME
          value: "/opt/tactical"
        volumeMounts:
        - name: backend-data
          mountPath: /opt/tactical
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: backend-data
        persistentVolumeClaim:
          claimName: tactical-backend-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-nats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-nats
  template:
    metadata:
      labels:
        app: tactical-nats
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: wait-for-backend
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for Backend..." &&
          until nc -z tactical-backend 8000; do sleep 2; done &&
          echo "Backend is ready!"
          ']
      containers:
      - name: nats
        image: ghcr.io/flamingo-cx/openframe-tactical-nats:latest
        args: ["tactical-nats"]
        ports:
        - containerPort: 9235
        - containerPort: 4222
        env:
        - name: TACTICAL_DIR
          value: "/opt/tactical"
        - name: TACTICAL_TMP_DIR
          value: "/tmp/tactical"
        - name: NATS_CONFIG
          value: "/opt/tactical/nats-rmm.conf"
        - name: NATS_API_CONFIG
          value: "/opt/tactical/nats-api.conf"
        - name: NATS_CONFIG_CHECK_INTERVAL
          value: "5"
        - name: NATS_STD_BIND_HOST
          value: "tactical-nats"
        - name: NATS_WS_BIND_HOST
          value: "tactical-nats"
        - name: NATS_CONNECT_HOST
          value: "tactical-nats"
        - name: NATS_STANDARD_PORT
          value: "9235"
        - name: NATS_WEBSOCKET_HOST
          value: "tactical-websockets"
        - name: NATS_WEBSOCKET_PORT
          value: "4222"
        - name: WEBSOCKET_PORT
          value: "8383"
        - name: WEBSOCKETS_BIND_HOST
          value: "tactical-websockets"
        volumeMounts:
        - name: nats-data
          mountPath: /opt/tactical
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 15
      volumes:
      - name: nats-data
        persistentVolumeClaim:
          claimName: tactical-nats-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-websockets
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-websockets
  template:
    metadata:
      labels:
        app: tactical-websockets
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for PostgreSQL..." &&
          until nc -z tactical-postgres 5432; do sleep 2; done &&
          echo "PostgreSQL is ready!" &&
          echo "Waiting for Redis..." &&
          until nc -z tactical-redis 6379; do sleep 2; done &&
          echo "Redis is ready!" &&
          echo "Waiting for Backend..." &&
          until nc -z tactical-backend 8000; do sleep 2; done &&
          echo "Backend is ready!"
          ']
      containers:
      - name: websockets
        image: ghcr.io/flamingo-cx/openframe-tactical-websockets:latest
        args: ["tactical-websockets"]
        ports:
        - containerPort: 8000
        env:
        - name: TRMM_DISABLE_WEB_TERMINAL
          value: "False"
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgrespass"
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: TACTICAL_DIR
          value: "/opt/tactical"
        - name: TACTICAL_TMP_DIR
          value: "/tmp/tactical"
        - name: API_HOST
          value: "tactical-backend:8000"
        - name: APP_HOST
          value: "tactical-frontend:8080"
        - name: WS_PROTO
          value: "ws"
        - name: WS_MASK_OVERRIDE
          value: "1"
        volumeMounts:
        - name: websockets-data
          mountPath: /opt/tactical
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: websockets-data
        persistentVolumeClaim:
          claimName: tactical-websockets-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-celery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-celery
  template:
    metadata:
      labels:
        app: tactical-celery
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for PostgreSQL..." &&
          until nc -z tactical-postgres 5432; do sleep 2; done &&
          echo "PostgreSQL is ready!" &&
          echo "Waiting for Redis..." &&
          until nc -z tactical-redis 6379; do sleep 2; done &&
          echo "Redis is ready!" &&
          echo "Waiting for Backend..." &&
          until nc -z tactical-backend 8000; do sleep 2; done &&
          echo "Backend is ready!"
          ']
      containers:
      - name: celery
        image: ghcr.io/flamingo-cx/openframe-tactical-celery:latest
        args: ["tactical-celery"]
        env:
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgrespass"
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: SMTP_HOST
          value: "smtp.example.com"
        - name: SMTP_PORT
          value: "587"
        - name: SMTP_FROM
          value: "mesh@example.com"
        - name: SMTP_USER
          value: "mesh@example.com"
        - name: SMTP_PASS
          value: "mesh-smtp-pass"
        - name: SMTP_TLS
          value: "False"
        - name: TRMM_USER
          value: "tactical"
        - name: TRMM_PASS
          value: "tactical"
        - name: TACTICAL_BACKEND_PORT
          value: "8000"
        - name: TRMM_PROTO
          value: "http"
        - name: TRMM_DISABLE_WEB_TERMINAL
          value: "False"
        - name: TRMM_DISABLE_SERVER_SCRIPTS
          value: "False"
        - name: TRMM_DISABLE_SSO
          value: "False"
        - name: TRMM_DISABLE_2FA
          value: "True"
        - name: NODE_ENV
          value: "development"
        - name: WS_PROTO
          value: "ws"
        - name: WS_MASK_OVERRIDE
          value: "1"
        - name: TACTICAL_DIR
          value: "/opt/tactical"
        - name: TACTICAL_TMP_DIR
          value: "/tmp/tactical"
        - name: API_HOST
          value: "tactical-backend:8000"
        - name: API_LOCALHOST_HOST
          value: tactical-rmm-backend.192.168.100.100.nip.io
        - name: APP_HOST
          value: "tactical-frontend:8080"
        - name: APP_LOCALHOST_HOST
          # value: "localhost:8080"
          value: "tactical-rmm.192.168.100.100.nip.io"
        - name: NATS_CONFIG
          value: "/opt/tactical/nats-rmm.conf"
        - name: NATS_API_CONFIG
          value: "/opt/tactical/nats-api.conf"
        - name: NATS_CONFIG_CHECK_INTERVAL
          value: "5"
        - name: NATS_STD_BIND_HOST
          value: "tactical-nats"
        - name: NATS_WS_BIND_HOST
          value: "tactical-nats"
        - name: NATS_CONNECT_HOST
          value: "tactical-nats"
        - name: NATS_STANDARD_PORT
          value: "9235"
        - name: NATS_WEBSOCKET_HOST
          value: "tactical-websockets"
        - name: NATS_WEBSOCKET_PORT
          value: "4222"
        - name: WEBSOCKET_PORT
          value: "8383"
        - name: WEBSOCKETS_BIND_HOST
          value: "tactical-websockets"
        volumeMounts:
        - name: celery-data
          mountPath: /opt/tactical
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: celery-data
        persistentVolumeClaim:
          claimName: tactical-celery-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-celerybeat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-celerybeat
  template:
    metadata:
      labels:
        app: tactical-celerybeat
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for PostgreSQL..." &&
          until nc -z tactical-postgres 5432; do sleep 2; done &&
          echo "PostgreSQL is ready!" &&
          echo "Waiting for Redis..." &&
          until nc -z tactical-redis 6379; do sleep 2; done &&
          echo "Redis is ready!" &&
          echo "Waiting for Backend..." &&
          until nc -z tactical-backend 8000; do sleep 2; done &&
          echo "Backend is ready!"
          ']
      containers:
      - name: celerybeat
        image: ghcr.io/flamingo-cx/openframe-tactical-celerybeat:latest
        args: ["tactical-celerybeat"]
        env:
        - name: POSTGRES_DB
          value: "tacticalrmm"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "postgrespass"
        - name: POSTGRES_HOST
          value: "tactical-postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: REDIS_HOST
          value: "tactical-redis"
        - name: TACTICAL_DIR
          value: "/opt/tactical"
        - name: TACTICAL_TMP_DIR
          value: "/tmp/tactical"
        - name: API_HOST
          value: "tactical-backend:8000"
        - name: APP_HOST
          value: "tactical-frontend:8080"
        - name: NATS_WEBSOCKET_HOST
          value: "tactical-websockets"
        - name: NATS_WEBSOCKET_PORT
          value: "4222"
        - name: WEBSOCKET_PORT
          value: "8383"
        - name: WEBSOCKETS_BIND_HOST
          value: "tactical-websockets"
        volumeMounts:
        - name: celerybeat-data
          mountPath: /opt/tactical
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: celerybeat-data
        persistentVolumeClaim:
          claimName: tactical-celerybeat-data