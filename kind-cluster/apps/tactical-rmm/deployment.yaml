apiVersion: v1
kind: ConfigMap
metadata:
  name: tactical-common-config
data:
  POSTGRES_DB: "tacticalrmm"
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "postgrespass"
  POSTGRES_HOST: "tactical-postgres"
  POSTGRES_PORT: "5432"
  REDIS_HOST: "tactical-redis"
  SMTP_HOST: "smtp.example.com"
  SMTP_PORT: "587"
  SMTP_FROM: "mesh@example.com"
  SMTP_USER: "mesh@example.com"
  SMTP_PASS: "mesh-smtp-pass"
  SMTP_TLS: "False"
  TRMM_USER: "tactical"
  TRMM_PASS: "tactical"
  TACTICAL_BACKEND_PORT: "8000"
  TRMM_PROTO: "http"
  TRMM_DISABLE_WEB_TERMINAL: "False"
  TRMM_DISABLE_SERVER_SCRIPTS: "False"
  TRMM_DISABLE_SSO: "False"
  TRMM_DISABLE_2FA: "True"
  NODE_ENV: "development"
  WS_PROTO: "ws"
  WS_MASK_OVERRIDE: "1"
  TACTICAL_DIR: "/opt/tactical"
  TACTICAL_TMP_DIR: "/tmp/tactical"
  API_HOST: "tactical-backend.tactical-rmm.svc.cluster.local:8000"
  # below  is shown on browser that backend is not reachable
  # API_LOCALHOST_HOST: tactical-nginx.tactical-rmm.svc.cluster.local:8000 # "localhost:8000"
  # API_LOCALHOST_HOST: tactical-ui.192.168.100.100.nip.io
  API_LOCALHOST_HOST: tactical-api.192.168.100.100.nip.io
  # API_LOCALHOST_HOST: tactical-ui.192.168.100.100.nip.io
  # API_LOCALHOST_HOST: tactical-backend.tactical-rmm.svc.cluster.local:8000 # "localhost:8000"
  APP_HOST: "tactical-frontend.tactical-rmm.svc.cluster.local:8080"
  APP_LOCALHOST_HOST: tactical-nginx.tactical-rmm.svc.cluster.local:8080
  # https://github.com/Flamingo-CX/tacticalrmm/blob/develop/api/tacticalrmm/tacticalrmm/utils.py#L254-L265
  NATS_CONFIG: "/opt/tactical/nats-rmm.conf"
  NATS_API_CONFIG: "/opt/tactical/nats-api.conf"
  NATS_CONFIG_CHECK_INTERVAL: "5"
  # NATS_STD_BIND_HOST: "tactical-nats.tactical-rmm.svc.cluster.local"
  NATS_STD_BIND_HOST: "0.0.0.0"  # Important for NATS_CONFIG to ba able to bind port 4222
  NATS_WEBSOCKET_PORT: "4222"  # this is wrong, it is std bind port
  # NATS_WS_BIND_HOST: "tactical-nats.tactical-rmm.svc.cluster.local"
  NATS_WS_BIND_HOST: "0.0.0.0"  # Important for NATS_CONFIG to ba able to bind port 9235
  NATS_STANDARD_PORT: "9235"  # this is wrong, it is websocket port
  NATS_CONNECT_HOST: "tactical-nats.tactical-rmm.svc.cluster.local"
  # NATS_CONNECT_HOST: "0.0.0.0"
  NATS_WEBSOCKET_HOST: "tactical-websockets.tactical-rmm.svc.cluster.local"  # this is not used anywhere
  WEBSOCKETS_BIND_HOST: "tactical-websockets"
  WEBSOCKET_PORT: "8383"
  PUBLIC_DIR: "/usr/share/nginx/html"
  TACTICAL_READY_FILE: "/opt/tactical/tmp/tactical/ready"
  NGINX_HOST_IP: "tactical-nginx.tactical-rmm.svc.cluster.local"
  NGINX_HOST_PORT: "8080"
---
# Find variabel per app and remove unused
apiVersion: v1
kind: ConfigMap
metadata:
  name: tactical-nginx-config
data:
  RESOLVER: "kube-dns.kube-system.svc.cluster.local"
  # APP_HOST: "tactical-ui.192.168.100.100.nip.io"
  APP_HOST: "tactical-frontend.tactical-rmm.svc.cluster.local:8080"
  # API_HOST: "tactical-api.192.168.100.100.nip.io"
  API_HOST: "tactical-backend.tactical-rmm.svc.cluster.local:8000"
  # WEBSOCKETS_BIND_HOST: tactical-api.192.168.100.100.nip.io
  # WEBSOCKET_PORT: "80"
  WEBSOCKETS_BIND_HOST: tactical-websockets.tactical-rmm.svc.cluster.local
  WEBSOCKET_PORT: "8383"
  NATS_STD_BIND_HOST: "tactical-nats.tactical-rmm.svc.cluster.local"
  NATS_STANDARD_PORT: "9235"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-nginx
  template:
    metadata:
      labels:
        app: tactical-nginx
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      containers:
      - name: nginx
        image: ghcr.io/flamingo-cx/openframe-tactical-nginx:latest
        ports:
        - containerPort: 8080
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: tactical-nginx-config
        volumeMounts:
        - name: nginx-data
          mountPath: /opt/tactical
        startupProbe:
          httpGet:
            path: /nginx_status
            port: 8081
          failureThreshold: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /nginx_status
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: nginx-data
        persistentVolumeClaim:
          claimName: tactical-nginx-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-frontend
  template:
    metadata:
      labels:
        app: tactical-frontend
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      containers:
      - name: frontend
        image: ghcr.io/flamingo-cx/openframe-tactical-frontend:latest
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: tactical-common-config
        volumeMounts:
        - name: frontend-data
          mountPath: /opt/tactical
      volumes:
      - name: frontend-data
        persistentVolumeClaim:
          claimName: tactical-frontend-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-backend
  template:
    metadata:
      labels:
        app: tactical-backend
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: setup-fontconfig
        image: busybox:1.28
        command: ['sh', '-c', '
          mkdir -p /opt/tactical/.cache/fontconfig &&
          mkdir -p /opt/tactical/.local/share/fontconfig &&
          chown -R 1000:1000 /opt/tactical/.cache &&
          chown -R 1000:1000 /opt/tactical/.local
        ']
        volumeMounts:
        - name: backend-data
          mountPath: /opt/tactical
      - name: wait-for-dependencies
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for PostgreSQL..." &&
          until nc -z tactical-postgres 5432; do sleep 2; done &&
          echo "PostgreSQL is ready!" &&
          echo "Waiting for Redis..." &&
          until nc -z tactical-redis 6379; do sleep 2; done &&
          echo "Redis is ready!" &&
          echo "Waiting for Nginx..." &&
          until nc -z tactical-nginx 8080; do sleep 2; done &&
          echo "Nginx is ready!"
          ']
      containers:
      - name: backend
        image: ghcr.io/flamingo-cx/openframe-tactical-backend:latest
        args: ["tactical-backend"]
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: tactical-common-config
        volumeMounts:
        - name: backend-data
          mountPath: /opt/tactical
        readinessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
      volumes:
      - name: backend-data
        persistentVolumeClaim:
          claimName: tactical-backend-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-nats
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-nats
  template:
    metadata:
      labels:
        app: tactical-nats
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: wait-for-backend
        image: redis:6.0-alpine
        command: ['sh', '-c', '
          echo "Waiting for Backend..." &&
          until nc -z tactical-backend 8000; do sleep 2; done &&
          echo "Backend is ready!" &&
          echo "Waiting for NATS files in Redis..." &&
          until redis-cli -h tactical-redis -p 6379 get "tactical_nats_rmm_conf" > /dev/null; do sleep 2; done &&
          until redis-cli -h tactical-redis -p 6379 get "tactical_nats_api_conf" > /dev/null; do sleep 2; done &&
          echo "NATS files are ready in Redis!"
          ']
        # volumeMounts:
        # - name: nats-data
        #   mountPath: /opt/tactical
      containers:
      - name: nats
        image: ghcr.io/flamingo-cx/openframe-tactical-nats:latest
        args: ["tactical-nats"]
        ports:
        - containerPort: 9235
        - containerPort: 4222
        envFrom:
        - configMapRef:
            name: tactical-common-config
        volumeMounts:
        - name: nats-data
          mountPath: /opt/tactical
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 15
      volumes:
      - name: nats-data
        persistentVolumeClaim:
          claimName: tactical-nats-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-websockets
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-websockets
  template:
    metadata:
      labels:
        app: tactical-websockets
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for PostgreSQL..." &&
          until nc -z tactical-postgres 5432; do sleep 2; done &&
          echo "PostgreSQL is ready!" &&
          echo "Waiting for Redis..." &&
          until nc -z tactical-redis 6379; do sleep 2; done &&
          echo "Redis is ready!" &&
          echo "Waiting for Backend..." &&
          until nc -z tactical-backend 8000; do sleep 2; done &&
          echo "Backend is ready!"
          ']
      containers:
      - name: websockets
        image: ghcr.io/flamingo-cx/openframe-tactical-websockets:latest
        args: ["tactical-websockets"]
        ports:
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: tactical-common-config
        volumeMounts:
        - name: websockets-data
          mountPath: /opt/tactical
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: websockets-data
        persistentVolumeClaim:
          claimName: tactical-websockets-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-celery
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-celery
  template:
    metadata:
      labels:
        app: tactical-celery
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for PostgreSQL..." &&
          until nc -z tactical-postgres 5432; do sleep 2; done &&
          echo "PostgreSQL is ready!" &&
          echo "Waiting for Redis..." &&
          until nc -z tactical-redis 6379; do sleep 2; done &&
          echo "Redis is ready!" &&
          echo "Waiting for Backend..." &&
          until nc -z tactical-backend 8000; do sleep 2; done &&
          echo "Backend is ready!"
          ']
      containers:
      - name: celery
        image: ghcr.io/flamingo-cx/openframe-tactical-celery:latest
        args: ["tactical-celery"]
        envFrom:
        - configMapRef:
            name: tactical-common-config
        volumeMounts:
        - name: celery-data
          mountPath: /opt/tactical
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: celery-data
        persistentVolumeClaim:
          claimName: tactical-celery-data
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-celerybeat
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-celerybeat
  template:
    metadata:
      labels:
        app: tactical-celerybeat
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      initContainers:
      - name: wait-for-dependencies
        image: busybox:1.28
        command: ['sh', '-c', '
          echo "Waiting for PostgreSQL..." &&
          until nc -z tactical-postgres 5432; do sleep 2; done &&
          echo "PostgreSQL is ready!" &&
          echo "Waiting for Redis..." &&
          until nc -z tactical-redis 6379; do sleep 2; done &&
          echo "Redis is ready!" &&
          echo "Waiting for Backend..." &&
          until nc -z tactical-backend 8000; do sleep 2; done &&
          echo "Backend is ready!"
          ']
      containers:
      - name: celerybeat
        image: ghcr.io/flamingo-cx/openframe-tactical-celerybeat:latest
        args: ["tactical-celerybeat"]
        envFrom:
        - configMapRef:
            name: tactical-common-config
        volumeMounts:
        - name: celerybeat-data
          mountPath: /opt/tactical
        livenessProbe:
          exec:
            command:
            - cat
            - /opt/tactical/tmp/tactical/ready
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: celerybeat-data
        persistentVolumeClaim:
          claimName: tactical-celerybeat-data
