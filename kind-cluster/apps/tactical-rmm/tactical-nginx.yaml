---
# Find variabel per app and remove unused
apiVersion: v1
kind: ConfigMap
metadata:
  name: tactical-nginx-config
data:
  RESOLVER: "kube-dns.kube-system.svc.cluster.local"
  # APP_HOST: "tactical-ui.192.168.100.100.nip.io"
  APP_HOST: "tactical-frontend.tactical-rmm.svc.cluster.local:8080"
  # API_HOST: "tactical-api.192.168.100.100.nip.io"
  API_HOST: "tactical-backend.tactical-rmm.svc.cluster.local:8000"
  # WEBSOCKETS_BIND_HOST: tactical-api.192.168.100.100.nip.io
  # WEBSOCKET_PORT: "80"
  WEBSOCKETS_BIND_HOST: tactical-websockets.tactical-rmm.svc.cluster.local
  WEBSOCKET_PORT: "8383"
  NATS_STD_BIND_HOST: "tactical-nats.tactical-rmm.svc.cluster.local"
  NATS_STANDARD_PORT: "9235"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: tactical-nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: tactical-nginx
  template:
    metadata:
      labels:
        app: tactical-nginx
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      containers:
      - name: nginx
        image: ghcr.io/flamingo-cx/openframe-tactical-nginx:latest
        ports:
        - containerPort: 8080
        - containerPort: 8000
        envFrom:
        - configMapRef:
            name: tactical-nginx-config
        volumeMounts:
        - name: nginx-data
          mountPath: /opt/tactical
        startupProbe:
          httpGet:
            path: /nginx_status
            port: 8081
          failureThreshold: 30
          periodSeconds: 10
        livenessProbe:
          httpGet:
            path: /nginx_status
            port: 8081
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: nginx-data
        persistentVolumeClaim:
          claimName: tactical-nginx-data
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: tactical-nginx-data
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: tactical-nginx
spec:
  selector:
    app: tactical-nginx
  ports:
  - name: http
    port: 8080
    targetPort: 8080
  - name: api
    port: 8000
    targetPort: 8000
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tactical-rmm
  annotations:
    nginx.ingress.kubernetes.io/proxy-http-version: "1.1"
    nginx.ingress.kubernetes.io/proxy-set-header-connection: "Upgrade"
    nginx.ingress.kubernetes.io/proxy-set-header-upgrade: "$http_upgrade"
    # nginx.ingress.kubernetes.io/proxy-set-header-host: "$host"
    # nginx.ingress.kubernetes.io/proxy-set-header-x-real-ip: "$remote_addr"
    # nginx.ingress.kubernetes.io/proxy-set-header-x-forwarded-for: "$proxy_add_x_forwarded_for"
    # nginx.ingress.kubernetes.io/proxy-set-header-x-forwarded-proto: "$scheme"
    # nginx.ingress.kubernetes.io/proxy-set-header-x-forwarded-host: "$host"
    # nginx.ingress.kubernetes.io/proxy-set-header-x-forwarded-port: "$server_port"
    # nginx.ingress.kubernetes.io/proxy-set-header-origin: "$http_origin"
    # nginx.ingress.kubernetes.io/proxy-redirect: "off"
    # nginx.ingress.kubernetes.io/proxy-cache-bypass: "$http_upgrade"
    # nginx.ingress.kubernetes.io/ssl-redirect: "false"
    # nginx.ingress.kubernetes.io/force-ssl-redirect: "false"
    # nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    # nginx.ingress.kubernetes.io/websocket-services: "tactical-nginx"
    # nginx.ingress.kubernetes.io/use-regex: "true"
spec:
  rules:
    - host: tactical-ui.192.168.100.100.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: tactical-nginx
                port:
                  number: 8080
    - host: tactical-api.192.168.100.100.nip.io  # agent register url
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: tactical-nginx
                port:
                  number: 8000
