apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-nifi-content
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-nifi-database
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-nifi-flowfile
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-nifi-provenance
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-nifi-state
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: openframe-nifi-logs
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: openframe-nifi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: openframe-nifi
  template:
    metadata:
      labels:
        app: openframe-nifi
    spec:
      imagePullSecrets:
        - name: github-pat-secret
      # initContainers:
      # - name: init-jmx
      #   image: busybox
      #   command:
      #     - "sh"
      #     - "-c"
      #     - "wget -O /opt/nifi/jmx_exporter/jmx_prometheus_javaagent.jar https://repo1.maven.org/maven2/io/prometheus/jmx/jmx_prometheus_javaagent/1.0.1/jmx_prometheus_javaagent-1.0.1.jar"
      #   volumeMounts:
      #   - name: jmx-exporter
      #     mountPath: /opt/nifi/jmx_exporter
      containers:
        - name: openframe-nifi
          image: ghcr.io/flamingo-cx/openframe-nifi:latest
          # image: apache/nifi:latest
          # command:
          #   - "sh"
          #   - "-c"
          #   - |
          #     echo "java.arg.100=-javaagent:/opt/nifi/jmx_exporter/jmx_prometheus_javaagent.jar=9096:/opt/nifi/jmx_exporter/config.yml" >> /opt/nifi/nifi-current/conf/bootstrap.conf;
          #     exec ../scripts/start.sh
          ports:
            - containerPort: 8443
              name: https
            - containerPort: 8080
              name: http
            - containerPort: 9096
              name: metrics
          env:
            - name: NIFI_WEB_HTTPS_PORT
              value: "8443"
            - name: NIFI_WEB_HTTP_PORT
              value: "8080"
            - name: NIFI_WEB_HTTP_HOST
              value: "0.0.0.0"
            - name: NIFI_WEB_HTTPS_HOST
              value: "0.0.0.0"
            - name: SINGLE_USER_CREDENTIALS_USERNAME
              value: "openframe"
            - name: SINGLE_USER_CREDENTIALS_PASSWORD
              value: "password123456789"
            - name: NIFI_WEB_PROXY_HOST
              value: "openframe-nifi.192.168.100.100.nip.io"
            - name: NIFI_WEB_PROXY_PORT
              value: "8443"
            # - name: JAVA_OPTS
            #   value: "java.arg.100=-javaagent:/opt/nifi/jmx_exporter/jmx_prometheus_javaagent.jar=9096:/opt/jmx_exporter/config.yml"
          volumeMounts:
            # - name: jmx-exporter
            #   mountPath: /opt/nifi/jmx_exporter
            # - name: jmx-config
            #   mountPath: /opt/nifi/jmx_exporter/config.yml
            #   subPath: config.yml
            - name: openframe-nifi-content
              mountPath: /opt/nifi/nifi-current/content_repository
            - name: openframe-nifi-database
              mountPath: /opt/nifi/nifi-current/database_repository
            - name: openframe-nifi-flowfile
              mountPath: /opt/nifi/nifi-current/flowfile_repository
            - name: openframe-nifi-provenance
              mountPath: /opt/nifi/nifi-current/provenance_repository
            - name: openframe-nifi-state
              mountPath: /opt/nifi/nifi-current/state
            - name: openframe-nifi-logs
              mountPath: /opt/nifi/nifi-current/logs
          livenessProbe:
            exec:
              command:
                - pgrep
                - java
            initialDelaySeconds: 180
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 10
          readinessProbe:
            tcpSocket:
              port: https
            initialDelaySeconds: 180
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 10
          resources:
            requests:
              memory: "2Gi"
              cpu: "1"
            limits:
              memory: "4Gi"
              cpu: "2"
      volumes:
        # - name: jmx-exporter
        #   emptyDir: {}
        # - name: jmx-config
        #   configMap:
        #     name: openframe-nifi-jmx-config
        - name: openframe-nifi-content
          persistentVolumeClaim:
            claimName: openframe-nifi-content
        - name: openframe-nifi-database
          persistentVolumeClaim:
            claimName: openframe-nifi-database
        - name: openframe-nifi-flowfile
          persistentVolumeClaim:
            claimName: openframe-nifi-flowfile
        - name: openframe-nifi-provenance
          persistentVolumeClaim:
            claimName: openframe-nifi-provenance
        - name: openframe-nifi-state
          persistentVolumeClaim:
            claimName: openframe-nifi-state
        - name: openframe-nifi-logs
          persistentVolumeClaim:
            claimName: openframe-nifi-logs
---
apiVersion: v1
kind: Service
metadata:
  name: openframe-nifi
  labels:
    app: openframe-nifi
spec:
  selector:
    app: openframe-nifi
  ports:
    - port: 8443
      targetPort: 8443
      name: https
    - port: 8080
      targetPort: 8080
      name: http
    - port: 9096
      targetPort: 9096
      name: metrics
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: openframe-nifi
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/ssl-passthrough: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    # nginx.ingress.kubernetes.io/upstream-vhost: "openframe-nifi.192.168.100.100.nip.io"
    # nginx.ingress.kubernetes.io/proxy-redirect-from: "https://openframe-nifi:8443"
    # nginx.ingress.kubernetes.io/proxy-redirect-to: "https://openframe-nifi.192.168.100.100.nip.io"
spec:
  ingressClassName: nginx
  rules:
    - host: openframe-nifi.192.168.100.100.nip.io
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: openframe-nifi
                port:
                  name: https
