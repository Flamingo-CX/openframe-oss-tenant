#!/bin/bash
# Improved postinstall script for OpenFrame with better debugging
set -e  # Exit immediately if any command fails

echo "OpenFrame: Starting postinstall script..."

# Create required directories and set permissions
echo "Creating required log directories..."
mkdir -p "/Library/Logs/OpenFrame"
mkdir -p "/Library/Application Support/OpenFrame"

# Clean up any existing compressed log files
echo "Cleaning up any existing compressed log files..."
rm -f "/Library/Logs/OpenFrame/daemon_error.log.gz" "/Library/Logs/OpenFrame/daemon_output.log.gz"

# Remove old run directory if it exists (no longer needed with LaunchDaemon)
if [ -d "/Library/Application Support/OpenFrame/run" ]; then
    echo "Removing deprecated run directory..."
    rm -rf "/Library/Application Support/OpenFrame/run"
fi

# Check for app bundle before setting permissions
if [ -d "/Applications/OpenFrame.app" ]; then
    # Set proper permissions for app bundle
    echo "Setting proper permissions for app bundle..."
    chmod -R 755 "/Applications/OpenFrame.app"
    chmod 755 "/Applications/OpenFrame.app/Contents/MacOS/openframe"
    # Set ownership to root
    chown -R root:wheel "/Applications/OpenFrame.app"
else
    echo "ERROR: OpenFrame.app not found in /Applications! Installation may be incomplete."
    ls -la "/Applications" || true
fi

# Set proper permissions for support directories with detailed output
echo "Setting permissions on log directory..."
chmod -R 755 "/Library/Logs/OpenFrame"
ls -la "/Library/Logs/OpenFrame"

echo "Setting permissions on application support directory..."
chmod -R 755 "/Library/Application Support/OpenFrame"
ls -la "/Library/Application Support/OpenFrame"

# Create and initialize the main log file with proper permissions
echo "Creating and initializing main log file..."
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Log file created by postinstall script\",\"source\":\"postinstall\"}" > "/Library/Logs/OpenFrame/openframe.log"
chmod 644 "/Library/Logs/OpenFrame/openframe.log"
chown root:wheel "/Library/Logs/OpenFrame/openframe.log"
ls -la "/Library/Logs/OpenFrame/openframe.log"

# Create and initialize the daemon log files with proper permissions
echo "Creating daemon log files..."
# Create log files with substantial initial content to prevent immediate compression
echo "# OpenFrame daemon stdout log file - Created $(date)" > "/Library/Logs/OpenFrame/daemon_output.log"
echo "# This file contains stdout from the OpenFrame daemon process" >> "/Library/Logs/OpenFrame/daemon_output.log"
echo "# Log entries will appear below this line" >> "/Library/Logs/OpenFrame/daemon_output.log"
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Daemon output log file created\",\"source\":\"postinstall\"}" >> "/Library/Logs/OpenFrame/daemon_output.log"

echo "# OpenFrame daemon stderr log file - Created $(date)" > "/Library/Logs/OpenFrame/daemon_error.log"
echo "# This file contains stderr from the OpenFrame daemon process" >> "/Library/Logs/OpenFrame/daemon_error.log"
echo "# Error messages will appear below this line" >> "/Library/Logs/OpenFrame/daemon_error.log"
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Daemon error log file created\",\"source\":\"postinstall\"}" >> "/Library/Logs/OpenFrame/daemon_error.log"

chmod 644 "/Library/Logs/OpenFrame/daemon_error.log"
chmod 644 "/Library/Logs/OpenFrame/daemon_output.log"
chown root:wheel "/Library/Logs/OpenFrame/daemon_error.log"
chown root:wheel "/Library/Logs/OpenFrame/daemon_output.log"

echo "Verifying daemon log files..."
ls -la "/Library/Logs/OpenFrame/daemon_error.log"
ls -la "/Library/Logs/OpenFrame/daemon_output.log"

# Check for LaunchDaemon plist before setting permissions
if [ -f "/Library/LaunchDaemons/com.openframe.agent.plist" ]; then
    # Enhanced debugging - check permissions and validate plist
    echo "LaunchDaemon plist found. Checking permissions and validity..."
    ls -l "/Library/LaunchDaemons/com.openframe.agent.plist"
    
    # Validate plist format
    echo "Validating plist format..."
    plutil -lint "/Library/LaunchDaemons/com.openframe.agent.plist" || echo "WARNING: plist validation failed!"
    
    # Set proper permissions
    echo "Setting proper permissions on LaunchDaemon plist..."
    chmod 644 "/Library/LaunchDaemons/com.openframe.agent.plist"
    chown root:wheel "/Library/LaunchDaemons/com.openframe.agent.plist"
    
    # First, check if the LaunchDaemon is already loaded
    ALREADY_LOADED=0
    if launchctl list | grep -q "com.openframe.agent"; then
        echo "LaunchDaemon already loaded. Unloading for clean restart..."
        launchctl unload "/Library/LaunchDaemons/com.openframe.agent.plist" 2>/dev/null || true
        ALREADY_LOADED=1
    fi
    
    # Load the LaunchDaemon with better handling
    echo "Loading LaunchDaemon..."
    # Suppress stderr to avoid confusing error messages
    # Try the bootstrap command first (modern macOS)
    BOOTSTRAP_RESULT=1
    LOAD_RESULT=1
    
    # Attempt bootstrap but don't show errors to avoid confusion
    launchctl bootstrap system "/Library/LaunchDaemons/com.openframe.agent.plist" 2>/dev/null
    BOOTSTRAP_RESULT=$?
    
    if [ $BOOTSTRAP_RESULT -eq 0 ]; then
        echo "Successfully loaded LaunchDaemon with bootstrap command"
    else
        # If bootstrap fails, try the legacy load command
        launchctl load "/Library/LaunchDaemons/com.openframe.agent.plist" 2>/dev/null
        LOAD_RESULT=$?
        
        if [ $LOAD_RESULT -eq 0 ]; then
            echo "Successfully loaded LaunchDaemon with load command"
        else
            # If both methods fail, check if it's actually loaded despite errors
            if launchctl list | grep -q "com.openframe.agent"; then
                echo "LaunchDaemon is running despite load command errors"
            else
                echo "WARNING: Failed to load LaunchDaemon. Bootstrap exit code: $BOOTSTRAP_RESULT, Load exit code: $LOAD_RESULT"
                echo "This is not critical as the LaunchDaemon will be loaded on next reboot."
            fi
        fi
    fi
else
    echo "ERROR: LaunchDaemon plist not found! Installation may be incomplete."
fi

# Set ownership on log and support directories
echo "Setting ownership on log and support directories..."
chown -R root:wheel "/Library/Logs/OpenFrame"
chown -R root:wheel "/Library/Application Support/OpenFrame"

# Add log rotation configuration to prevent OS compression
echo "Setting up log rotation..."
cat > "/Library/Logs/OpenFrame/newsyslog.conf" << EOF
# OpenFrame log rotation configuration
/Library/Logs/OpenFrame/daemon_output.log 644 3 1000 * Z
/Library/Logs/OpenFrame/daemon_error.log 644 3 1000 * Z
EOF

chmod 644 "/Library/Logs/OpenFrame/newsyslog.conf"
chown root:wheel "/Library/Logs/OpenFrame/newsyslog.conf"

# Verify write access to log directory
echo "Testing write access to log directory..."
if touch "/Library/Logs/OpenFrame/write_test" && rm "/Library/Logs/OpenFrame/write_test"; then
    echo "Log directory is writable"
else
    echo "WARNING: Could not write to log directory!"
fi

echo "OpenFrame: Postinstall completed successfully"
exit 0