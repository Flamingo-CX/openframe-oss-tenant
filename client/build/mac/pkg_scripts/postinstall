#!/bin/bash
# Improved postinstall script for OpenFrame with better debugging
set -e  # Exit immediately if any command fails

# Add trap handlers to prevent termination
trap 'echo "Caught signal - continuing execution"; sleep 1' TERM INT QUIT

echo "OpenFrame: Starting postinstall script..."

# Create required directories and set permissions
echo "Creating required log directories..."
mkdir -p "/Library/Logs/OpenFrame"
mkdir -p "/Library/Application Support/OpenFrame"

# Clean up any existing compressed log files
echo "Cleaning up any existing compressed log files..."
rm -f "/Library/Logs/OpenFrame/daemon_error.log.gz" "/Library/Logs/OpenFrame/daemon_output.log.gz"

# Remove old run directory if it exists (no longer needed with LaunchDaemon)
if [ -d "/Applications/OpenFrame/run" ]; then
    echo "Removing deprecated run directory..."
    rm -rf "/Library/Application Support/OpenFrame/run"
fi

# Check for app bundle before setting permissions
if [ -d "/Applications/OpenFrame.app" ]; then
    # Set proper permissions for app bundle
    echo "Setting proper permissions for app bundle..."
    chmod -R 755 "/Applications/OpenFrame.app"
    chmod 755 "/Applications/OpenFrame.app/Contents/MacOS/openframe"
    # Set ownership to root
    chown -R root:wheel "/Applications/OpenFrame.app"
else
    echo "NOTE: OpenFrame.app not found in /Applications yet - this is normal for first installation"
fi

# Set proper permissions for support directories with detailed output
echo "Setting permissions on log directory..."
chmod -R 755 "/Library/Logs/OpenFrame"
ls -la "/Library/Logs/OpenFrame"

echo "Setting permissions on application support directory..."
chmod -R 755 "/Library/Application Support/OpenFrame"
ls -la "/Library/Application Support/OpenFrame"

# Create and initialize the main log file with proper permissions
echo "Creating and initializing main log file..."
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Log file created by postinstall script\",\"source\":\"postinstall\"}" > "/Library/Logs/OpenFrame/openframe.log"
chmod 644 "/Library/Logs/OpenFrame/openframe.log"
chown root:wheel "/Library/Logs/OpenFrame/openframe.log"
ls -la "/Library/Logs/OpenFrame/openframe.log"

# Create and initialize the daemon log files with proper permissions
echo "Creating daemon log files..."
# Create log files with substantial initial content to prevent immediate compression
echo "# OpenFrame daemon stdout log file - Created $(date)" > "/Library/Logs/OpenFrame/daemon_output.log"
echo "# This file contains stdout from the OpenFrame daemon process" >> "/Library/Logs/OpenFrame/daemon_output.log"
echo "# Log entries will appear below this line" >> "/Library/Logs/OpenFrame/daemon_output.log"
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Daemon output log file created\",\"source\":\"postinstall\"}" >> "/Library/Logs/OpenFrame/daemon_output.log"

echo "# OpenFrame daemon stderr log file - Created $(date)" > "/Library/Logs/OpenFrame/daemon_error.log"
echo "# This file contains stderr from the OpenFrame daemon process" >> "/Library/Logs/OpenFrame/daemon_error.log"
echo "# Error messages will appear below this line" >> "/Library/Logs/OpenFrame/daemon_error.log"
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Daemon error log file created\",\"source\":\"postinstall\"}" >> "/Library/Logs/OpenFrame/daemon_error.log"

chmod 644 "/Library/Logs/OpenFrame/daemon_error.log"
chmod 644 "/Library/Logs/OpenFrame/daemon_output.log"
chown root:wheel "/Library/Logs/OpenFrame/daemon_error.log"
chown root:wheel "/Library/Logs/OpenFrame/daemon_output.log"

echo "Verifying daemon log files..."
ls -la "/Library/Logs/OpenFrame/daemon_error.log"
ls -la "/Library/Logs/OpenFrame/daemon_output.log"

# Set ownership on log and support directories
echo "Setting ownership on log and support directories..."
chown -R root:wheel "/Library/Logs/OpenFrame"
chown -R root:wheel "/Library/Application Support/OpenFrame"

# Add log rotation configuration to prevent OS compression
echo "Setting up log rotation..."
cat > "/Library/Logs/OpenFrame/newsyslog.conf" << EOF
# OpenFrame log rotation configuration
/Library/Logs/OpenFrame/daemon_output.log 644 3 1000 * Z
/Library/Logs/OpenFrame/daemon_error.log 644 3 1000 * Z
EOF

chmod 644 "/Library/Logs/OpenFrame/newsyslog.conf"
chown root:wheel "/Library/Logs/OpenFrame/newsyslog.conf"

# Verify write access to log directory
echo "Testing write access to log directory..."
if touch "/Library/Logs/OpenFrame/write_test" && rm "/Library/Logs/OpenFrame/write_test"; then
    echo "Log directory is writable"
else
    echo "WARNING: Could not write to log directory!"
fi

# =================== SERVICE MANAGEMENT SECTION (REWRITTEN) ===================
echo "OpenFrame: Managing services..."

# Disable strict error checking for service operations
set +e

# Clean up ALL existing OpenFrame services before installing the new one
# Use a more comprehensive approach that will catch all possible service names
echo "Cleaning up any existing OpenFrame services..."

# Find all OpenFrame-related services currently loaded
echo "Finding existing OpenFrame services..."
LOADED_SERVICES=$(launchctl list | grep "com.openframe" | awk '{print $3}')

# If any are found, unload them properly
if [ -n "$LOADED_SERVICES" ]; then
    echo "Found existing OpenFrame services: $LOADED_SERVICES"
    for service in $LOADED_SERVICES; do
        echo "Unloading service: $service"
        launchctl bootout system/$service 2>/dev/null || echo "Could not unload $service via bootout"
        sleep 1 # Brief pause to ensure the service has time to stop
    done
else
    echo "No existing OpenFrame services found in launchctl"
fi

# Remove ALL existing OpenFrame plist files to ensure no duplicates
echo "Removing any existing OpenFrame plist files..."
for plist in /Library/LaunchDaemons/com.openframe.*.plist; do
    if [ -f "$plist" ]; then
        echo "Removing plist file: $plist"
        rm -f "$plist"
    fi
done

# Instead of killing processes, just check if any are still running for logging purposes
echo "Checking for running OpenFrame processes (for information only)..."
if [ -d "/Applications/OpenFrame.app" ]; then
    CHECK_PROCESSES=$(ps -ef | grep "/Applications/OpenFrame.app" | grep -v grep | wc -l | tr -d ' ')
    if [ "$CHECK_PROCESSES" -gt "0" ]; then
        echo "NOTE: Found $CHECK_PROCESSES OpenFrame processes still running - this is okay and they will be properly managed by the service system"
    else
        echo "No running OpenFrame application processes found"
    fi
else
    echo "No OpenFrame application directory found yet"
fi

echo "Service cleanup completed"

# Now install the new service using a single defined approach
echo "Installing OpenFrame service..."
if [ -f "/Applications/OpenFrame.app/Contents/MacOS/openframe" ]; then
    echo "Using CrossPlatformServiceManager via 'openframe install' command..."
    # Save current directory
    CURRENT_DIR=$(pwd)
    
    # Run the install command with proper error handling - wrapped in nohup and background
    # This ensures the service install process is disconnected from the installer
    (
        cd /
        nohup /Applications/OpenFrame.app/Contents/MacOS/openframe install > "/Library/Logs/OpenFrame/service_install.log" 2>&1
    ) &
    
    # Give it a moment to start
    sleep 2
    
    # Check the installation log
    if [ -f "/Library/Logs/OpenFrame/service_install.log" ]; then
        echo "Service installation log contents:"
        cat "/Library/Logs/OpenFrame/service_install.log" || echo "Could not read service installation log"
    fi
    
    # Don't verify interactively, just check for existence
    echo "Verifying service installation..."
    SERVICE_PLIST="/Library/LaunchDaemons/com.openframe.client.plist"
    if [ -f "$SERVICE_PLIST" ]; then
        echo "Service plist file exists - installation successful"
    else
        echo "WARNING: Service plist file not found - installation may have failed"
    fi
    
    # Plist file exists, now verify the service is loaded
    sleep 2
    if launchctl list | grep -q "com.openframe.client"; then
        echo "Service is loaded and running"
    else
        echo "Service plist exists but service not loaded - attempting to load manually"
        launchctl load "$SERVICE_PLIST" || echo "Manual service load failed, user may need to reboot"
    fi
else
    echo "ERROR: OpenFrame executable not found at /Applications/OpenFrame.app/Contents/MacOS/openframe"
fi

# Re-enable error checking
set -e

echo "OpenFrame: Installation completed"
exit 0