#!/bin/bash
# Improved postinstall script for OpenFrame with better debugging
set -e  # Exit immediately if any command fails

echo "OpenFrame: Starting postinstall script..."

# Create required directories and set permissions
echo "Creating required log directories..."
mkdir -p "/Library/Logs/OpenFrame"
mkdir -p "/Library/Application Support/OpenFrame"

# Clean up any existing compressed log files
echo "Cleaning up any existing compressed log files..."
rm -f "/Library/Logs/OpenFrame/daemon_error.log.gz" "/Library/Logs/OpenFrame/daemon_output.log.gz"

# Remove old run directory if it exists (no longer needed with LaunchDaemon)
if [ -d "/Library/Application Support/OpenFrame/run" ]; then
    echo "Removing deprecated run directory..."
    rm -rf "/Library/Application Support/OpenFrame/run"
fi

# Check for app bundle before setting permissions
if [ -d "/Applications/OpenFrame.app" ]; then
    # Set proper permissions for app bundle
    echo "Setting proper permissions for app bundle..."
    chmod -R 755 "/Applications/OpenFrame.app"
    chmod 755 "/Applications/OpenFrame.app/Contents/MacOS/openframe"
    # Set ownership to root
    chown -R root:wheel "/Applications/OpenFrame.app"
else
    echo "ERROR: OpenFrame.app not found in /Applications! Installation may be incomplete."
    ls -la "/Applications" || true
fi

# Set proper permissions for support directories with detailed output
echo "Setting permissions on log directory..."
chmod -R 755 "/Library/Logs/OpenFrame"
ls -la "/Library/Logs/OpenFrame"

echo "Setting permissions on application support directory..."
chmod -R 755 "/Library/Application Support/OpenFrame"
ls -la "/Library/Application Support/OpenFrame"

# Create and initialize the main log file with proper permissions
echo "Creating and initializing main log file..."
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Log file created by postinstall script\",\"source\":\"postinstall\"}" > "/Library/Logs/OpenFrame/openframe.log"
chmod 644 "/Library/Logs/OpenFrame/openframe.log"
chown root:wheel "/Library/Logs/OpenFrame/openframe.log"
ls -la "/Library/Logs/OpenFrame/openframe.log"

# Create and initialize the daemon log files with proper permissions
echo "Creating daemon log files..."
# Create log files with substantial initial content to prevent immediate compression
echo "# OpenFrame daemon stdout log file - Created $(date)" > "/Library/Logs/OpenFrame/daemon_output.log"
echo "# This file contains stdout from the OpenFrame daemon process" >> "/Library/Logs/OpenFrame/daemon_output.log"
echo "# Log entries will appear below this line" >> "/Library/Logs/OpenFrame/daemon_output.log"
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Daemon output log file created\",\"source\":\"postinstall\"}" >> "/Library/Logs/OpenFrame/daemon_output.log"

echo "# OpenFrame daemon stderr log file - Created $(date)" > "/Library/Logs/OpenFrame/daemon_error.log"
echo "# This file contains stderr from the OpenFrame daemon process" >> "/Library/Logs/OpenFrame/daemon_error.log"
echo "# Error messages will appear below this line" >> "/Library/Logs/OpenFrame/daemon_error.log"
echo "{\"timestamp\":\"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",\"level\":\"INFO\",\"message\":\"Daemon error log file created\",\"source\":\"postinstall\"}" >> "/Library/Logs/OpenFrame/daemon_error.log"

chmod 644 "/Library/Logs/OpenFrame/daemon_error.log"
chmod 644 "/Library/Logs/OpenFrame/daemon_output.log"
chown root:wheel "/Library/Logs/OpenFrame/daemon_error.log"
chown root:wheel "/Library/Logs/OpenFrame/daemon_output.log"

echo "Verifying daemon log files..."
ls -la "/Library/Logs/OpenFrame/daemon_error.log"
ls -la "/Library/Logs/OpenFrame/daemon_output.log"

# NOTE: We no longer use the LaunchDaemon plist file since we're using the CrossPlatformServiceManager
# for service management. The service will be installed when the user runs 'openframe install'.
echo "Using CrossPlatformServiceManager for service management. No LaunchDaemon plist needed."

# If there's an existing LaunchDaemon from a previous installation, remove it
if [ -f "/Library/LaunchDaemons/com.openframe.agent.plist" ]; then
    echo "Removing old LaunchDaemon plist from previous installation..."
    # First unload it if it's running
    if launchctl list | grep -q "com.openframe.agent"; then
        echo "Unloading existing LaunchDaemon..."
        launchctl unload "/Library/LaunchDaemons/com.openframe.agent.plist" 2>/dev/null || true
    fi
    # Then remove the file
    rm -f "/Library/LaunchDaemons/com.openframe.agent.plist"
    echo "Old LaunchDaemon removed."
fi

# Set ownership on log and support directories
echo "Setting ownership on log and support directories..."
chown -R root:wheel "/Library/Logs/OpenFrame"
chown -R root:wheel "/Library/Application Support/OpenFrame"

# Add log rotation configuration to prevent OS compression
echo "Setting up log rotation..."
cat > "/Library/Logs/OpenFrame/newsyslog.conf" << EOF
# OpenFrame log rotation configuration
/Library/Logs/OpenFrame/daemon_output.log 644 3 1000 * Z
/Library/Logs/OpenFrame/daemon_error.log 644 3 1000 * Z
EOF

chmod 644 "/Library/Logs/OpenFrame/newsyslog.conf"
chown root:wheel "/Library/Logs/OpenFrame/newsyslog.conf"

# Verify write access to log directory
echo "Testing write access to log directory..."
if touch "/Library/Logs/OpenFrame/write_test" && rm "/Library/Logs/OpenFrame/write_test"; then
    echo "Log directory is writable"
else
    echo "WARNING: Could not write to log directory!"
fi

echo "OpenFrame: Postinstall completed successfully"

# First uninstall any existing service to clean up
echo "Removing any existing OpenFrame service..."

# Try to uninstall using the executable
echo "Attempting to uninstall service using openframe command..."
if [ -f "/Applications/OpenFrame.app/Contents/MacOS/openframe" ]; then
    /Applications/OpenFrame.app/Contents/MacOS/openframe uninstall > /dev/null 2>&1 || echo "No previous service found via CLI"
fi

# Try to uninstall using launchctl directly
echo "Checking for existing launchd services..."
# Use bootout with properly formed service paths for possible service names
for service in "com.openframe.agent" "com.openframe.openframeclient" "com.openframe.openframev2"; do
    if launchctl list | grep -q "$service"; then
        echo "Unloading $service..."
        launchctl bootout system/$service > /dev/null 2>&1 || echo "Failed to unload $service, continuing anyway"
    fi
done

# Remove any old plist files that might exist
echo "Cleaning up any old plist files..."
for plist in "/Library/LaunchDaemons/com.openframe.agent.plist" "/Library/LaunchDaemons/com.openframe.openframeclient.plist" "/Library/LaunchDaemons/com.openframe.openframev2.plist"; do
    if [ -f "$plist" ]; then
        echo "Removing $plist..."
        rm -f "$plist" || echo "Failed to remove $plist, continuing anyway"
    fi
done

echo "Cleanup complete."

# Now install the new service
echo "Installing OpenFrame service..."
/Applications/OpenFrame.app/Contents/MacOS/openframe install || {
    echo "ERROR: Service installation failed!"
    # Display logs to help with diagnosis
    echo "Last 10 lines of log file:"
    tail -n 10 "/Library/Logs/OpenFrame/openframe.log" || echo "Could not read log file"
    # Continue anyway so the package installation doesn't fail entirely
    echo "Continuing with package installation despite service installation failure"
}
echo "Service installation completed (or attempted)."

exit 0