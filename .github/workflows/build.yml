name: OpenFrame Build Java & Container Images

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  # push:
  #   paths:
  #     - 'libs/**'
  #     - 'services/**'
  #     - 'infrastructure/**'
  #     - 'pom.xml'
  #     - '.github/workflows/build.yml'
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - 'libs/**'
      - 'services/**'
      - 'infrastructure/**'
      - 'pom.xml'
      - '.github/workflows/build.yml'

env:
  ORGANIZATION: flamingo-cx
  REGISTRY: ghcr.io
  GH_TOKEN: ${{ github.token }}

jobs:
  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      data: ${{ steps.filter.outputs.data }}
      api: ${{ steps.filter.outputs.api }}
      config: ${{ steps.filter.outputs.config }}
      gateway: ${{ steps.filter.outputs.gateway }}
      management: ${{ steps.filter.outputs.management }}
      stream: ${{ steps.filter.outputs.stream }}
      mongodb: ${{ steps.filter.outputs.mongodb }}
      cassandra: ${{ steps.filter.outputs.cassandra }}
      nifi: ${{ steps.filter.outputs.nifi }}
      postgresql: ${{ steps.filter.outputs.postgresql }}
      tactical-frontend: ${{ steps.filter.outputs.tactical-frontend }}
      tactical-nginx: ${{ steps.filter.outputs.tactical-nginx }}
      tactical-backend: ${{ steps.filter.outputs.tactical-backend }}
      tactical-nats: ${{ steps.filter.outputs.tactical-nats }}
      tactical-websockets: ${{ steps.filter.outputs.tactical-websockets }}
      tactical-celery: ${{ steps.filter.outputs.tactical-celery }}
      tactical-celerybeat: ${{ steps.filter.outputs.tactical-celerybeat }}
      fleetmdm: ${{ steps.filter.outputs.fleetmdm }}
      meshcentral: ${{ steps.filter.outputs.meshcentral }}
      ui: ${{ steps.filter.outputs.ui }}
      timestamp: ${{ steps.setup_env.outputs.timestamp }}
      timestamp_tag: ${{ steps.setup_env.outputs.timestamp_tag }}
      commit_sha: ${{ steps.setup_env.outputs.commit_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up environment
        id: setup_env
        run: |
          echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT
          echo "timestamp_tag=$(date +%d%m%Y%H%M)" >> $GITHUB_OUTPUT
          echo "commit_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            core:
              - './libs/openframe-core/**'
            data:
              - './libs/openframe-data/**'
            api:
              - './services/openframe-api/**'
            config:
              - './services/openframe-config/**'
            gateway:
              - './services/openframe-gateway/**'
            management:
              - './services/openframe-management/**'
            stream:
              - './services/openframe-stream/**'
            mongodb:
              - './infrastructure/mongodb/**'
            cassandra:
              - './infrastructure/cassandra/**'
            nifi:
              - './infrastructure/nifi/**'
            postgresql:
              - './infrastructure/postgresql/**'
            tactical-frontend:
              - './infrastructure/tactical-rmm/tactical-frontend/**'
              - './infrastructure/tactical-rmm/shared/**'
            tactical-nginx:
              - './infrastructure/tactical-rmm/tactical-nginx/**'
              - './infrastructure/tactical-rmm/shared/**'
            tactical-backend:
              - './infrastructure/tactical-rmm/tactical-base/**'
              - './infrastructure/tactical-rmm/shared/**'
            tactical-nats:
              - './infrastructure/tactical-rmm/tactical-base/**'
              - './infrastructure/tactical-rmm/shared/**'
            tactical-websockets:
              - './infrastructure/tactical-rmm/tactical-base/**'
              - './infrastructure/tactical-rmm/shared/**'
            tactical-celery:
              - './infrastructure/tactical-rmm/tactical-base/**'
              - './infrastructure/tactical-rmm/shared/**'
            tactical-celerybeat:
              - './infrastructure/tactical-rmm/tactical-base/**'
              - './infrastructure/tactical-rmm/shared/**'
            fleetmdm:
              - './infrastructure/fleetmdm/**'
            meshcentral:
              - './infrastructure/meshcentral/nginx/**'
              - './infrastructure/meshcentral/config/**'
            ui:
              - './services/openframe-ui/**'

  matrix:
    name: Generate Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: |
        [
          # Java Apps
          {
            "name": "core",
            "type": "java",
            "path": "libs/openframe-core",
            "artifact_name": "openframe-core"
          },
          {
            "name": "data",
            "type": "java",
            "path": "libs/openframe-data",
            "artifact_name": "openframe-data"
          },
          {
            "name": "api",
            "type": "java",
            "path": "services/openframe-api",
            "artifact_name": "openframe-api"
          },
          {
            "name": "config",
            "type": "java",
            "path": "services/openframe-config",
            "artifact_name": "openframe-config"
          },
          {
            "name": "gateway",
            "type": "java",
            "path": "services/openframe-gateway",
            "artifact_name": "openframe-gateway"
          },
          {
            "name": "management",
            "type": "java",
            "path": "services/openframe-management",
            "artifact_name": "openframe-management"
          },
          {
            "name": "stream",
            "type": "java",
            "path": "services/openframe-stream",
            "artifact_name": "openframe-stream"
          }
        ]
    steps:
      - name: Generate Matrix
        run: echo "Matrix configuration generated"

  build_java:
    name: "Build Java: ${{ matrix.name }}"
    needs: [changes, matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
    outputs:
      status: ${{ job.status }}
      matrix: ${{ toJSON(matrix) }}
    steps:
      - name: Checkout
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: echo
        run: |
          echo "Matrix: ${{ toJSON(matrix) }}"
      # - name: Set up Maven Central Repository with JDK 21
      #   if: matrix.module.type == 'java' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true'))
      #   uses: actions/setup-java@v4
      #   with:
      #     java-version: '21'
      #     distribution: 'temurin'
      #     cache: 'maven'

      # - name: Build with Maven
      #   if: matrix.module.type == 'java' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true'))
      #   run: mvn clean install -pl ${{ matrix.module.path }} -am -Dcompress

      # - name: Upload Java artifacts
      #   if: matrix.module.type == 'java' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true'))
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: ${{ matrix.module.artifact_name }}
      #     path: |
      #       ${{ matrix.module.path }}/target/*.jar
      #       !${{ matrix.module.path }}/target/original-*.jar
      #       !${{ matrix.module.path }}/target/*-sources.jar
      #       !${{ matrix.module.path }}/target/*-javadoc.jar
      #     retention-days: 1

  # build_amd:
  #   name: "Build AMD64 image: ${{ matrix.module.name }}"
  #   needs: [build_java, matrix]
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       module: ${{ fromJson(needs.matrix.outputs.matrix) }}
  #       exclude:
  #         - module:
  #             name: 'fleetmdm'
  #   steps:
  #     - name: Checkout
  #       if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 2

  #     - name: Download Java artifacts
  #       if: matrix.module.type == 'java' && matrix.module.artifact_name != '' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true'))
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ matrix.module.artifact_name }}
  #         path: .

  #     - name: Prepare Java artifacts for Docker build
  #       if: matrix.module.type == 'java' && matrix.module.artifact_name != '' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true'))
  #       run: |
  #         mkdir -p ${{ matrix.module.path }}/target
  #         mv *.jar ${{ matrix.module.path }}/target/

  #     - name: Log in to GitHub Container Registry
  #       if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     # - name: Set up QEMU
  #     #   if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #     #   uses: docker/setup-qemu-action@v3
  #     #   with:
  #     #     platforms: ${{ matrix.module.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64/v8' }}

  #     # - name: Set up Docker Buildx
  #     #   if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #     #   uses: docker/setup-buildx-action@v3
  #     #   with:
  #     #     driver-opts: 'image=moby/buildkit:buildx-stable-1'

  #     - name: Format build arguments
  #       if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #       id: format_args
  #       uses: ./.github/actions/format-build-args
  #       with:
  #         build_args: ${{ toJSON(matrix.module.build_args) }}
  #       env:
  #         BUILD_ARGS: ${{ steps.format_args.outputs.formatted_args }}

  #     - name: Build and push AMD64 image
  #       if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #       id: docker_build
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ${{ matrix.module.context || matrix.module.path }}
  #         file: ${{ matrix.module.path }}/Dockerfile
  #         platforms: linux/amd64
  #         push: true
  #         tags: |
  #           ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.module.name }}:latest
  #           ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.module.name }}:${{ needs.changes.outputs.commit_sha }}
  #           ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.module.name }}:${{ needs.changes.outputs.timestamp_tag }}
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/flamingo-cx/openframe
  #           org.opencontainers.image.description=OpenFrame is a platform for building and deploying AI agents.
  #           org.opencontainers.image.url=https://openframe.io
  #           org.opencontainers.image.vendor=FlamingoCX
  #           org.opencontainers.image.licenses=MIT
  #         build-args: |
  #           ${{ env.BUILD_ARGS }}

  # build_arm:
  #   name: "Build ARM64 image: ${{ matrix.module.name }}"
  #   needs: [build_java, matrix]
  #   runs-on: macos-latest
  #   strategy:
  #     matrix:
  #       module: ${{ fromJson(needs.matrix.outputs.matrix) }}
  #       exclude:
  #         - module:
  #             name: 'fleetmdm'
  #   steps:
  #     - name: Checkout
  #       if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 2

  #     - name: Download Java artifacts
  #       if: matrix.module.type == 'java' && matrix.module.artifact_name != '' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true'))
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: ${{ matrix.module.artifact_name }}
  #         path: .

  #     - name: Prepare Java artifacts for Docker build
  #       if: matrix.module.type == 'java' && matrix.module.artifact_name != '' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true'))
  #       run: |
  #         mkdir -p ${{ matrix.module.path }}/target
  #         mv *.jar ${{ matrix.module.path }}/target/

  #     - name: Log in to GitHub Container Registry
  #       if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #       uses: docker/login-action@v3
  #       with:
  #         registry: ${{ env.REGISTRY }}
  #         username: ${{ github.actor }}
  #         password: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Format build arguments
  #       if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #       id: format_args
  #       uses: ./.github/actions/format-build-args
  #       with:
  #         build_args: ${{ toJSON(matrix.module.build_args) }}
  #       env:
  #         BUILD_ARGS: ${{ steps.format_args.outputs.formatted_args }}

  #     - name: Build and push ARM64 image
  #       if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.module.name], 'true')
  #       id: docker_build
  #       uses: docker/build-push-action@v6
  #       with:
  #         context: ${{ matrix.module.context || matrix.module.path }}
  #         file: ${{ matrix.module.path }}/Dockerfile
  #         platforms: linux/arm64
  #         push: true
  #         tags: |
  #           ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.module.name }}:latest
  #           ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.module.name }}:${{ needs.changes.outputs.commit_sha }}
  #           ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.module.name }}:${{ needs.changes.outputs.timestamp_tag }}
  #         labels: |
  #           org.opencontainers.image.source=https://github.com/flamingo-cx/openframe
  #           org.opencontainers.image.description=OpenFrame is a platform for building and deploying AI agents.
  #           org.opencontainers.image.url=https://openframe.io
  #           org.opencontainers.image.vendor=FlamingoCX
  #           org.opencontainers.image.licenses=MIT
  #         build-args: |
  #           ${{ env.BUILD_ARGS }}

  # cleanup:
  #   name: Cleanup old versions
  #   needs: [build_amd, build_arm]
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}
  #   steps:
  #     - name: Clean up old versions
  #       if: needs.build_amd.result == 'success' || needs.build_arm.result == 'success'
  #       env:
  #         GITHUB_TOKEN_CLASSIC: ${{ secrets.GITHUB_TOKEN }}
  #         IMAGE_NAME: openframe-${{ matrix.module.name }}
  #       run: |
  #         chmod +x ./kind-cluster/scripts/gh-packages.sh
  #         ./kind-cluster/scripts/gh-packages.sh --delete-old "${{ env.IMAGE_NAME }}" \
  #           "latest" \
  #           "${{ needs.changes.outputs.commit_sha }}" \
  #           "${{ needs.changes.outputs.timestamp_tag }}"
  #       continue-on-error: true
