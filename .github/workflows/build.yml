name: OpenFrame Build and Push Latest

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  push:
    branches: [main]
    paths:
      - 'manifests/**'
      - 'openframe/**'
      - 'integrated-tools/**'
      - 'pom.xml'
      - 'client/**'
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag to release (e.g., v1.2.3)"
        required: true
        type: string

env:
  REGISTRY: "ghcr.io"
  ORGANISATION: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}

# =============================================================================
# JOBS
# =============================================================================

jobs:
  # Keep original separate jobs structure for reusable workflows
  changes:
    name: Detect Changes
    uses: ./.github/workflows/changes.yml
    if: github.event_name == 'push'

  matrix:
    name: Generate Matrix
    uses: ./.github/workflows/matrix.yml
    if: github.event_name == 'push'

  # Optimized Java build with better caching and parallel execution
  build_java:
    name: "Build Java: ${{ matrix.name }}"
    needs: [changes, matrix]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix_java) }}
    steps:
      - name: Checkout
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up JDK 21 with Maven Central
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: '**/pom.xml'
          check-latest: true

      - name: Build with Maven
        if: contains(needs.changes.outputs[matrix.name], 'true')
        run: |
          mvn clean install \
            -U
            -pl ${{ matrix.path }} \
            -am \
            -Dcompress \
            --threads 2C \
            --batch-mode \
            --no-transfer-progress \
            -Dmaven.javadoc.skip=true \
            -s .mvn/settings.xml
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Java artifacts
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.path }}/target/*.jar
            !${{ matrix.path }}/target/original-*.jar
            !${{ matrix.path }}/target/*-sources.jar
            !${{ matrix.path }}/target/*-javadoc.jar
          retention-days: 1

  build_images:
    name: "Build: ${{ matrix.name }}"
    needs: [build_java, matrix, changes]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Download Java artifacts
        if: |
          contains(fromJSON(toJSON(matrix.type)), 'java') && 
          matrix.artifact_name != '' && 
          contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.path }}/target

      - name: Log in to GitHub Container Registry
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Set up QEMU
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
      
      - name: Set up Docker Buildx
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGANISATION }}/${{ env.REPOSITORY }}/${{ matrix.name }}
          tags: |
            type=ref,event=tag
            type=sha,prefix={{branch}}-
            type=raw,value=${{ needs.changes.outputs.commit_sha }}
            type=raw,value=${{ needs.changes.outputs.timestamp_tag }}
            type=raw,value=latest,enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.vendor=${{ env.ORGANISATION }}
            org.opencontainers.image.description=OpenFrame is a platform for building and deploying AI agents.
            org.opencontainers.image.licenses=Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}

      - name: Format build arguments
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: format_args
        uses: ./.github/steps/docker-format-build-args
        with:
          build_args: ${{ toJSON(matrix.build_args) }}
        env:
          BUILD_ARGS: ${{ steps.format_args.outputs.formatted_args }}

      - name: Build and push image
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context || matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          platforms: ${{ matrix.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ env.BUILD_ARGS }}
          cache-from: |
            type=gha,scope=${{ matrix.name }}
            type=registry,ref=${{ env.REGISTRY }}/${{ env.ORGANISATION }}/${{ env.REPOSITORY }}/${{ matrix.name }}:buildcache
          cache-to: |
            type=gha,scope=${{ matrix.name }},mode=max
            type=registry,ref=${{ env.REGISTRY }}/${{ env.ORGANISATION }}/${{ env.REPOSITORY }}/${{ matrix.name }}:buildcache,mode=max

      - name: Cleanup old container versions
        if: |
          contains(needs.changes.outputs[matrix.name], 'true') && 
          steps.docker_build.outcome == 'success'
        uses: dataaxiom/ghcr-cleanup-action@v1
        continue-on-error: true
        with:
          package: ${{ env.REPOSITORY }}/${{ matrix.name }}
          delete-ghost-images: true
          delete-tags: "*"
          exclude-tags: |
            latest
            test-*
            ${{ needs.changes.outputs.commit_sha }}
            ${{ needs.changes.outputs.timestamp_tag }}
          keep-last: 10

  build_client:
    name: "Build Rust Client (${{ matrix.os }})"
    needs: [changes]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash
    if: github.event_name == 'push' && contains(needs.changes.outputs.client, 'true')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: openframe-oss-client-macos-x64
            cross: false
#          - os: windows-latest
#            target: x86_64-pc-windows-msvc
#            artifact_name: openframe-oss-client-windows-x64
#            cross: false
#          - os: ubuntu-latest
#            target: x86_64-unknown-linux-gnu
#            artifact_name: openframe-oss-client-linux-x64
#            cross: false
#          # Add ARM64 builds
#          - os: ubuntu-latest
#            target: aarch64-unknown-linux-gnu
#            artifact_name: openframe-oss-client-linux-arm64
#            cross: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      # Use official rust-toolchain action for better caching
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
          components: clippy, rustfmt

      # Enhanced Rust caching
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: client
          prefix-key: "v1-rust"
          shared-key: ${{ matrix.target }}
          cache-targets: true
          cache-on-failure: true

      # Install cross-compilation tools if needed
      - name: Install cross-compilation tools
        if: matrix.cross
        run: |
          make crossinstall
        
      - name: Run lint
        working-directory: client
        run: |
          make lint
        continue-on-error: true

      - name: Run clippy
        working-directory: client
        run: |
          make clippy
        continue-on-error: true

      # Optimized build with cross-compilation support
      - name: Build client
        working-directory: client
        run: |
          if [ "${{ matrix.cross }}" == "true" ]; then
            make crossbuild TARGET=${{ matrix.target }}
          else
            make build
          fi
        env:
          CARGO_TARGET_DIR: target

 # Muted as for now, test fails and needs fixing
 #     # Run tests only for native builds to save time
 #     - name: Test client
 #       if: "!matrix.cross"
 #       working-directory: client
 #       run: |
 #           make test

      # More specific artifact collection
      - name: Upload client artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            client/target/${{ matrix.target }}/release/openframe${{ matrix.os == 'windows-latest' && '.exe' || '' }}
            client/target/release/openframe${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          if-no-files-found: warn
          retention-days: 30
          compression-level: 9
