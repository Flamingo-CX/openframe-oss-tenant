name: OpenFrame Build Java & Container Images

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - 'libs/**'
      - 'services/**'
      - 'infrastructure/**'
      - 'pom.xml'
      - '.github/workflows/build.yml'

env:
  ORGANIZATION: flamingo-cx
  REGISTRY: ghcr.io
  GH_TOKEN: ${{ github.token }}

jobs:
  build-java:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ job.status }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Maven Central Repository with JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: mvn --batch-mode package --file pom.xml

      - name: Upload Java artifacts
        uses: actions/upload-artifact@v4
        with:
          name: java-artifacts
          path: |
            **/target/*.jar
            !**/target/original-*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
          retention-days: 1

  build-image:
    needs: build-java
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Disable fail-fast behavior
      matrix:
        service: [
          { name: 'mongodb', path: './infrastructure/mongodb/',
            build_args: {
              MONGO_INITDB_ROOT_USERNAME: 'openframe',
              MONGO_INITDB_ROOT_PASSWORD: 'password123456789',
              MONGO_APP_DATABASE: 'openframe',
              MONGO_APP_USERNAME: 'openframe',
              MONGO_APP_PASSWORD: 'password123456789'
            }
          },
          { name: 'cassandra', path: './infrastructure/cassandra/',
            build_args: {
              CASSANDRA_CLUSTER_NAME: 'openframe_cluster',
              CASSANDRA_DC: 'datacenter1',
              CASSANDRA_START_RPC: 'true',
              CASSANDRA_NATIVE_TRANSPORT_MAX_THREADS: '128',
              CASSANDRA_NATIVE_TRANSPORT_PORT_SSL: '9142',
              CASSANDRA_NATIVE_TRANSPORT_MAX_FRAME_SIZE: '256MB',
              CASSANDRA_STARTUP_TIMEOUT: '300',
              CASSANDRA_SYSTEM_AUTH_BOOTSTRAP_DELAY: '0',
              GOSSIP_WAIT_TIME_IN_MS: '0',
              HEAP_NEWSIZE: '128M',
              MAX_HEAP_SIZE: '512M',
              LOCAL_JMX: 'no',
              JMX_PORT: '7199'
            }
          },
          { name: 'nifi', path: './infrastructure/nifi/',
            build_args: {
              NIFI_WEB_HTTPS_PORT: '8443',
              NIFI_WEB_HTTP_HOST: '0.0.0.0',
              SINGLE_USER_CREDENTIALS_USERNAME: 'openframe',
              SINGLE_USER_CREDENTIALS_PASSWORD: 'password123456789'
            }
          },
          { name: 'postgresql', path: './infrastructure/postgresql/' },
          {
            name: 'authentik-postgresql',
            path: './infrastructure/postgresql/',
            context: './infrastructure/postgresql',
            build_args: {
              POSTGRES_USER: 'authentik-user',
              POSTGRES_PASSWORD: 'authentik-password-1234',
              POSTGRES_MULTIPLE_DATABASES: 'authentik-database,authentik-database-authentik'
            }
          },
          {
            name: 'tactical-base',
            path: './infrastructure/tactical-rmm/tactical-base/',
            context: './infrastructure/tactical-rmm',
            build_args: {
              POSTGRES_DB: 'tacticalrmm',
              POSTGRES_USER: 'postgres',
              POSTGRES_PASSWORD: 'postgrespass',
              POSTGRES_HOST: 'tactical-postgres',
              POSTGRES_PORT: '5432',
              REDIS_HOST: 'tactical-redis',
              SMTP_HOST: 'smtp.example.com',
              SMTP_PORT: '587',
              SMTP_FROM: 'mesh@example.com',
              SMTP_USER: 'mesh@example.com',
              SMTP_PASS: 'mesh-smtp-pass',
              SMTP_TLS: 'false',
              TRMM_USER: 'tactical',
              TRMM_PASS: 'tactical',
              TACTICAL_BACKEND_PORT: '8000',
              TRMM_PROTO: 'http',
              TRMM_DISABLE_WEB_TERMINAL: 'False',
              TRMM_DISABLE_SERVER_SCRIPTS: 'False',
              TRMM_DISABLE_SSO: 'False',
              TRMM_DISABLE_2FA: 'True',
              NODE_ENV: 'development',
              WS_PROTO: 'ws',
              WS_MASK_OVERRIDE: '1',
              TACTICAL_DIR: '/opt/tactical',
              TACTICAL_TMP_DIR: '/tmp/tactical',
              API_HOST: 'tactical-backend:8000',
              API_LOCALHOST_HOST: 'localhost:8000',
              APP_HOST: 'tactical-frontend:8080',
              APP_LOCALHOST_HOST: 'localhost:8080',
              NATS_CONFIG: '/opt/tactical/nats-rmm.conf',
              NATS_API_CONFIG: '/opt/tactical/nats-api.conf',
              NATS_CONFIG_CHECK_INTERVAL: '5',
              NATS_STD_BIND_HOST: 'tactical-nats',
              NATS_WS_BIND_HOST: 'tactical-nats',
              NATS_CONNECT_HOST: 'tactical-nats',
              NATS_STANDARD_PORT: '9235',
              NATS_WEBSOCKET_PORT: '4222'
            }
          },
          {
            name: 'tactical-frontend',
            path: './infrastructure/tactical-rmm/tactical-frontend/',
            context: './infrastructure/tactical-rmm',
            build_args: {
              POSTGRES_DB: 'tacticalrmm',
              POSTGRES_USER: 'postgres',
              POSTGRES_PASSWORD: 'postgrespass',
              POSTGRES_HOST: 'tactical-postgres',
              POSTGRES_PORT: '5432',
              REDIS_HOST: 'tactical-redis',
              SMTP_HOST: 'smtp.example.com',
              SMTP_PORT: '587',
              SMTP_FROM: 'mesh@example.com',
              SMTP_USER: 'mesh@example.com',
              SMTP_PASS: 'mesh-smtp-pass',
              SMTP_TLS: 'false',
              TRMM_USER: 'tactical',
              TRMM_PASS: 'tactical',
              TACTICAL_BACKEND_PORT: '8000',
              TRMM_PROTO: 'http',
              TRMM_DISABLE_WEB_TERMINAL: 'False',
              TRMM_DISABLE_SERVER_SCRIPTS: 'False',
              TRMM_DISABLE_SSO: 'False',
              TRMM_DISABLE_2FA: 'True',
              NODE_ENV: 'development',
              WS_PROTO: 'ws',
              WS_MASK_OVERRIDE: '1',
              TACTICAL_DIR: '/opt/tactical',
              TACTICAL_TMP_DIR: '/tmp/tactical',
              API_HOST: 'tactical-backend:8000',
              API_LOCALHOST_HOST: 'localhost:8000',
              APP_HOST: 'tactical-frontend:8080',
              APP_LOCALHOST_HOST: 'localhost:8080',
              NATS_CONFIG: '/opt/tactical/nats-rmm.conf',
              NATS_API_CONFIG: '/opt/tactical/nats-api.conf',
              NATS_CONFIG_CHECK_INTERVAL: '5',
              NATS_STD_BIND_HOST: 'tactical-nats',
              NATS_WS_BIND_HOST: 'tactical-nats',
              NATS_CONNECT_HOST: 'tactical-nats',
              NATS_STANDARD_PORT: '9235',
              NATS_WEBSOCKET_PORT: '4222'
            }
          },
          {
            name: 'tactical-nginx',
            path: './infrastructure/tactical-rmm/tactical-nginx/',
            context: './infrastructure/tactical-rmm',
            build_args: {
              POSTGRES_DB: 'tacticalrmm',
              POSTGRES_USER: 'postgres',
              POSTGRES_PASSWORD: 'postgrespass',
              POSTGRES_HOST: 'tactical-postgres',
              POSTGRES_PORT: '5432',
              REDIS_HOST: 'tactical-redis',
              SMTP_HOST: 'smtp.example.com',
              SMTP_PORT: '587',
              SMTP_FROM: 'mesh@example.com',
              SMTP_USER: 'mesh@example.com',
              SMTP_PASS: 'mesh-smtp-pass',
              SMTP_TLS: 'false',
              TRMM_USER: 'tactical',
              TRMM_PASS: 'tactical',
              TACTICAL_BACKEND_PORT: '8000',
              TRMM_PROTO: 'http',
              TRMM_DISABLE_WEB_TERMINAL: 'False',
              TRMM_DISABLE_SERVER_SCRIPTS: 'False',
              TRMM_DISABLE_SSO: 'False',
              TRMM_DISABLE_2FA: 'True',
              NODE_ENV: 'development',
              WS_PROTO: 'ws',
              WS_MASK_OVERRIDE: '1',
              TACTICAL_DIR: '/opt/tactical',
              TACTICAL_TMP_DIR: '/tmp/tactical',
              API_HOST: 'tactical-backend:8000',
              API_LOCALHOST_HOST: 'localhost:8000',
              APP_HOST: 'tactical-frontend:8080',
              APP_LOCALHOST_HOST: 'localhost:8080',
              NATS_CONFIG: '/opt/tactical/nats-rmm.conf',
              NATS_API_CONFIG: '/opt/tactical/nats-api.conf',
              NATS_CONFIG_CHECK_INTERVAL: '5',
              NATS_STD_BIND_HOST: 'tactical-nats',
              NATS_WS_BIND_HOST: 'tactical-nats',
              NATS_CONNECT_HOST: 'tactical-nats',
              NATS_STANDARD_PORT: '9235',
              NATS_WEBSOCKET_PORT: '4222'
            }
          },
          {
            name: 'tactical-backend',
            path: './infrastructure/tactical-rmm/tactical-base/',
            context: './infrastructure/tactical-rmm',
            build_args: {
              POSTGRES_DB: 'tacticalrmm',
              POSTGRES_USER: 'postgres',
              POSTGRES_PASSWORD: 'postgrespass',
              POSTGRES_HOST: 'tactical-postgres',
              POSTGRES_PORT: '5432',
              REDIS_HOST: 'tactical-redis',
              SMTP_HOST: 'smtp.example.com',
              SMTP_PORT: '587',
              SMTP_FROM: 'mesh@example.com',
              SMTP_USER: 'mesh@example.com',
              SMTP_PASS: 'mesh-smtp-pass',
              SMTP_TLS: 'false',
              TRMM_USER: 'tactical',
              TRMM_PASS: 'tactical',
              TACTICAL_BACKEND_PORT: '8000',
              TRMM_PROTO: 'http',
              TRMM_DISABLE_WEB_TERMINAL: 'False',
              TRMM_DISABLE_SERVER_SCRIPTS: 'False',
              TRMM_DISABLE_SSO: 'False',
              TRMM_DISABLE_2FA: 'True',
              NODE_ENV: 'development',
              WS_PROTO: 'ws',
              WS_MASK_OVERRIDE: '1',
              TACTICAL_DIR: '/opt/tactical',
              TACTICAL_TMP_DIR: '/tmp/tactical',
              API_HOST: 'tactical-backend:8000',
              API_LOCALHOST_HOST: 'localhost:8000',
              APP_HOST: 'tactical-frontend:8080',
              APP_LOCALHOST_HOST: 'localhost:8080',
              NATS_CONFIG: '/opt/tactical/nats-rmm.conf',
              NATS_API_CONFIG: '/opt/tactical/nats-api.conf',
              NATS_CONFIG_CHECK_INTERVAL: '5',
              NATS_STD_BIND_HOST: 'tactical-nats',
              NATS_WS_BIND_HOST: 'tactical-nats',
              NATS_CONNECT_HOST: 'tactical-nats',
              NATS_STANDARD_PORT: '9235',
              NATS_WEBSOCKET_PORT: '4222'
            }
          },
          {
            name: 'tactical-nats',
            path: './infrastructure/tactical-rmm/tactical-base/',
            context: './infrastructure/tactical-rmm',
            build_args: {
              POSTGRES_DB: 'tacticalrmm',
              POSTGRES_USER: 'postgres',
              POSTGRES_PASSWORD: 'postgrespass',
              POSTGRES_HOST: 'tactical-postgres',
              POSTGRES_PORT: '5432',
              REDIS_HOST: 'tactical-redis',
              SMTP_HOST: 'smtp.example.com',
              SMTP_PORT: '587',
              SMTP_FROM: 'mesh@example.com',
              SMTP_USER: 'mesh@example.com',
              SMTP_PASS: 'mesh-smtp-pass',
              SMTP_TLS: 'false',
              TRMM_USER: 'tactical',
              TRMM_PASS: 'tactical',
              TACTICAL_BACKEND_PORT: '8000',
              TRMM_PROTO: 'http',
              TRMM_DISABLE_WEB_TERMINAL: 'False',
              TRMM_DISABLE_SERVER_SCRIPTS: 'False',
              TRMM_DISABLE_SSO: 'False',
              TRMM_DISABLE_2FA: 'True',
              NODE_ENV: 'development',
              WS_PROTO: 'ws',
              WS_MASK_OVERRIDE: '1',
              TACTICAL_DIR: '/opt/tactical',
              TACTICAL_TMP_DIR: '/tmp/tactical',
              API_HOST: 'tactical-backend:8000',
              API_LOCALHOST_HOST: 'localhost:8000',
              APP_HOST: 'tactical-frontend:8080',
              APP_LOCALHOST_HOST: 'localhost:8080',
              NATS_CONFIG: '/opt/tactical/nats-rmm.conf',
              NATS_API_CONFIG: '/opt/tactical/nats-api.conf',
              NATS_CONFIG_CHECK_INTERVAL: '5',
              NATS_STD_BIND_HOST: 'tactical-nats',
              NATS_WS_BIND_HOST: 'tactical-nats',
              NATS_CONNECT_HOST: 'tactical-nats',
              NATS_STANDARD_PORT: '9235',
              NATS_WEBSOCKET_PORT: '4222'
            }
          },
          {
            name: 'tactical-websockets',
            path: './infrastructure/tactical-rmm/tactical-base/',
            context: './infrastructure/tactical-rmm',
            build_args: {
              POSTGRES_DB: 'tacticalrmm',
              POSTGRES_USER: 'postgres',
              POSTGRES_PASSWORD: 'postgrespass',
              POSTGRES_HOST: 'tactical-postgres',
              POSTGRES_PORT: '5432',
              REDIS_HOST: 'tactical-redis',
              SMTP_HOST: 'smtp.example.com',
              SMTP_PORT: '587',
              SMTP_FROM: 'mesh@example.com',
              SMTP_USER: 'mesh@example.com',
              SMTP_PASS: 'mesh-smtp-pass',
              SMTP_TLS: 'false',
              TRMM_USER: 'tactical',
              TRMM_PASS: 'tactical',
              TACTICAL_BACKEND_PORT: '8000',
              TRMM_PROTO: 'http',
              TRMM_DISABLE_WEB_TERMINAL: 'False',
              TRMM_DISABLE_SERVER_SCRIPTS: 'False',
              TRMM_DISABLE_SSO: 'False',
              TRMM_DISABLE_2FA: 'True',
              NODE_ENV: 'development',
              WS_PROTO: 'ws',
              WS_MASK_OVERRIDE: '1',
              TACTICAL_DIR: '/opt/tactical',
              TACTICAL_TMP_DIR: '/tmp/tactical',
              API_HOST: 'tactical-backend:8000',
              API_LOCALHOST_HOST: 'localhost:8000',
              APP_HOST: 'tactical-frontend:8080',
              APP_LOCALHOST_HOST: 'localhost:8080',
              NATS_CONFIG: '/opt/tactical/nats-rmm.conf',
              NATS_API_CONFIG: '/opt/tactical/nats-api.conf',
              NATS_CONFIG_CHECK_INTERVAL: '5',
              NATS_STD_BIND_HOST: 'tactical-nats',
              NATS_WS_BIND_HOST: 'tactical-nats',
              NATS_CONNECT_HOST: 'tactical-nats',
              NATS_STANDARD_PORT: '9235',
              NATS_WEBSOCKET_PORT: '4222'
            }
          },
          {
            name: 'tactical-celery',
            path: './infrastructure/tactical-rmm/tactical-base/',
            context: './infrastructure/tactical-rmm',
            build_args: {
              POSTGRES_DB: 'tacticalrmm',
              POSTGRES_USER: 'postgres',
              POSTGRES_PASSWORD: 'postgrespass',
              POSTGRES_HOST: 'tactical-postgres',
              POSTGRES_PORT: '5432',
              REDIS_HOST: 'tactical-redis',
              SMTP_HOST: 'smtp.example.com',
              SMTP_PORT: '587',
              SMTP_FROM: 'mesh@example.com',
              SMTP_USER: 'mesh@example.com',
              SMTP_PASS: 'mesh-smtp-pass',
              SMTP_TLS: 'false',
              TRMM_USER: 'tactical',
              TRMM_PASS: 'tactical',
              TACTICAL_BACKEND_PORT: '8000',
              TRMM_PROTO: 'http',
              TRMM_DISABLE_WEB_TERMINAL: 'False',
              TRMM_DISABLE_SERVER_SCRIPTS: 'False',
              TRMM_DISABLE_SSO: 'False',
              TRMM_DISABLE_2FA: 'True',
              NODE_ENV: 'development',
              WS_PROTO: 'ws',
              WS_MASK_OVERRIDE: '1',
              TACTICAL_DIR: '/opt/tactical',
              TACTICAL_TMP_DIR: '/tmp/tactical',
              API_HOST: 'tactical-backend:8000',
              API_LOCALHOST_HOST: 'localhost:8000',
              APP_HOST: 'tactical-frontend:8080',
              APP_LOCALHOST_HOST: 'localhost:8080',
              NATS_CONFIG: '/opt/tactical/nats-rmm.conf',
              NATS_API_CONFIG: '/opt/tactical/nats-api.conf',
              NATS_CONFIG_CHECK_INTERVAL: '5',
              NATS_STD_BIND_HOST: 'tactical-nats',
              NATS_WS_BIND_HOST: 'tactical-nats',
              NATS_CONNECT_HOST: 'tactical-nats',
              NATS_STANDARD_PORT: '9235',
              NATS_WEBSOCKET_PORT: '4222'
            }
          },
          {
            name: 'tactical-celerybeat',
            path: './infrastructure/tactical-rmm/tactical-base/',
            context: './infrastructure/tactical-rmm',
            build_args: {
              POSTGRES_DB: 'tacticalrmm',
              POSTGRES_USER: 'postgres',
              POSTGRES_PASSWORD: 'postgrespass',
              POSTGRES_HOST: 'tactical-postgres',
              POSTGRES_PORT: '5432',
              REDIS_HOST: 'tactical-redis',
              SMTP_HOST: 'smtp.example.com',
              SMTP_PORT: '587',
              SMTP_FROM: 'mesh@example.com',
              SMTP_USER: 'mesh@example.com',
              SMTP_PASS: 'mesh-smtp-pass',
              SMTP_TLS: 'false',
              TRMM_USER: 'tactical',
              TRMM_PASS: 'tactical',
              TACTICAL_BACKEND_PORT: '8000',
              TRMM_PROTO: 'http',
              TRMM_DISABLE_WEB_TERMINAL: 'False',
              TRMM_DISABLE_SERVER_SCRIPTS: 'False',
              TRMM_DISABLE_SSO: 'False',
              TRMM_DISABLE_2FA: 'True',
              NODE_ENV: 'development',
              WS_PROTO: 'ws',
              WS_MASK_OVERRIDE: '1',
              TACTICAL_DIR: '/opt/tactical',
              TACTICAL_TMP_DIR: '/tmp/tactical',
              API_HOST: 'tactical-backend:8000',
              API_LOCALHOST_HOST: 'localhost:8000',
              APP_HOST: 'tactical-frontend:8080',
              APP_LOCALHOST_HOST: 'localhost:8080',
              NATS_CONFIG: '/opt/tactical/nats-rmm.conf',
              NATS_API_CONFIG: '/opt/tactical/nats-api.conf',
              NATS_CONFIG_CHECK_INTERVAL: '5',
              NATS_STD_BIND_HOST: 'tactical-nats',
              NATS_WS_BIND_HOST: 'tactical-nats',
              NATS_CONNECT_HOST: 'tactical-nats',
              NATS_STANDARD_PORT: '9235',
              NATS_WEBSOCKET_PORT: '4222'
            }
          },
          { name: 'fleetmdm', path: './infrastructure/fleetmdm/', context: './infrastructure/fleetmdm' },
          { name: 'core', path: './libs/openframe-core/' },
          { name: 'data', path: './libs/openframe-data/' },
          { name: 'api', path: './services/openframe-api/' },
          { name: 'config', path: './services/openframe-config/' },
          { name: 'gateway', path: './services/openframe-gateway/' },
          { name: 'management', path: './services/openframe-management/' },
          { name: 'stream', path: './services/openframe-stream/' },
          { name: 'ui', path: './services/openframe-ui/' },
          {
            name: 'meshcentral',
            path: './infrastructure/meshcentral/server/',
            build_args: {
              MESH_DIR: '/opt/mesh',
              MESH_TEMP_DIR: '/tmp/mesh',
              MONGO_INITDB_ROOT_USERNAME: 'mongouser',
              MONGO_INITDB_ROOT_PASSWORD: 'mongopass',
              MONGO_INITDB_DATABASE: 'meshcentral',
              MONGODB_HOST: 'openframe-meshcentral-mongodb',
              MONGODB_PORT: '27017',
              MESH_USER: 'mesh@openframe.io',
              MESH_PASS: 'meshpass@1234',
              MESH_DEVICE_GROUP: 'OpenFrame',
              MESH_PORT: '8383',
              MESH_HOST: 'openframe-meshcentral-server',
              MESH_EXTERNAL_HOST: 'localhost',
              MESH_EXTERNAL_PORT: '8383',
              MESH_NGINX_HOST: 'openframe-meshcentral-nginx',
              MESH_NGINX_NAT_HOST: 'michaels-macbook-pro.local',
              MESH_NGINX_PORT: '8383',
              MESH_PROTOCOL: 'wss',
              MESH_PERSISTENT_CONFIG: '0',
              MESH_DISABLE_SSL: '1',
              MESH_COMPRESSION_ENABLED: 'true',
              MESH_WEBRTC_ENABLED: 'false'
            }
          },
          {
            name: 'meshcentral-nginx',
            path: './infrastructure/meshcentral/nginx/',
            build_args: {
              MESH_DIR: '/opt/mesh',
              MESH_TEMP_DIR: '/tmp/mesh',
              MONGO_INITDB_ROOT_USERNAME: 'mongouser',
              MONGO_INITDB_ROOT_PASSWORD: 'mongopass',
              MONGO_INITDB_DATABASE: 'meshcentral',
              MONGODB_HOST: 'openframe-meshcentral-mongodb',
              MONGODB_PORT: '27017',
              MESH_USER: 'mesh@openframe.io',
              MESH_PASS: 'meshpass@1234',
              MESH_DEVICE_GROUP: 'OpenFrame',
              MESH_PORT: '8383',
              MESH_HOST: 'openframe-meshcentral-server',
              MESH_EXTERNAL_HOST: 'localhost',
              MESH_EXTERNAL_PORT: '8383',
              MESH_NGINX_HOST: 'openframe-meshcentral-nginx',
              MESH_NGINX_NAT_HOST: 'michaels-macbook-pro.local',
              MESH_NGINX_PORT: '8383',
              MESH_PROTOCOL: 'wss',
              MESH_PERSISTENT_CONFIG: '0',
              MESH_DISABLE_SSL: '1',
              MESH_COMPRESSION_ENABLED: 'true',
              MESH_WEBRTC_ENABLED: 'false'
            }
          }
        ]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for path changes
        id: check_changes
        run: |
          # Set build context
          BUILD_CONTEXT="${{ matrix.service.context || matrix.service.path }}"

          # Check if this is a PR or manual trigger
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Get the base and head SHAs for the PR
            BASE_SHA=$(git rev-parse ${{ github.event.pull_request.base.sha }})
            HEAD_SHA=$(git rev-parse ${{ github.event.pull_request.head.sha }})

            # Check if there are any changes in the service path
            if git diff --quiet $BASE_SHA $HEAD_SHA -- "$BUILD_CONTEXT"; then
              echo "No changes detected in $BUILD_CONTEXT"
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              echo "Changes detected in $BUILD_CONTEXT"
              echo "changed=true" >> $GITHUB_OUTPUT
            fi
          else
            # For manual triggers, always build
            echo "Manual trigger - building all images"
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Set up environment
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          echo "TIMESTAMP_TAG=$(date +%d%m%Y%H%M)" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - name: Download Java artifacts
        if: steps.check_changes.outputs.changed == 'true'
        uses: actions/download-artifact@v4
        with:
          name: java-artifacts
          path: .

      - name: Log in to GitHub Container Registry
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        if: steps.check_changes.outputs.changed == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        if: steps.check_changes.outputs.changed == 'true'
        id: docker_build
        run: |
          # Set build context
          BUILD_CONTEXT="${{ matrix.service.context || matrix.service.path }}"

          # Ensure the Dockerfile exists
          if [ ! -f "${{ matrix.service.path }}Dockerfile" ]; then
            echo "Error: Dockerfile not found at ${{ matrix.service.path }}Dockerfile"
            exit 1
          fi

          # Build and push the image with error handling
          if ! docker buildx build \
            --platform linux/amd64 \
            --push \
            --file "${{ matrix.service.path }}Dockerfile" \
            --tag "${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.service.name }}:latest" \
            --tag "${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.service.name }}:${{ env.COMMIT_SHA }}" \
            --tag "${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.service.name }}:${{ env.TIMESTAMP_TAG }}" \
            --cache-from "type=gha" \
            --cache-to "type=gha,mode=max" \
            --provenance=false \
            ${{ matrix.service.build_args && format('--build-arg {0}={1}', matrix.service.build_args.*.key, matrix.service.build_args.*.value) || '' }} \
            "$BUILD_CONTEXT"; then
            echo "Error: Failed to build and push image for ${{ matrix.service.name }}"
            exit 1
          fi

          # Verify the image exists in registry
          if ! docker manifest inspect "${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.service.name }}:${{ env.COMMIT_SHA }}" > /dev/null 2>&1; then
            echo "Error: Image ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.service.name }}:${{ env.COMMIT_SHA }} not found in registry"
            exit 1
          fi

          echo "Successfully built and pushed image for ${{ matrix.service.name }}"

      - name: Clean up old versions
        if: steps.check_changes.outputs.changed == 'true' && success() && steps.docker_build.outcome == 'success'
        env:
          GITHUB_TOKEN_CLASSIC: ${{ secrets.GITHUB_TOKEN }}
        run: |
          chmod +x ./kind-cluster/scripts/gh-packages.sh
          ./kind-cluster/scripts/gh-packages.sh --delete-old "openframe-${{ matrix.service.name }}" \
            "latest" \
            "${{ env.COMMIT_SHA }}" \
            "${{ env.TIMESTAMP_TAG }}"
        continue-on-error: true
