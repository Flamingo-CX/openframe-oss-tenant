name: OpenFrame Build Java & Container Images

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  push:
    paths:
      - 'openframe/**'
      - 'integrated-tools/**'
      - 'pom.xml'
      - '.github/workflows/build.yml'
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches: [main]
    paths:
      - 'openframe/**'
      - 'integrated-tools/**'
      - 'pom.xml'
      - '.github/workflows/build.yml'

env:
  ORGANIZATION: flamingo-cx
  REGISTRY: ghcr.io
  GH_TOKEN: ${{ github.token }}

jobs:
  changes:
    name: Check for changes
    runs-on: ubuntu-latest
    outputs:
      core: ${{ steps.filter.outputs.core }}
      data: ${{ steps.filter.outputs.data }}
      api: ${{ steps.filter.outputs.api }}
      config: ${{ steps.filter.outputs.config }}
      gateway: ${{ steps.filter.outputs.gateway }}
      management: ${{ steps.filter.outputs.management }}
      stream: ${{ steps.filter.outputs.stream }}
      mongodb: ${{ steps.filter.outputs.mongodb }}
      cassandra: ${{ steps.filter.outputs.cassandra }}
      nifi: ${{ steps.filter.outputs.nifi }}
      postgresql: ${{ steps.filter.outputs.postgresql }}
      tactical-frontend: ${{ steps.filter.outputs.tactical-frontend }}
      tactical-nginx: ${{ steps.filter.outputs.tactical-nginx }}
      tactical-backend: ${{ steps.filter.outputs.tactical-backend }}
      tactical-nats: ${{ steps.filter.outputs.tactical-nats }}
      tactical-websockets: ${{ steps.filter.outputs.tactical-websockets }}
      tactical-celery: ${{ steps.filter.outputs.tactical-celery }}
      tactical-celerybeat: ${{ steps.filter.outputs.tactical-celerybeat }}
      fleetmdm: ${{ steps.filter.outputs.fleetmdm }}
      meshcentral: ${{ steps.filter.outputs.meshcentral }}
      ui: ${{ steps.filter.outputs.ui }}
      timestamp: ${{ steps.setup_env.outputs.timestamp }}
      timestamp_tag: ${{ steps.setup_env.outputs.timestamp_tag }}
      commit_sha: ${{ steps.setup_env.outputs.commit_sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up environment
        id: setup_env
        run: |
          echo "timestamp=$(date +%s)" >> $GITHUB_OUTPUT
          echo "timestamp_tag=$(date +%d%m%Y%H%M)" >> $GITHUB_OUTPUT
          echo "commit_sha=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            core:
              - './openframe/libs/openframe-core/**'
            data:
              - './openframe/libs/openframe-data/**'
            api:
              - './openframe/services/openframe-api/**'
            config:
              - './openframe/services/openframe-config/**'
            gateway:
              - './openframe/services/openframe-gateway/**'
            management:
              - './openframe/services/openframe-management/**'
            stream:
              - './openframe/services/openframe-stream/**'
            ui:
              - './openframe/services/openframe-ui/**'
            nifi:
              - './openframe/datasources/nifi/**'
            postgresql:
              - './integrated-tools/authentik/postgresql/**'
            tactical-frontend:
              - './integrated-tools/tactical-rmm/tactical-frontend/**'
              - './integrated-tools/tactical-rmm/shared/**'
            tactical-nginx:
              - './integrated-tools/tactical-rmm/tactical-nginx/**'
              - './integrated-tools/tactical-rmm/shared/**'
            tactical-backend:
              - './integrated-tools/tactical-rmm/tactical-base/**'
              - './integrated-tools/tactical-rmm/shared/**'
            tactical-nats:
              - './integrated-tools/tactical-rmm/tactical-base/**'
              - './integrated-tools/tactical-rmm/shared/**'
            tactical-websockets:
              - './integrated-tools/tactical-rmm/tactical-base/**'
              - './integrated-tools/tactical-rmm/shared/**'
            tactical-celery:
              - './integrated-tools/tactical-rmm/tactical-base/**'
              - './integrated-tools/tactical-rmm/shared/**'
            tactical-celerybeat:
              - './integrated-tools/tactical-rmm/tactical-base/**'
              - './integrated-tools/tactical-rmm/shared/**'
            fleetmdm:
              - './integrated-tools/fleetmdm/**'
            meshcentral:
              - './integrated-tools/meshcentral/server/**'

  matrix:
    uses: ./.github/workflows/matrix.yml

  build_java:
    name: "Build Java: ${{ matrix.name }}"
    needs: [changes, matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix_java) }}
    steps:
      - name: Checkout
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Maven Central Repository with JDK 21
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: |
            ${{ matrix.path }}/pom.xml
            **/pom.xml
          check-latest: true

      - name: Cache Maven packages
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ${{ matrix.path }}/target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        run: mvn clean install -pl ${{ matrix.path }} -am -Dcompress

      - name: Upload Java artifacts
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.path }}/target/*.jar
            !${{ matrix.path }}/target/original-*.jar
            !${{ matrix.path }}/target/*-sources.jar
            !${{ matrix.path }}/target/*-javadoc.jar
          retention-days: 1

  build:
    name: "Build image: ${{ matrix.name }}"
    needs: [build_java, matrix, changes]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Download Java artifacts
        if: contains(fromJSON(toJSON(matrix.type)), 'java') && matrix.artifact_name != '' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true'))
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: .

      - name: Prepare Java artifacts for Docker build
        if: contains(fromJSON(toJSON(matrix.type)), 'java') && matrix.artifact_name != '' && (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true'))
        run: |
          mkdir -p ${{ matrix.path }}/target
          mv *.jar ${{ matrix.path }}/target/

      - name: Log in to GitHub Container Registry
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}

      - name: Set up Docker Buildx
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.name }}
          tags: |
            type=raw,value=latest
            type=ref,event=tag
            type=raw,value=${{ needs.changes.outputs.commit_sha }}
            type=raw,value=${{ needs.changes.outputs.timestamp_tag }}
          labels: |
            org.opencontainers.image.vendor=FlamingoCX
            org.opencontainers.image.description=OpenFrame is a platform for building and deploying AI agents.
            org.opencontainers.image.licenses=Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)

      - name: Format build arguments
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        id: format_args
        uses: ./.github/actions/format-build-args
        with:
          build_args: ${{ toJSON(matrix.build_args) }}
        env:
          BUILD_ARGS: ${{ steps.format_args.outputs.formatted_args }}

      - name: Build and push image
        if: github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context || matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          platforms: ${{ matrix.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ env.BUILD_ARGS }}

      - name: Delete old versions
        if: (github.event_name == 'workflow_dispatch' || contains(needs.changes.outputs[matrix.name], 'true')) && steps.docker_build.outcome == 'success'
        uses: dataaxiom/ghcr-cleanup-action@v1
        with:
          package: openframe-${{ matrix.name }}
          delete-ghost-images: true
          delete-tags: "*"
          exclude-tags: latest,${{ needs.changes.outputs.commit_sha }},${{ needs.changes.outputs.timestamp_tag }}
