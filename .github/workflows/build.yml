name: OpenFrame Build and Push Latest

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  push:
    branches: [main]
    paths:
      - 'manifests/**'
      - 'openframe/**'
      - 'integrated-tools/**'
      - 'pom.xml'
  # üöÄ MANUAL TRIGGER: Force rebuild all images from GitHub UI
  workflow_dispatch:
    inputs:
      force_all_builds:
        description: 'Force build all images (ignores change detection)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

env:
  REGISTRY: "ghcr.io"
  # üöÄ DYNAMIC: Auto-detects org and repo from GitHub context
  ORGANISATION: ${{ github.repository_owner }}
  REPOSITORY: ${{ github.event.repository.name }}
  # üéØ BULLETPROOF: Repository-based image visibility
  REPO_NAME: ${{ github.repository }}
  IMAGE_VISIBILITY: ${{ (contains(github.repository, '-oss-') && 'public') || (contains(github.repository, 'oss') && 'public') || (contains(github.repository, '-saas-') && 'private') || (contains(github.repository, 'saas') && 'private') || 'private' }}
  # üî• FORCE BUILD: Manual trigger to build all images
  FORCE_ALL_BUILDS: ${{ github.event.inputs.force_all_builds == 'true' }}

jobs:

  changes:
    name: Changes
    uses: ./.github/workflows/changes.yml
    with:
      force_all_builds: ${{ github.event.inputs.force_all_builds || 'false' }}

  matrix:
    name: Matrix
    uses: ./.github/workflows/matrix.yml

  build_java:
    name: "Build Java: ${{ matrix.name }}"
    needs: [changes, matrix]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix_java) }}
    steps:
      - name: Checkout
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Maven Central Repository with JDK 21
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: |
            ${{ matrix.path }}/pom.xml
            **/pom.xml
          check-latest: true

      - name: Cache Maven packages
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ${{ matrix.path }}/target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        if: contains(needs.changes.outputs[matrix.name], 'true')
        run: mvn clean install -pl ${{ matrix.path }} -am -Dcompress

      - name: Upload Java artifacts
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.path }}/target/*.jar
            !${{ matrix.path }}/target/original-*.jar
            !${{ matrix.path }}/target/*-sources.jar
            !${{ matrix.path }}/target/*-javadoc.jar
          retention-days: 1


  build:
    name: "Build image: ${{ matrix.name }}"
    needs: [build_java, matrix, changes]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Download Java artifacts
        if: contains(fromJSON(toJSON(matrix.type)), 'java') && matrix.artifact_name != '' && contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.path }}/target

      - name: Check and fix package visibility before build
        if: contains(needs.changes.outputs[matrix.name], 'true')
        continue-on-error: true
        run: |
          echo "üîç Checking existing package visibility for ${{ matrix.name }}..."
          
          # Package name for API calls
          PACKAGE_NAME="${{ env.REPOSITORY }}%2F${{ matrix.name }}"
          ORG_LOWER=$(echo "${{ env.ORGANISATION }}" | tr '[:upper:]' '[:lower:]')
          
          # Check if package exists in organization
          echo "üì¶ Checking package: ${PACKAGE_NAME}"
          PACKAGE_CHECK=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/${ORG_LOWER}/packages/container/${PACKAGE_NAME}" 2>&1)
          
          if echo "$PACKAGE_CHECK" | grep -q '"message":\s*"Not Found"'; then
            echo "üì¶ Package doesn't exist yet"
            
            # For OSS repos, proactively create package with public visibility
            if [[ "${{ env.IMAGE_VISIBILITY }}" == "public" ]]; then
              echo "üèóÔ∏è Pre-creating package with PUBLIC visibility to prevent Docker push creating private package..."
              
              CREATE_RESPONSE=$(curl -s -X POST \
                -H "Accept: application/vnd.github.package-deletes-preview+json" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                -H "Content-Type: application/json" \
                -d "{
                  \"name\": \"${{ env.REPOSITORY }}/${{ matrix.name }}\",
                  \"visibility\": \"public\",
                  \"package_type\": \"container\",
                  \"description\": \"OpenFrame container package for ${{ matrix.name }}\"
                }" \
                "https://api.github.com/orgs/${ORG_LOWER}/packages" 2>&1)
              
              echo "Create response: $CREATE_RESPONSE"
              
              if echo "$CREATE_RESPONSE" | grep -q '"visibility":\s*"public"' || echo "$CREATE_RESPONSE" | grep -q '"name"'; then
                echo "‚úÖ PACKAGE PRE-CREATED as PUBLIC - Docker push will add images to existing public package"
              else
                echo "‚ö†Ô∏è Package pre-creation failed: $CREATE_RESPONSE"
                echo "üîÑ Docker push will create package (may default to private)"
              fi
            else
              echo "‚úÖ Package will be created as private (SAAS repo)"
            fi
          else
            # Package exists, check visibility
            CURRENT_VISIBILITY=$(echo "$PACKAGE_CHECK" | grep -o '"visibility":\s*"[^"]*"' | cut -d'"' -f4)
            echo "üìã Current package visibility: $CURRENT_VISIBILITY"
            echo "üéØ Desired visibility: ${{ env.IMAGE_VISIBILITY }}"
            
            if [[ "$CURRENT_VISIBILITY" != "${{ env.IMAGE_VISIBILITY }}" ]]; then
              echo "‚ùå WRONG VISIBILITY: Package is $CURRENT_VISIBILITY but should be ${{ env.IMAGE_VISIBILITY }}"
              echo "üóëÔ∏è DELETING ENTIRE PACKAGE to force recreation with correct visibility..."
              
              # Delete the entire package - no mercy, full deletion
              DELETE_RESPONSE=$(curl -s -X DELETE \
                -H "Accept: application/vnd.github.package-deletes-preview+json" \
                -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/orgs/${ORG_LOWER}/packages/container/${PACKAGE_NAME}" 2>&1)
              
              echo "Delete response: $DELETE_RESPONSE"
              
              if echo "$DELETE_RESPONSE" | grep -q '"message":\s*"Not Found"' || [[ -z "$DELETE_RESPONSE" ]] || echo "$DELETE_RESPONSE" | grep -q '"message":\s*"Successful"'; then
                echo "‚úÖ PACKAGE DELETED - Now creating package with correct visibility IMMEDIATELY"
                echo "‚è≥ Waiting for deletion to propagate..."
                sleep 5
                
                # IMMEDIATELY create the package with correct visibility BEFORE Docker push
                echo "üèóÔ∏è Creating package with ${{ env.IMAGE_VISIBILITY }} visibility..."
                CREATE_RESPONSE=$(curl -s -X POST \
                  -H "Accept: application/vnd.github.package-deletes-preview+json" \
                  -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  -H "Content-Type: application/json" \
                  -d "{
                    \"name\": \"${{ env.REPOSITORY }}/${{ matrix.name }}\",
                    \"visibility\": \"${{ env.IMAGE_VISIBILITY }}\",
                    \"package_type\": \"container\",
                    \"description\": \"OpenFrame container package for ${{ matrix.name }}\"
                  }" \
                  "https://api.github.com/orgs/${ORG_LOWER}/packages" 2>&1)
                
                echo "Create response: $CREATE_RESPONSE"
                
                if echo "$CREATE_RESPONSE" | grep -q '"visibility":\s*"${{ env.IMAGE_VISIBILITY }}"' || echo "$CREATE_RESPONSE" | grep -q '"name"'; then
                  echo "‚úÖ PACKAGE CREATED with ${{ env.IMAGE_VISIBILITY }} visibility - Docker push will add to existing package"
                else
                  echo "‚ö†Ô∏è Package creation response unclear: $CREATE_RESPONSE"
                  echo "üîÑ Proceeding with Docker push - will verify visibility after"
                fi
              else
                echo "‚ùå DELETION FAILED: $DELETE_RESPONSE"
                echo "üõë BUILD WILL CONTINUE BUT PACKAGE WILL HAVE WRONG VISIBILITY"
                exit 1
              fi
            else
              echo "‚úÖ Package already has correct visibility: $CURRENT_VISIBILITY"
            fi
          fi

      - name: Log in to GitHub Container Registry
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}

      - name: Set up Docker Buildx
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/setup-buildx-action@v3

      - name: Convert organization to lowercase
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: lowercase
        run: |
          echo "org_lower=$(echo '${{ env.ORGANISATION }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
          echo "repo_lower=$(echo '${{ env.REPOSITORY }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Generate metadata
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ steps.lowercase.outputs.org_lower }}/${{ steps.lowercase.outputs.repo_lower }}/${{ matrix.name }}
          tags: |
            type=ref,event=tag
            type=raw,value=${{ needs.changes.outputs.commit_sha }}
            type=raw,value=${{ needs.changes.outputs.timestamp_tag }}
            type=raw,value=latest
          labels: |
            org.opencontainers.image.vendor=${{ steps.lowercase.outputs.org_lower }}
            org.opencontainers.image.description=OpenFrame is a platform for building and deploying AI agents.
            org.opencontainers.image.licenses=Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)
            org.opencontainers.image.visibility=${{ env.IMAGE_VISIBILITY }}

      - name: Format build arguments
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: format_args
        uses: ./.github/steps/docker-format-build-args
        with:
          build_args: ${{ toJSON(matrix.build_args) }}
        env:
          BUILD_ARGS: ${{ steps.format_args.outputs.formatted_args }}

      - name: Build and push image
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context || matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          platforms: ${{ matrix.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ env.BUILD_ARGS }}

      - name: Verify package recreated with correct visibility
        if: contains(needs.changes.outputs[matrix.name], 'true') && steps.docker_build.outcome == 'success'
        continue-on-error: true
        run: |
          echo "üîç Verifying package ${{ matrix.name }} was created with correct visibility..."
          
          # Wait for package to be fully processed
          sleep 10
          
          # Package name and setup
          PACKAGE_NAME="${{ env.REPOSITORY }}%2F${{ matrix.name }}"
          ORG_LOWER=$(echo "${{ env.ORGANISATION }}" | tr '[:upper:]' '[:lower:]')
          REPO_LOWER=$(echo "${{ env.REPOSITORY }}" | tr '[:upper:]' '[:lower:]')
          
          # Check the recreated package visibility
          VERIFY_CHECK=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/${ORG_LOWER}/packages/container/${PACKAGE_NAME}" 2>&1)
          
          if echo "$VERIFY_CHECK" | grep -q '"message":\s*"Not Found"'; then
            echo "‚ùì Package not yet available in API - still processing"
          else
            FINAL_VISIBILITY=$(echo "$VERIFY_CHECK" | grep -o '"visibility":\s*"[^"]*"' | cut -d'"' -f4)
            echo "üìã Package recreated with visibility: $FINAL_VISIBILITY"
            echo "üéØ Expected visibility: ${{ env.IMAGE_VISIBILITY }}"
            
            if [[ "$FINAL_VISIBILITY" == "${{ env.IMAGE_VISIBILITY }}" ]]; then
              echo "‚úÖ SUCCESS: Package recreated with correct visibility!"
            else
              echo "‚ùå FAILED: Package recreated with wrong visibility!"
              echo "üîó Manual fix needed: https://github.com/orgs/${ORG_LOWER}/packages/container/package/${REPO_LOWER}%2F${{ matrix.name }}"
              echo "   Go to Package settings ‚Üí Change visibility ‚Üí ${{ env.IMAGE_VISIBILITY }}"
            fi
          fi

      - name: Delete old versions
        if: contains(needs.changes.outputs[matrix.name], 'true') && steps.docker_build.outcome == 'success'
        uses: dataaxiom/ghcr-cleanup-action@v1
        continue-on-error: true
        with:
          package: ${{ steps.lowercase.outputs.repo_lower }}/${{ matrix.name }}
          delete-ghost-images: true
          delete-tags: "*"
          exclude-tags: latest,${{ needs.changes.outputs.commit_sha }},${{ needs.changes.outputs.timestamp_tag }}
