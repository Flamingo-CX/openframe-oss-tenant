name: OpenFrame Build Container Images

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  workflow_run:
    workflows: ["OpenFrame Build Java Artifacts"]
    types:
      - completed

env:
  ORGANIZATION: flamingo-cx
  REGISTRY: ghcr.io

jobs:
  build:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up environment
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          echo "TIMESTAMP_TAG=$(date +%d%m%Y%H%M)" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      # Restore cached Java artifacts from build job
      - name: Restore Java artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/target/*.jar
            !**/target/original-*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
          key: ${{ runner.os }}-java-${{ github.event.workflow_run.head_commit.id }}
          restore-keys: |
            ${{ runner.os }}-java-

      # Create target directories and copy JAR files
      - name: Create target directories and copy JAR files
        run: |
          # Create target directories
          for dir in $(find . -type f -name "Dockerfile" -exec dirname {} \;); do
            mkdir -p "$dir/target"
          done

          # Copy JAR files for Java services
          for service in api config gateway management stream core data; do
            echo "Setting up $service..."
            find . -path "**/target/*.jar" \
              ! -name "original-*.jar" \
              ! -name "*-sources.jar" \
              ! -name "*-javadoc.jar" \
              -exec cp {} ./**/openframe-$service/target/ \;

            echo "Contents of $service target directory:"
            ls -la ./**/openframe-$service/target/
          done

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Function to build and push a service image
      - name: Build and push service images
        run: |
          # Function to build and push an image
          build_and_push_image() {
            local service=$1
            local path=$2
            local image_prefix="$REGISTRY/$ORGANIZATION"
            echo "Building and pushing $service from $path"

            # Set build context based on service
            local build_context="$path"
            if [[ "$service" == "tactical-base" || \
                  "$service" == "tactical-frontend" || \
                  "$service" == "tactical-meshcentral" || \
                  "$service" == "tactical-nginx" || \
                  "$service" == "tactical-backend" || \
                  "$service" == "tactical-nats" || \
                  "$service" == "tactical-websockets" || \
                  "$service" == "tactical-celery" || \
                  "$service" == "tactical-celerybeat" ]]; then
              build_context="./infrastructure/tactical-rmm"
            elif [[ "$service" == "fleetmdm" ]]; then
              build_context="./infrastructure/fleetmdm"
            elif [[ "$service" == "nifi" ]]; then
              build_context="./infrastructure/nifi"
            fi

            # Extract metadata for the image
            echo "Extracting metadata for $service..."
            docker run --rm \
              -v $PWD:/workspace \
              -w /workspace \
              docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7 \
              --images "$image_prefix/openframe-$service" \
              --tags "type=raw,value=latest" \
              --tags "type=raw,value=$COMMIT_SHA" \
              --labels "org.opencontainers.image.source=$GITHUB_SERVER_URL/$GITHUB_REPOSITORY" \
              --labels "org.opencontainers.image.revision=$GITHUB_SHA" \
              --labels "org.opencontainers.image.created=$TIMESTAMP" > metadata.json

            # Build and push the image
            echo "Building and pushing $service image..."
            docker buildx build \
              --platform linux/amd64 \
              --push \
              --file "$path/Dockerfile" \
              --context "$build_context" \
              --tags "$image_prefix/openframe-$service:latest" \
              --tags "$image_prefix/openframe-$service:$COMMIT_SHA" \
              --tags "$image_prefix/openframe-$service:$TIMESTAMP_TAG" \
              --labels-from-file metadata.json \
              --cache-from "type=gha" \
              --cache-to "type=gha,mode=max" \
              --provenance=true

            # Generate artifact attestation
            echo "Generating attestation for $service..."
            docker run --rm \
              -v $PWD:/workspace \
              -w /workspace \
              actions/attest-build-provenance@v2 \
              --subject-name "$image_prefix/openframe-$service" \
              --subject-digest "$(docker inspect $image_prefix/openframe-$service:latest --format='{{.RepoDigests}}')" \
              --push-to-registry

            echo "Successfully built and pushed $service image"
          }

          # Infrastructure Services
          build_and_push_image "mongodb" "./infrastructure/mongodb/"
          build_and_push_image "cassandra" "./infrastructure/cassandra/"
          build_and_push_image "nifi" "./infrastructure/nifi/"
          build_and_push_image "postgresql" "./infrastructure/postgresql/"

          # Tactical RMM Components
          build_and_push_image "tactical-base" "./infrastructure/tactical-rmm/tactical-base/"
          build_and_push_image "tactical-frontend" "./infrastructure/tactical-rmm/tactical-frontend/"
          build_and_push_image "tactical-meshcentral" "./infrastructure/tactical-rmm/tactical-meshcentral/"
          build_and_push_image "tactical-nginx" "./infrastructure/tactical-rmm/tactical-nginx/"
          build_and_push_image "tactical-backend" "./infrastructure/tactical-rmm/tactical-base/"
          build_and_push_image "tactical-nats" "./infrastructure/tactical-rmm/tactical-base/"
          build_and_push_image "tactical-websockets" "./infrastructure/tactical-rmm/tactical-base/"
          build_and_push_image "tactical-celery" "./infrastructure/tactical-rmm/tactical-base/"
          build_and_push_image "tactical-celerybeat" "./infrastructure/tactical-rmm/tactical-base/"

          # Fleet MDM
          build_and_push_image "fleetmdm" "./infrastructure/fleetmdm/"

          # Core Libraries
          build_and_push_image "core" "./libs/openframe-core/"
          build_and_push_image "data" "./libs/openframe-data/"

          # Services
          build_and_push_image "api" "./services/openframe-api/"
          build_and_push_image "config" "./services/openframe-config/"
          build_and_push_image "gateway" "./services/openframe-gateway/"
          build_and_push_image "management" "./services/openframe-management/"
          build_and_push_image "stream" "./services/openframe-stream/"
          build_and_push_image "ui" "./services/openframe-ui/"

          # MeshCentral Components
          build_and_push_image "meshcentral" "./infrastructure/meshcentral/server/"
          build_and_push_image "meshcentral-nginx" "./infrastructure/meshcentral/nginx/"
