name: Generate Matrix

on:
  workflow_call:
    outputs:
      matrix:
        description: "Matrix configuration for all components"
        value: ${{ jobs.matrix.outputs.matrix }}
      matrix_java:
        description: "Matrix configuration for Java components"
        value: ${{ jobs.matrix.outputs.matrix_java }}

jobs:
  matrix:
    name: Generate matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.filter.outputs.matrix }}
      matrix_java: ${{ steps.filter.outputs.matrix_java }}
    steps:
      - name: Define Matrix
        id: matrix
        run: |
          matrix_json='[
            {
              "name": "openframe-core",
              "type": ["java"],
              "path": "./openframe/libs/openframe-core",
              "artifact_name": "openframe-core"
            },
            {
              "name": "openframe-data",
              "type": ["java"],
              "path": "./openframe/libs/openframe-data",
              "artifact_name": "openframe-data"
            },
            {
              "name": "openframe-jwt",
              "type": ["java"],
              "path": "./openframe/libs/openframe-jwt",
              "artifact_name": "openframe-jwt"
            },
            {
              "name": "openframe-api",
              "type": ["java", "container"],
              "path": "./openframe/services/openframe-api",
              "manifest_path": "./manifests/microservices/openframe-api",
              "artifact_name": "openframe-api"
            },
            {
              "name": "external-api",
              "type": ["java", "container"],
              "path": "./openframe/services/external-api",
              "manifest_path": "./manifests/microservices/external-api",
              "artifact_name": "external-api"
            },
            {
              "name": "openframe-client",
              "type": ["java", "container"],
              "path": "./openframe/services/openframe-client",
              "manifest_path": "./manifests/microservices/openframe-client",
              "artifact_name": "openframe-client"
            },
            {
              "name": "openframe-config",
              "type": ["java", "container"],
              "path": "./openframe/services/openframe-config",
              "manifest_path": "./manifests/microservices/openframe-config",
              "artifact_name": "openframe-config"
            },
            {
              "name": "openframe-gateway",
              "type": ["java", "container"],
              "path": "./openframe/services/openframe-gateway",
              "manifest_path": "./manifests/microservices/openframe-gateway",
              "artifact_name": "openframe-gateway"
            },
            {
              "name": "openframe-management",
              "type": ["java", "container"],
              "path": "./openframe/services/openframe-management",
              "manifest_path": "./manifests/microservices/openframe-management",
              "artifact_name": "openframe-management"
            },
            {
              "name": "openframe-stream",
              "type": ["java", "container"],
              "path": "./openframe/services/openframe-stream",
              "manifest_path": "./manifests/microservices/openframe-stream",
              "artifact_name": "openframe-stream"
            },
            {
              "name": "openframe-ui",
              "type": ["container"],
              "path": "./openframe/services/openframe-ui",
              "manifest_path": "./manifests/microservices/openframe-ui"
            },
            {
              "name": "authentik-postgresql",
              "type": ["container"],
              "path": "./integrated-tools/authentik/postgresql",
              "manifest_path": "./manifests/integrated-tools/authentik/",
              "build_args": {
                "POSTGRES_USER": "authentik-user",
                "POSTGRES_PASSWORD": "authentik-password-1234",
                "POSTGRES_MULTIPLE_DATABASES": "authentik-database,authentik-database-authentik"
              }
            },
            { 
              "name": "fleetmdm",
              "type": ["container"],
              "path": "./integrated-tools/fleetmdm",
              "manifest_path": "./manifests/integrated-tools/fleetmdm"
            },
            {
              "name": "meshcentral",
              "type": ["container"],
              "path": "./integrated-tools/meshcentral/server",
              "manifest_path": "./manifests/integrated-tools/meshcentral",
              "build_args": {
                "MESH_DIR": "/opt/mesh",
                "MESH_TEMP_DIR": "/tmp/mesh",
                "MONGO_INITDB_ROOT_USERNAME": "mongouser",
                "MONGO_INITDB_ROOT_PASSWORD": "mongopass",
                "MONGO_INITDB_DATABASE": "meshcentral",
                "MONGODB_HOST": "meshcentral-mongodb",
                "MONGODB_PORT": "27017",
                "MESH_USER": "mesh@openframe.io",
                "MESH_PASS": "meshpass@1234",
                "MESH_DEVICE_GROUP": "OpenFrame",
                "MESH_PORT": "8383",
                "MESH_HOST": "meshcentral",
                "MESH_EXTERNAL_HOST": "localhost",
                "MESH_EXTERNAL_PORT": "8383",
                "MESH_NGINX_HOST": "openframe-meshcentral-nginx",
                "MESH_NGINX_NAT_HOST": "michaels-macbook-pro.local",
                "MESH_NGINX_PORT": "8383",
                "MESH_PROTOCOL": "wss",
                "MESH_PERSISTENT_CONFIG": "0",
                "MESH_DISABLE_SSL": "1",
                "MESH_COMPRESSION_ENABLED": "true",
                "MESH_WEBRTC_ENABLED": "false"
              }
            },
            {
              "name": "tactical-frontend",
              "type": ["container"],
              "path": "./integrated-tools/tactical-rmm/tactical-frontend",
              "context": "./integrated-tools/tactical-rmm",
              "manifest_path": "./manifests/integrated-tools/tactical-rmm",
              "build_args": {
                "POSTGRES_DB": "tacticalrmm",
                "POSTGRES_USER": "postgres",
                "POSTGRES_PASSWORD": "postgrespass",
                "POSTGRES_HOST": "tactical-postgres",
                "POSTGRES_PORT": "5432",
                "REDIS_HOST": "tactical-redis",
                "SMTP_HOST": "smtp.example.com",
                "SMTP_PORT": "587",
                "SMTP_FROM": "mesh@example.com",
                "SMTP_USER": "mesh@example.com",
                "SMTP_PASS": "mesh-smtp-pass",
                "SMTP_TLS": "false",
                "TRMM_USER": "tactical",
                "TRMM_PASS": "tactical",
                "TACTICAL_BACKEND_PORT": "8000",
                "TRMM_PROTO": "http",
                "TRMM_DISABLE_WEB_TERMINAL": "False",
                "TRMM_DISABLE_SERVER_SCRIPTS": "False",
                "TRMM_DISABLE_SSO": "False",
                "TRMM_DISABLE_2FA": "True",
                "NODE_ENV": "development",
                "WS_PROTO": "ws",
                "WS_MASK_OVERRIDE": "1",
                "TACTICAL_DIR": "/opt/tactical",
                "TACTICAL_TMP_DIR": "/tmp/tactical",
                "API_HOST": "tactical-backend:8000",
                "API_LOCALHOST_HOST": "localhost:8000",
                "APP_HOST": "tactical-frontend:8080",
                "APP_LOCALHOST_HOST": "localhost:8080",
                "NATS_CONFIG": "/opt/tactical/nats-rmm.conf",
                "NATS_API_CONFIG": "/opt/tactical/nats-api.conf",
                "NATS_CONFIG_CHECK_INTERVAL": "5",
                "NATS_STD_BIND_HOST": "tactical-nats",
                "NATS_WS_BIND_HOST": "tactical-nats",
                "NATS_CONNECT_HOST": "tactical-nats",
                "NATS_STANDARD_PORT": "9235",
                "NATS_WEBSOCKET_PORT": "4222",
                "WEBSOCKET_PORT": "8383",
                "WEBSOCKETS_BIND_HOST": "tactical-websockets"
              }
            },
            {
              "name": "tactical-nginx",
              "type": ["container"],
              "path": "./integrated-tools/tactical-rmm/tactical-nginx",
              "manifest_path": "./manifests/integrated-tools/tactical-rmm",
              "context": "./integrated-tools/tactical-rmm",
              "build_args": {
                "POSTGRES_DB": "tacticalrmm",
                "POSTGRES_USER": "postgres",
                "POSTGRES_PASSWORD": "postgrespass",
                "POSTGRES_HOST": "tactical-postgres",
                "POSTGRES_PORT": "5432",
                "REDIS_HOST": "tactical-redis",
                "SMTP_HOST": "smtp.example.com",
                "SMTP_PORT": "587",
                "SMTP_FROM": "mesh@example.com",
                "SMTP_USER": "mesh@example.com",
                "SMTP_PASS": "mesh-smtp-pass",
                "SMTP_TLS": "false",
                "TRMM_USER": "tactical",
                "TRMM_PASS": "tactical",
                "TACTICAL_BACKEND_PORT": "8000",
                "TRMM_PROTO": "http",
                "TRMM_DISABLE_WEB_TERMINAL": "False",
                "TRMM_DISABLE_SERVER_SCRIPTS": "False",
                "TRMM_DISABLE_SSO": "False",
                "TRMM_DISABLE_2FA": "True",
                "NODE_ENV": "development",
                "WS_PROTO": "ws",
                "WS_MASK_OVERRIDE": "1",
                "TACTICAL_DIR": "/opt/tactical",
                "TACTICAL_TMP_DIR": "/tmp/tactical",
                "API_HOST": "tactical-backend:8000",
                "API_LOCALHOST_HOST": "localhost:8000",
                "APP_HOST": "tactical-frontend:8080",
                "APP_LOCALHOST_HOST": "localhost:8080",
                "NATS_CONFIG": "/opt/tactical/nats-rmm.conf",
                "NATS_API_CONFIG": "/opt/tactical/nats-api.conf",
                "NATS_CONFIG_CHECK_INTERVAL": "5",
                "NATS_STD_BIND_HOST": "tactical-nats",
                "NATS_WS_BIND_HOST": "tactical-nats",
                "NATS_CONNECT_HOST": "tactical-nats",
                "NATS_STANDARD_PORT": "9235",
                "NATS_WEBSOCKET_PORT": "4222",
                "WEBSOCKET_PORT": "8383",
                "WEBSOCKETS_BIND_HOST": "tactical-websockets"
              }
            },
            {
              "name": "tactical-backend",
              "type": ["container"],
              "path": "./integrated-tools/tactical-rmm/tactical-base",
              "manifest_path": "./manifests/integrated-tools/tactical-rmm",
              "context": "./integrated-tools/tactical-rmm",
              "build_args": {
                "POSTGRES_DB": "tacticalrmm",
                "POSTGRES_USER": "postgres",
                "POSTGRES_PASSWORD": "postgrespass",
                "POSTGRES_HOST": "tactical-postgres",
                "POSTGRES_PORT": "5432",
                "REDIS_HOST": "tactical-redis",
                "SMTP_HOST": "smtp.example.com",
                "SMTP_PORT": "587",
                "SMTP_FROM": "mesh@example.com",
                "SMTP_USER": "mesh@example.com",
                "SMTP_PASS": "mesh-smtp-pass",
                "SMTP_TLS": "false",
                "TRMM_USER": "tactical",
                "TRMM_PASS": "tactical",
                "TACTICAL_BACKEND_PORT": "8000",
                "TRMM_PROTO": "http",
                "TRMM_DISABLE_WEB_TERMINAL": "False",
                "TRMM_DISABLE_SERVER_SCRIPTS": "False",
                "TRMM_DISABLE_SSO": "False",
                "TRMM_DISABLE_2FA": "True",
                "NODE_ENV": "development",
                "WS_PROTO": "ws",
                "WS_MASK_OVERRIDE": "1",
                "TACTICAL_DIR": "/opt/tactical",
                "TACTICAL_TMP_DIR": "/tmp/tactical",
                "API_HOST": "tactical-backend:8000",
                "API_LOCALHOST_HOST": "localhost:8000",
                "APP_HOST": "tactical-frontend:8080",
                "APP_LOCALHOST_HOST": "localhost:8080",
                "NATS_CONFIG": "/opt/tactical/nats-rmm.conf",
                "NATS_API_CONFIG": "/opt/tactical/nats-api.conf",
                "NATS_CONFIG_CHECK_INTERVAL": "5",
                "NATS_STD_BIND_HOST": "tactical-nats",
                "NATS_WS_BIND_HOST": "tactical-nats",
                "NATS_CONNECT_HOST": "tactical-nats",
                "NATS_STANDARD_PORT": "9235",
                "NATS_WEBSOCKET_PORT": "4222",
                "WEBSOCKET_PORT": "8383",
                "WEBSOCKETS_BIND_HOST": "tactical-websockets"
              }
            },
            {
              "name": "tactical-nats",
              "type": ["container"],
              "path": "./integrated-tools/tactical-rmm/tactical-base",
              "manifest_path": "./manifests/integrated-tools/tactical-rmm",
              "context": "./integrated-tools/tactical-rmm",
              "build_args": {
                "POSTGRES_DB": "tacticalrmm",
                "POSTGRES_USER": "postgres",
                "POSTGRES_PASSWORD": "postgrespass",
                "POSTGRES_HOST": "tactical-postgres",
                "POSTGRES_PORT": "5432",
                "REDIS_HOST": "tactical-redis",
                "SMTP_HOST": "smtp.example.com",
                "SMTP_PORT": "587",
                "SMTP_FROM": "mesh@example.com",
                "SMTP_USER": "mesh@example.com",
                "SMTP_PASS": "mesh-smtp-pass",
                "SMTP_TLS": "false",
                "TRMM_USER": "tactical",
                "TRMM_PASS": "tactical",
                "TACTICAL_BACKEND_PORT": "8000",
                "TRMM_PROTO": "http",
                "TRMM_DISABLE_WEB_TERMINAL": "False",
                "TRMM_DISABLE_SERVER_SCRIPTS": "False",
                "TRMM_DISABLE_SSO": "False",
                "TRMM_DISABLE_2FA": "True",
                "NODE_ENV": "development",
                "WS_PROTO": "ws",
                "WS_MASK_OVERRIDE": "1",
                "TACTICAL_DIR": "/opt/tactical",
                "TACTICAL_TMP_DIR": "/tmp/tactical",
                "API_HOST": "tactical-backend:8000",
                "API_LOCALHOST_HOST": "localhost:8000",
                "APP_HOST": "tactical-frontend:8080",
                "APP_LOCALHOST_HOST": "localhost:8080",
                "NATS_CONFIG": "/opt/tactical/nats-rmm.conf",
                "NATS_API_CONFIG": "/opt/tactical/nats-api.conf",
                "NATS_CONFIG_CHECK_INTERVAL": "5",
                "NATS_STD_BIND_HOST": "tactical-nats",
                "NATS_WS_BIND_HOST": "tactical-nats",
                "NATS_CONNECT_HOST": "tactical-nats",
                "NATS_STANDARD_PORT": "9235",
                "NATS_WEBSOCKET_PORT": "4222",
                "WEBSOCKET_PORT": "8383",
                "WEBSOCKETS_BIND_HOST": "tactical-websockets"
              }
            },
            {
              "name": "tactical-websockets",
              "type": ["container"],
              "path": "./integrated-tools/tactical-rmm/tactical-base",
              "manifest_path": "./manifests/integrated-tools/tactical-rmm",
              "context": "./integrated-tools/tactical-rmm",
              "build_args": {
                "POSTGRES_DB": "tacticalrmm",
                "POSTGRES_USER": "postgres",
                "POSTGRES_PASSWORD": "postgrespass",
                "POSTGRES_HOST": "tactical-postgres",
                "POSTGRES_PORT": "5432",
                "REDIS_HOST": "tactical-redis",
                "SMTP_HOST": "smtp.example.com",
                "SMTP_PORT": "587",
                "SMTP_FROM": "mesh@example.com",
                "SMTP_USER": "mesh@example.com",
                "SMTP_PASS": "mesh-smtp-pass",
                "SMTP_TLS": "false",
                "TRMM_USER": "tactical",
                "TRMM_PASS": "tactical",
                "TACTICAL_BACKEND_PORT": "8000",
                "TRMM_PROTO": "http",
                "TRMM_DISABLE_WEB_TERMINAL": "False",
                "TRMM_DISABLE_SERVER_SCRIPTS": "False",
                "TRMM_DISABLE_SSO": "False",
                "TRMM_DISABLE_2FA": "True",
                "NODE_ENV": "development",
                "WS_PROTO": "ws",
                "WS_MASK_OVERRIDE": "1",
                "TACTICAL_DIR": "/opt/tactical",
                "TACTICAL_TMP_DIR": "/tmp/tactical",
                "API_HOST": "tactical-backend:8000",
                "API_LOCALHOST_HOST": "localhost:8000",
                "APP_HOST": "tactical-frontend:8080",
                "APP_LOCALHOST_HOST": "localhost:8080",
                "NATS_CONFIG": "/opt/tactical/nats-rmm.conf",
                "NATS_API_CONFIG": "/opt/tactical/nats-api.conf",
                "NATS_CONFIG_CHECK_INTERVAL": "5",
                "NATS_STD_BIND_HOST": "tactical-nats",
                "NATS_WS_BIND_HOST": "tactical-nats",
                "NATS_CONNECT_HOST": "tactical-nats",
                "NATS_STANDARD_PORT": "9235",
                "NATS_WEBSOCKET_PORT": "4222",
                "WEBSOCKET_PORT": "8383",
                "WEBSOCKETS_BIND_HOST": "tactical-websockets"
              }
            },
            {
              "name": "tactical-celery",
              "type": ["container"],
              "path": "./integrated-tools/tactical-rmm/tactical-base",
              "manifest_path": "./manifests/integrated-tools/tactical-rmm",
              "context": "./integrated-tools/tactical-rmm",
              "build_args": {
                "POSTGRES_DB": "tacticalrmm",
                "POSTGRES_USER": "postgres",
                "POSTGRES_PASSWORD": "postgrespass",
                "POSTGRES_HOST": "tactical-postgres",
                "POSTGRES_PORT": "5432",
                "REDIS_HOST": "tactical-redis",
                "SMTP_HOST": "smtp.example.com",
                "SMTP_PORT": "587",
                "SMTP_FROM": "mesh@example.com",
                "SMTP_USER": "mesh@example.com",
                "SMTP_PASS": "mesh-smtp-pass",
                "SMTP_TLS": "false",
                "TRMM_USER": "tactical",
                "TRMM_PASS": "tactical",
                "TACTICAL_BACKEND_PORT": "8000",
                "TRMM_PROTO": "http",
                "TRMM_DISABLE_WEB_TERMINAL": "False",
                "TRMM_DISABLE_SERVER_SCRIPTS": "False",
                "TRMM_DISABLE_SSO": "False",
                "TRMM_DISABLE_2FA": "True",
                "NODE_ENV": "development",
                "WS_PROTO": "ws",
                "WS_MASK_OVERRIDE": "1",
                "TACTICAL_DIR": "/opt/tactical",
                "TACTICAL_TMP_DIR": "/tmp/tactical",
                "API_HOST": "tactical-backend:8000",
                "API_LOCALHOST_HOST": "localhost:8000",
                "APP_HOST": "tactical-frontend:8080",
                "APP_LOCALHOST_HOST": "localhost:8080",
                "NATS_CONFIG": "/opt/tactical/nats-rmm.conf",
                "NATS_API_CONFIG": "/opt/tactical/nats-api.conf",
                "NATS_CONFIG_CHECK_INTERVAL": "5",
                "NATS_STD_BIND_HOST": "tactical-nats",
                "NATS_WS_BIND_HOST": "tactical-nats",
                "NATS_CONNECT_HOST": "tactical-nats",
                "NATS_STANDARD_PORT": "9235",
                "NATS_WEBSOCKET_PORT": "4222",
                "WEBSOCKET_PORT": "8383",
                "WEBSOCKETS_BIND_HOST": "tactical-websockets"
              }
            },
            {
              "name": "tactical-celerybeat",
              "type": ["container"],
              "path": "./integrated-tools/tactical-rmm/tactical-base",
              "manifest_path": "./manifests/integrated-tools/tactical-rmm",
              "context": "./integrated-tools/tactical-rmm",
              "build_args": {
                "POSTGRES_DB": "tacticalrmm",
                "POSTGRES_USER": "postgres",
                "POSTGRES_PASSWORD": "postgrespass",
                "POSTGRES_HOST": "tactical-postgres",
                "POSTGRES_PORT": "5432",
                "REDIS_HOST": "tactical-redis",
                "SMTP_HOST": "smtp.example.com",
                "SMTP_PORT": "587",
                "SMTP_FROM": "mesh@example.com",
                "SMTP_USER": "mesh@example.com",
                "SMTP_PASS": "mesh-smtp-pass",
                "SMTP_TLS": "false",
                "TRMM_USER": "tactical",
                "TRMM_PASS": "tactical",
                "TACTICAL_BACKEND_PORT": "8000",
                "TRMM_PROTO": "http",
                "TRMM_DISABLE_WEB_TERMINAL": "False",
                "TRMM_DISABLE_SERVER_SCRIPTS": "False",
                "TRMM_DISABLE_SSO": "False",
                "TRMM_DISABLE_2FA": "True",
                "NODE_ENV": "development",
                "WS_PROTO": "ws",
                "WS_MASK_OVERRIDE": "1",
                "TACTICAL_DIR": "/opt/tactical",
                "TACTICAL_TMP_DIR": "/tmp/tactical",
                "API_HOST": "tactical-backend:8000",
                "API_LOCALHOST_HOST": "localhost:8000",
                "APP_HOST": "tactical-frontend:8080",
                "APP_LOCALHOST_HOST": "localhost:8080",
                "NATS_CONFIG": "/opt/tactical/nats-rmm.conf",
                "NATS_API_CONFIG": "/opt/tactical/nats-api.conf",
                "NATS_CONFIG_CHECK_INTERVAL": "5",
                "NATS_STD_BIND_HOST": "tactical-nats",
                "NATS_WS_BIND_HOST": "tactical-nats",
                "NATS_CONNECT_HOST": "tactical-nats",
                "NATS_STANDARD_PORT": "9235",
                "NATS_WEBSOCKET_PORT": "4222",
                "WEBSOCKET_PORT": "8383",
                "WEBSOCKETS_BIND_HOST": "tactical-websockets"
              }
            }
          ]'

          # Write the matrix to the output
          {
            echo 'matrix<<EOF'
            echo "$matrix_json"
            echo EOF
          } >> $GITHUB_OUTPUT

      - name: Filter Java Projects
        id: filter
        run: |
          {
            echo 'matrix_java<<EOF'
            echo '${{ steps.matrix.outputs.matrix }}' | jq '[.[] | select(.type | any(. == "java"))]'
            echo EOF
          } >> "$GITHUB_OUTPUT"
          {
            echo 'matrix<<EOF'
            echo '${{ steps.matrix.outputs.matrix }}' | jq '[.[] | select(.type | any(. == "container"))]'
            echo EOF
          } >> "$GITHUB_OUTPUT"
