name: OpenFrame Integration Tests

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write
  attestations: write
  id-token: write

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]
    paths:
      - 'openframe/**'
      - 'integrated-tools/**'
      - 'pom.xml'
      - '.github/workflows/**'
      - 'manifests/**'
      - 'scripts/**'

env:
  ORGANIZATION: flamingo-cx
  REGISTRY: ghcr.io

jobs:

  changes:
    name: Changes
    uses: ./.github/workflows/changes.yml
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft


  matrix:
    name: Matrix
    uses: ./.github/workflows/matrix.yml
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft


  build_java:
    name: "Build Java: ${{ matrix.name }}"
    needs: [changes, matrix]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix_java) }}
    steps:
      - name: Checkout
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Set up Maven Central Repository with JDK 21
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          cache-dependency-path: |
            ${{ matrix.path }}/pom.xml
            **/pom.xml
          check-latest: true

      - name: Cache Maven packages
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ${{ matrix.path }}/target
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        if: contains(needs.changes.outputs[matrix.name], 'true')
        run: mvn clean install -pl ${{ matrix.path }} -am -Dcompress

      - name: Upload Java artifacts
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: |
            ${{ matrix.path }}/target/*.jar
            !${{ matrix.path }}/target/original-*.jar
            !${{ matrix.path }}/target/*-sources.jar
            !${{ matrix.path }}/target/*-javadoc.jar
          retention-days: 1


  build:
    name: "Build image: ${{ matrix.name }}"
    needs: [build_java, matrix, changes]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - name: Checkout
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Download Java artifacts
        if: contains(fromJSON(toJSON(matrix.type)), 'java') && matrix.artifact_name != '' && contains(needs.changes.outputs[matrix.name], 'true')
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.artifact_name }}
          path: ${{ matrix.path }}/target

      - name: Log in to GitHub Container Registry
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up QEMU
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}

      - name: Set up Docker Buildx
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/setup-buildx-action@v3

      - name: Generate metadata
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-${{ matrix.name }}
          tags: |
            type=ref,event=tag
            type=raw,value=test-${{ needs.changes.outputs.commit_sha }}
          labels: |
            org.opencontainers.image.vendor=FlamingoCX
            org.opencontainers.image.description=OpenFrame is a platform for building and deploying AI agents.
            org.opencontainers.image.licenses=Creative Commons Attribution-NonCommercial 4.0 International (CC BY-NC 4.0)

      - name: Format build arguments
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: format_args
        uses: ./.github/actions/format-build-args
        with:
          build_args: ${{ toJSON(matrix.build_args) }}
        env:
          BUILD_ARGS: ${{ steps.format_args.outputs.formatted_args }}

      - name: Build and push image
        if: contains(needs.changes.outputs[matrix.name], 'true')
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.context || matrix.path }}
          file: ${{ matrix.path }}/Dockerfile
          platforms: ${{ matrix.name == 'fleetmdm' && 'linux/amd64' || 'linux/amd64,linux/arm64' }}
          push: true
          provenance: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ${{ env.BUILD_ARGS }}
  

  pre-test:
    name: Test Branch Creation
    needs: [changes, matrix]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    outputs:
      GITHUB_HEAD_REF_CI: ${{ steps.create_branch.outputs.GITHUB_HEAD_REF_CI }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Checkout new CI branch
        id: create_branch
        env:
          GITHUB_HEAD_REF_CI: ${{ github.head_ref }}-CI
        run: |
          git config --global user.email "CI@flamingo.cx"
          git config --global user.name "CI Account"
          git checkout -b "${GITHUB_HEAD_REF_CI}"
          git push origin "${GITHUB_HEAD_REF_CI}" --force
          echo "GITHUB_HEAD_REF_CI=${GITHUB_HEAD_REF_CI}" >> $GITHUB_OUTPUT

      - name: Change branch tags
        env:
          MATRIX: ${{ needs.matrix.outputs.matrix }}
          CHANGES: ${{ toJSON(needs.changes.outputs) }}
          COMMIT_SHA: test-${{ needs.changes.outputs.commit_sha }}
        run: |
          jq -c '.[]' <<< "$MATRIX" | while read -r item; do
            name=$(jq -r '.name' <<< "$item")
            path=$(jq -r '.manifest_path' <<< "$item")
            pushed=$(jq -r --arg name "$name" '.[$name]' <<< "$CHANGES")

            [ "$pushed" = "true" ] || continue

            echo "$name â†’ $REGISTRY/${ORGANIZATION}/openframe-${name}:${COMMIT_SHA}"
            cd "$path"
            kustomize edit set image "openframe-${name}=${REGISTRY}/${ORGANIZATION}/openframe-${name}:${COMMIT_SHA}"
            cd - > /dev/null
          done

      - name: Change branch targetRevision paths
        env:
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_HEAD_REF_CI: ${{ steps.create_branch.outputs.GITHUB_HEAD_REF_CI }}
        run: |
          find . -type f -name '*.yaml' -not -path '*/.git/*' -print0 | while IFS= read -r -d '' f; do
            sed -i "s|${GITHUB_HEAD_REF}|${GITHUB_HEAD_REF_CI}|g" "$f"
          done

      - name: Commit changes
        env:
          GITHUB_HEAD_REF_CI: ${{ steps.create_branch.outputs.GITHUB_HEAD_REF_CI }}
        run: |
          git add .
          git commit -m "Tags and targeRevision changes [skip ci]" || echo "No changes"
          git push origin "${GITHUB_HEAD_REF_CI}" --force
    

  test:
    name: Run Tests
    needs: [pre-test, build]
    runs-on: Linux-x64
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.pre-test.outputs.GITHUB_HEAD_REF_CI }}
      
      - name: Install certutil (NSS tools)
        run: |
          if ! command -v certutil &> /dev/null; then
            sudo apt-get update -yqq && sudo apt-get install -yqq libnss3-tools
          fi
          echo "certutil version: $(certutil --version)"

      - name: Install Helm
        run: |
          curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash -s -- --version v3.17.3
          echo "Helm version: $(helm version --short)"

      - name: Install ArgoCD
        run: |
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 
          sudo chmod +x argocd && sudo mv argocd /usr/local/bin/
          echo "ArgoCD version: $(argocd version)"
      
      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=v5.8.3 bash
          echo "k3d version: $(k3d version)"

      - name: Set inotify limit
        run: sudo sysctl fs.inotify.max_user_instances=1500

      - name: Run environment test script
        env:
          TERM: dumb
        run: |
          exit 1 
  

  post-test:
    name: Remove the CI branch
    needs: [changes, matrix, pre-test, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft && always()
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}

      - name: Delete CI branch
        env:
          GITHUB_HEAD_REF_CI: ${{ needs.pre-test.outputs.GITHUB_HEAD_REF_CI }}
        run: |
          git push origin --delete "${GITHUB_HEAD_REF_CI}" || true
  

  cleanup:
    name: "Cleanup ${{ matrix.name }}"
    needs: [changes, matrix, post-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && !github.event.pull_request.draft && always()
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.matrix.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
        if: contains(needs.changes.outputs[matrix.name], 'true')

      - name: Login to GitHub Registry
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
      
      - name: Delete the CI tag
        if: contains(needs.changes.outputs[matrix.name], 'true')
        uses: dataaxiom/ghcr-cleanup-action@v1
        continue-on-error: true
        with:
          package: openframe-${{ matrix.name }}
          delete-ghost-images: true
          delete-tags: test-${{ needs.changes.outputs.commit_sha }}
          exclude-tags: latest
