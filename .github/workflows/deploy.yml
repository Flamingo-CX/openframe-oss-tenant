name: OpenFrame Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  ORGANIZATION: ${{ github.repository_owner }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Set up environment
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build and push infrastructure images
        run: |
          # Build and push MongoDB
          docker build -t ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-mongodb:${{ github.sha }} ./infrastructure/mongodb/
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-mongodb:${{ github.sha }}
          
          # Build and push Cassandra
          docker build -t ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-cassandra:${{ github.sha }} ./infrastructure/cassandra/
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-cassandra:${{ github.sha }}
          
          # Build and push NiFi
          docker build -t ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-nifi:${{ github.sha }} ./infrastructure/nifi/
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-nifi:${{ github.sha }}
          
          # Build and push Config Server
          docker build -t ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-config:${{ github.sha }} ./services/openframe-config/
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-config:${{ github.sha }}
          
          # Build and push API Service
          docker build -t ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-api:${{ github.sha }} ./services/openframe-api/
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-api:${{ github.sha }}
          
          # Build and push Management Service
          docker build -t ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-management:${{ github.sha }} ./services/openframe-management/
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-management:${{ github.sha }}
          
          # Tag all images with 'latest' for convenience
          docker tag ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-mongodb:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-mongodb:latest
          docker tag ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-cassandra:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-cassandra:latest
          docker tag ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-nifi:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-nifi:latest
          docker tag ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-config:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-config:latest
          docker tag ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-api:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-api:latest
          docker tag ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-management:${{ github.sha }} ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-management:latest
          
          # Push latest tags
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-mongodb:latest
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-cassandra:latest
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-nifi:latest
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-config:latest
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-api:latest
          docker push ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-management:latest

      - name: Create Docker network
        run: docker network create openframe-network --label com.docker.compose.network=openframe-network || true

      - name: Deploy infrastructure services
        run: |
          # Update image references in docker-compose files
          sed -i "s|build:|image: ${{ env.REGISTRY }}/${{ env.ORGANIZATION }}/openframe-|g" docker-compose.openframe-infrastructure.yml
          
          # Deploy infrastructure services
          docker-compose -f docker-compose.openframe-infrastructure.yml up -d
          
          # Wait for infrastructure services to be ready
          echo "Waiting for MongoDB to be ready..."
          timeout 300 bash -c 'until docker exec openframe-mongodb mongosh --eval "db.adminCommand(\"ping\")" > /dev/null 2>&1; do sleep 2; done'
          
          echo "Waiting for Cassandra to be ready..."
          timeout 300 bash -c 'until docker exec openframe-cassandra cqlsh -e "describe keyspaces" > /dev/null 2>&1; do sleep 2; done'
          
          echo "Waiting for Kafka to be ready..."
          timeout 300 bash -c 'until docker exec openframe-kafka kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1; do sleep 2; done'
          
          # Initialize Cassandra
          echo "Initializing Cassandra..."
          docker exec openframe-cassandra cqlsh -f /docker-entrypoint-initdb.d/cassandra-init.cql
          
          echo "Waiting for Redis to be ready..."
          timeout 300 bash -c 'until docker exec openframe-redis redis-cli ping > /dev/null 2>&1; do sleep 2; done'
          
          echo "Waiting for Zookeeper to be ready..."
          timeout 300 bash -c 'until docker exec openframe-zookeeper bash -c "echo ruok | nc localhost 2181 | grep imok" > /dev/null 2>&1; do sleep 2; done'
          
          echo "Waiting for NiFi to be ready..."
          timeout 300 bash -c 'until curl -sk https://localhost:8443/nifi-api/system-diagnostics > /dev/null 2>&1; do sleep 2; done'
          
          echo "Waiting for Config Server to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8888/xml/shared-logback-spring.xml > /dev/null 2>&1; do sleep 2; done'
          
          echo "Infrastructure services deployed and ready"
