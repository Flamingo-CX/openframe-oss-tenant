name: OpenFrame CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

env:
  ORGANIZATION: flamingo-cx
  TIMESTAMP: ${{ github.event.repository.updated_at }}
  COMMIT_SHA: ${{ github.sha }}

permissions:
  contents: write
  packages: write
  actions: write
  pull-requests: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Upload artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: java-artifacts
          path: |
            **/target/*.jar
            !**/target/original-*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
          compression-level: 9
          retention-days: 1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker environment
        run: |
          # Clean up disk space
          docker system prune -af
          df -h
          
          # Set up buildx for better caching
          docker buildx create --use
          docker buildx inspect --bootstrap

      - name: Download artifacts
        if: github.ref == 'refs/heads/main'
        uses: actions/download-artifact@v4
        with:
          name: java-artifacts

      - name: Create target directories and copy JAR files
        run: |
          # Create target directories
          for dir in $(find . -name "pom.xml" -exec dirname {} \;); do
            mkdir -p "$dir/target"
          done

          # Copy JAR files to their respective target directories
          find . -name "*.jar" -exec sh -c '
            for jar in "$1"; do
              dir=$(dirname "$jar")
              base=$(basename "$jar")
              if [[ $dir == ./* ]]; then
                dir="${dir#./}"
              fi
              target_dir=$(dirname "$dir")
              mkdir -p "$target_dir/target"
              mv "$jar" "$target_dir/target/$base"
            done
          ' sh {} \;

      - name: Build infrastructure images
        run: |
          # Create Docker network
          docker network create openframe-network --label com.docker.compose.network=openframe-network || true
          
          # Build infrastructure images with buildx
          for service in mongodb cassandra nifi config api management ui stream gateway; do
            if [ -d "infrastructure/$service" ]; then
              build_context="infrastructure/$service"
              dockerfile="$build_context/Dockerfile"
            elif [ -d "services/openframe-$service" ]; then
              build_context="services/openframe-$service"
              dockerfile="$build_context/Dockerfile"
            fi
            
            echo "Building $service image..."
            if ! DOCKER_BUILDKIT=1 docker buildx build \
              --load \
              -t "openframe-$service:latest" \
              -f "$dockerfile" \
              --cache-from "type=local,src=/tmp/.buildx-cache" \
              --cache-to "type=local,dest=/tmp/.buildx-cache" \
              "$build_context"; then
              echo "Error: Failed to build $service image"
              exit 1
            fi
          done

      - name: Deploy infrastructure services
        run: |
          docker compose -f docker-compose.openframe-infrastructure.yml up -d

      - name: Deploy Tactical RMM
        run: |
          docker compose -f docker-compose.openframe-tactical-rmm.yml up -d

      - name: Deploy Fleet MDM
        run: |
          docker compose -f docker-compose.openframe-fleet-mdm.yml up -d

      - name: Deploy Authentik
        run: |
          docker compose -f docker-compose.openframe-authentik.yml up -d

      - name: Register tools with OpenFrame API
        run: |
          echo "Registering tools with OpenFrame API..."
          # Add tool registration logic here

      - name: Verify deployment
        run: |
          ./scripts/test-public-endpoints.sh

      - name: Cleanup images and artifacts
        if: always()
        run: |
          echo "Cleaning up Docker images..."
          docker system prune -af
          
          echo "Cleaning up build artifacts..."
          find . -type f -name "*.jar" -delete
          find . -type d -name "target" -exec rm -rf {} +

      - name: Cleanup on failure
        if: failure()
        run: |
          echo "Deployment failed, cleaning up services..."
          docker compose -f docker-compose.openframe-infrastructure.yml down
          docker compose -f docker-compose.openframe-tactical-rmm.yml down
          docker compose -f docker-compose.openframe-fleet-mdm.yml down
          docker compose -f docker-compose.openframe-authentik.yml down
          
          # Clean up any remaining images
          echo "Cleaning up remaining Docker images..."
          docker system prune -af
          
          echo "Cleanup completed"
