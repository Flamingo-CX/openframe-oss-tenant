name: OpenFrame CI/CD

permissions:
  contents: write
  packages: write
  actions: write

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  ORGANIZATION: flamingo-cx

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'
          
      - name: Clean up all artifacts and GHCR packages
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Starting artifact and package cleanup..."
          
          # Function to get total artifact count and size
          get_artifact_stats() {
            local stats=$(gh api "repos/${{ github.repository }}/actions/artifacts" | jq -r '[.total_count, (.artifacts | map(.size_in_bytes) | add // 0)] | @csv')
            echo "Current artifact stats: $(echo $stats | cut -d',' -f1) artifacts, $(echo $stats | cut -d',' -f2 | numfmt --to=iec) total size"
          }

          # Function to clean up GHCR packages
          cleanup_ghcr_packages() {
            local package_name=$1
            local dry_run=${2:-false}
            echo "Cleaning up old versions of $package_name (dry-run: $dry_run)..."
            
            # List all versions
            local versions=$(gh api \
              -H "Accept: application/vnd.github+json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "/orgs/${ORGANIZATION,,}/packages/container/$package_name/versions" \
              --paginate)
            
            # Get current SHA
            local current_sha=$(git rev-parse --short HEAD)
            
            # Process each version
            echo "$versions" | jq -r '.[] | select(.metadata.container.tags[] | . != "latest" and . != "'$current_sha'") | .id' | while read -r version_id; do
              if [[ "$dry_run" == "true" ]]; then
                echo "Would delete version $version_id"
              else
                echo "Deleting version $version_id..."
                gh api \
                  -X DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/orgs/${ORGANIZATION,,}/packages/container/$package_name/versions/$version_id" || true
              fi
              
              # Rate limit protection
              sleep 1
            done
          }
          
          # Clean up each package
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            for service in mongodb cassandra nifi config api management stream gateway ui; do
              cleanup_ghcr_packages "openframe-$service"
            done
          fi
          
          get_artifact_stats
          
          # Delete all artifacts
          echo "Deleting all artifacts..."
          page=1
          deleted_count=0
          failed_count=0
          
          while true; do
            artifacts=$(gh api "repos/${{ github.repository }}/actions/artifacts?page=$page&per_page=100")
            if [ $? -ne 0 ]; then
              echo "Error fetching artifacts page $page"
              exit 1
            fi
            
            count=$(echo "$artifacts" | jq '.total_count')
            if [ "$count" -eq 0 ]; then
              break
            fi
            
            while read -r artifact_id name created_at size; do
              size_human=$(echo "$size" | numfmt --to=iec)
              echo "Attempting to delete artifact $artifact_id ($name) from $created_at, size: $size_human"
              if gh api -X DELETE "repos/${{ github.repository }}/actions/artifacts/$artifact_id"; then
                echo "Successfully deleted artifact $artifact_id"
                deleted_count=$((deleted_count + 1))
              else
                echo "Failed to delete artifact $artifact_id"
                failed_count=$((failed_count + 1))
              fi
              # Small delay to avoid rate limiting
              sleep 1
            done < <(echo "$artifacts" | jq -r '.artifacts[] | "\(.id) \(.name) \(.created_at) \(.size_in_bytes)"')
            
            # Check if we've processed all pages
            total_pages=$(echo "$artifacts" | jq '.total_count / 100 | ceil')
            if [ "$page" -ge "$total_pages" ]; then
              break
            fi
            page=$((page + 1))
          done
          
          echo "Cleanup summary:"
          echo "- Deleted: $deleted_count artifacts"
          echo "- Failed: $failed_count artifacts"
          
          echo "Final artifact stats:"
          get_artifact_stats

      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      # Cache build artifacts for all Java services
      - name: Cache Java artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/target/*.jar
            !**/target/original-*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
          key: ${{ runner.os }}-java-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-java-

  deploy:
    needs: build
    if: github.event_name == 'workflow_dispatch' || github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'development' }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          

      - name: Set up Docker
        run: |
          # Enable BuildKit
          echo '{"features":{"buildkit":true}}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker
          
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
        
      - name: Set up Docker Compose
        run: |
          # Docker Compose is already installed as a Docker CLI plugin in GitHub Actions runners
          docker compose version
          # Create Docker network
          docker network create openframe-network --label com.docker.compose.network=openframe-network || true
        
      - name: Set up environment
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
          echo "COMMIT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
          
      # No need to log in to registry when using local images
          
      # Restore cached Java artifacts
      - name: Restore Java artifacts
        uses: actions/cache@v3
        with:
          path: |
            **/target/*.jar
            !**/target/original-*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
          key: ${{ runner.os }}-java-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-java-

      # Create target directories and copy JAR files
      - name: Create target directories and copy JAR files
        run: |
          # Create target directories
          for dir in $(find . -type f -name "Dockerfile" -exec dirname {} \;); do
            mkdir -p "$dir/target"
          done

          # Copy JAR files for Java services
          for service in api config gateway management stream core data; do
            echo "Setting up $service..."
            find . -path "**/target/*.jar" \
              ! -name "original-*.jar" \
              ! -name "*-sources.jar" \
              ! -name "*-javadoc.jar" \
              -exec cp {} ./**/openframe-$service/target/ \;
            
            echo "Contents of $service target directory:"
            ls -la ./**/openframe-$service/target/
          done

      - name: Build infrastructure images
        run: |
          # Function to clean up old images
          cleanup_images() {
            echo "Cleaning up old images..."
            # List all images and their IDs
            docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | while read img id; do
              # Check if it's our image and not the current build
              if [[ $img == "openframe-"* ]] && \
                 [[ $img != *":${{ github.sha }}" ]] && \
                 [[ $img != *":latest" ]]; then
                echo "Removing old image: $img (ID: $id)"
                docker rmi --force $id || true
              fi
            done
            
            # Also remove any dangling images
            echo "Cleaning up dangling images..."
            docker image prune --force
          }

          # Clean up old images before building
          cleanup_images

          # Function to build an image
          build_image() {
            local service=$1
            local path=$2
            echo "Building $service from $path"
            
            # Verify target directory for Java services
            if [[ "$service" =~ ^(api|config|gateway|management|stream|core|data)$ ]]; then
              echo "Java service detected, verifying target directory..."
              echo "Contents of $path/target:"
              ls -la "$path/target"
              
              if [ ! -f "$path/target"/*.jar ]; then
                echo "Error: No JAR files found in $path/target"
                exit 1
              fi
            fi
            
            docker build \
              --cache-from type=local,src=/tmp/.buildx-cache \
              --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
              --build-arg BUILDKIT_CONTEXT_KEEP_GIT_DIR=1 \
              -t openframe-$service:${{ github.sha }} \
              -t openframe-$service:latest \
              -f $path/Dockerfile \
              $path
            
            # Move cache to prevent unbounded cache growth
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          }

          # Infrastructure Services
          build_image "mongodb" "./infrastructure/mongodb/"
          build_image "cassandra" "./infrastructure/cassandra/"
          build_image "nifi" "./infrastructure/nifi/"
          build_image "postgresql" "./infrastructure/postgresql/"
          
          # Tactical RMM Components
          build_image "tactical-base" "./infrastructure/tactical-rmm/tactical-base/"
          build_image "tactical-frontend" "./infrastructure/tactical-rmm/tactical-frontend/"
          build_image "tactical-meshcentral" "./infrastructure/tactical-rmm/tactical-meshcentral/"
          build_image "tactical-nginx" "./infrastructure/tactical-rmm/tactical-nginx/"
          
          # Fleet MDM
          build_image "fleetmdm" "./infrastructure/fleetmdm/"
          
          # Core Libraries
          build_image "core" "./libs/openframe-core/"
          build_image "data" "./libs/openframe-data/"
          
          # Services
          build_image "api" "./services/openframe-api/"
          build_image "config" "./services/openframe-config/"
          build_image "gateway" "./services/openframe-gateway/"
          build_image "management" "./services/openframe-management/"
          build_image "stream" "./services/openframe-stream/"
          build_image "ui" "./services/openframe-ui/"

          # Clean up old images after all builds
          echo "Cleaning up old images..."
          for img in $(docker images --filter "reference=openframe-*" --format "{{.Repository}}:{{.Tag}}"); do
            if [[ $img != *":${{ github.sha }}" && $img != *":latest" ]]; then
              echo "Removing old image: $img"
              docker rmi $img || true
            fi
          done



      - name: Deploy infrastructure services
        env:
          MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          MONGO_APP_DATABASE: openframe
          MONGO_APP_USERNAME: ${{ secrets.MONGODB_USERNAME }}
          MONGO_APP_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          CASSANDRA_USERNAME: ${{ secrets.CASSANDRA_USERNAME }}
          CASSANDRA_PASSWORD: ${{ secrets.CASSANDRA_PASSWORD }}
        run: |
          # Update image references in docker-compose files
          yq eval '.services.* |= with(select(has("build")); . + {"image": "openframe-" + (key | downcase)} - "build")' docker-compose.openframe-infrastructure.yml > /tmp/modified-compose.yml && \
          mv /tmp/modified-compose.yml docker-compose.openframe-infrastructure.yml
          
          # Deploy infrastructure services
          docker compose -f docker-compose.openframe-infrastructure.yml up -d
          
          # Wait for infrastructure services to be ready
          echo "Waiting for MongoDB to be ready..."
          MONGO_USER="${{ secrets.MONGODB_USERNAME }}"
          MONGO_PASS="${{ secrets.MONGODB_PASSWORD }}"
          timeout 300 bash -c "until docker exec openframe-mongodb mongosh -u \"${MONGO_USER}\" -p \"${MONGO_PASS}\" --eval \"db.adminCommand('ping')\" > /dev/null 2>&1; do sleep 2; done"
          
          echo "Waiting for Cassandra to be ready..."
          timeout 300 bash -c 'until docker exec openframe-cassandra cqlsh -e "describe keyspaces" > /dev/null 2>&1; do sleep 2; done'
          
          echo "Waiting for Kafka to be ready..."
          timeout 300 bash -c 'until docker exec openframe-kafka kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1; do sleep 2; done'
          
          # Initialize Cassandra
          echo "Initializing Cassandra..."
          CASS_USER="${{ secrets.CASSANDRA_USERNAME }}"
          CASS_PASS="${{ secrets.CASSANDRA_PASSWORD }}"
          docker exec openframe-cassandra cqlsh \
            -u "${CASS_USER}" \
            -p "${CASS_PASS}" \
            -f /docker-entrypoint-initdb.d/cassandra-init.cql
          
          echo "Waiting for Redis to be ready..."
          REDIS_PASS="${{ secrets.REDIS_PASSWORD }}"
          timeout 300 bash -c "until docker exec openframe-redis redis-cli -a \"${REDIS_PASS}\" ping > /dev/null 2>&1; do sleep 2; done"
          
          echo "Waiting for Zookeeper to be ready..."
          timeout 300 bash -c 'until docker exec openframe-zookeeper bash -c "echo ruok | nc localhost 2181 | grep imok" > /dev/null 2>&1; do sleep 2; done'
          
          echo "Waiting for NiFi to be ready..."
          timeout 300 bash -c 'until curl -sk https://localhost:8443/nifi-api/system-diagnostics > /dev/null 2>&1; do sleep 2; done'
          
          echo "Waiting for Config Server to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8888/xml/shared-logback-spring.xml > /dev/null 2>&1; do sleep 2; done'
          
          echo "Infrastructure services deployed and ready"

      - name: Deploy Tactical RMM
        run: |
          # Update image references in docker-compose files
          yq eval '.services.* |= with(select(has("build")); . + {"image": "openframe-tactical-" + (key | downcase)} - "build")' docker-compose.openframe-tactical-rmm.yml > /tmp/modified-compose.yml && \
          mv /tmp/modified-compose.yml docker-compose.openframe-tactical-rmm.yml
          
          # Deploy Tactical RMM services
          docker compose -f docker-compose.openframe-tactical-rmm.yml up -d
          
          # Wait for Tactical RMM to be ready
          echo "Waiting for Tactical RMM to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8080/nginx_status > /dev/null 2>&1; do sleep 2; done'
          
      - name: Deploy Fleet MDM
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: fleet
          MYSQL_PASSWORD: ${{ secrets.FLEET_DB_PASSWORD }}
          FLEET_SERVER_PORT: "8070"
          FLEET_SETUP_ADMIN_EMAIL: ${{ secrets.FLEET_ADMIN_EMAIL }}
          FLEET_SETUP_ADMIN_PASSWORD: ${{ secrets.FLEET_ADMIN_PASSWORD }}
        run: |
          # Update image references in docker-compose files
          yq eval '.services.* |= with(select(has("build")); . + {"image": "openframe-fleetmdm"} - "build")' docker-compose.openframe-fleet-mdm.yml > /tmp/modified-compose.yml && \
          mv /tmp/modified-compose.yml docker-compose.openframe-fleet-mdm.yml
          
          # Deploy Fleet MDM services
          docker compose -f docker-compose.openframe-fleet-mdm.yml up -d
          
          # Wait for Fleet to be ready
          echo "Waiting for Fleet MDM to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8070/setup > /dev/null 2>&1; do sleep 2; done'
          
      - name: Deploy Authentik
        run: |
          # Update image references in docker-compose files
          yq eval '.services.* |= with(select(has("build")); . + {"image": "openframe-authentik"} - "build")' docker-compose.openframe-authentik.yml > /tmp/modified-compose.yml && \
          mv /tmp/modified-compose.yml docker-compose.openframe-authentik.yml
          
          # Deploy Authentik services
          docker compose -f docker-compose.openframe-authentik.yml up -d
          
          # Wait for Authentik to be ready
          echo "Waiting for Authentik to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:5001/api/v3/core/applications/ > /dev/null 2>&1; do sleep 2; done'

      - name: Register tools with OpenFrame API
        run: |
          # Wait for API to be ready
          echo "Waiting for OpenFrame API to be ready..."
          timeout 300 bash -c 'until curl -f http://localhost:8095/health > /dev/null 2>&1; do sleep 2; done'
          
          # Get Fleet token
          FLEET_TOKEN=$(docker exec openframe-fleet cat /etc/fleet/api_token.txt)
          if [ -z "$FLEET_TOKEN" ]; then
            FLEET_TOKEN="${{ secrets.FLEET_API_TOKEN }}"
          fi
          
          # Get Tactical RMM API key
          TACTICAL_API_KEY=$(docker exec openframe-tactical-redis redis-cli -a "${{ secrets.REDIS_PASSWORD }}" get tactical_api_key | tr -d '"')
          if [ -z "$TACTICAL_API_KEY" ]; then
            TACTICAL_API_KEY="${{ secrets.TACTICAL_API_KEY }}"
          fi
          
          # Register OpenFrame UI
          curl -X POST "http://localhost:8095/v1/tools/openframe-ui" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "OPENFRAME",
                "name": "OpenFrame UI",
                "description": "OpenFrame User Interface Service",
                "url": "http://openframe-ui",
                "port": 4000,
                "category": "User Interface",
                "platformCategory": "OpenFrame Core",
                "enabled": true,
                "credentials": {},
                "layer": "Interface",
                "layerOrder": 1,
                "layerColor": "#FFB300"
              }
            }'
            
          # Register Fleet MDM
          curl -X POST "http://localhost:8095/v1/tools/fleet" \
            -H "Content-Type: application/json" \
            -d "{
              \"tool\": {
                \"toolType\": \"FLEET\",
                \"name\": \"Fleet MDM\",
                \"description\": \"Fleet Device Management Platform\",
                \"url\": \"http://openframe-fleet\",
                \"port\": 8070,
                \"category\": \"Device Management\",
                \"platformCategory\": \"Integrated Tool\",
                \"enabled\": true,
                \"credentials\": {
                  \"username\": \"${{ secrets.FLEET_ADMIN_EMAIL }}\",
                  \"password\": \"${{ secrets.FLEET_ADMIN_PASSWORD }}\",
                  \"token\": \"$FLEET_TOKEN\"
                },
                \"layer\": \"Integrated Tools\",
                \"layerOrder\": 1,
                \"layerColor\": \"#455A64\"
              }
            }"
            
          # Register Tactical RMM
          curl -X POST "http://localhost:8095/v1/tools/tactical-rmm" \
            -H "Content-Type: application/json" \
            -d "{
              \"tool\": {
                \"toolType\": \"TACTICAL_RMM\",
                \"name\": \"Tactical RMM\",
                \"description\": \"Remote Monitoring and Management Platform\",
                \"url\": \"http://openframe-tactical-backend\",
                \"port\": 8080,
                \"category\": \"Device Management\",
                \"platformCategory\": \"Integrated Tool\",
                \"enabled\": true,
                \"credentials\": {
                  \"username\": \"${{ secrets.TACTICAL_USERNAME }}\",
                  \"password\": \"${{ secrets.TACTICAL_PASSWORD }}\",
                  \"token\": \"$TACTICAL_API_KEY\"
                },
                \"layer\": \"Integrated Tools\",
                \"layerOrder\": 3,
                \"layerColor\": \"#455A64\"
              }
            }"
            
          # Register MongoDB
          curl -X POST "http://localhost:8095/v1/tools/mongodb-primary" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "MONGODB",
                "name": "MongoDB Database",
                "description": "MongoDB NoSQL Database",
                "url": "mongodb://openframe-mongodb",
                "port": 27017,
                "category": "NoSQL Database",
                "platformCategory": "OpenFrame Datasource",
                "enabled": true,
                "credentials": {
                  "username": "${{ secrets.MONGODB_USERNAME }}",
                  "password": "${{ secrets.MONGODB_PASSWORD }}"
                },
                "layer": "Datasource",
                "layerOrder": 1,
                "layerColor": "#616161"
              }
            }'
            
          # Register Cassandra
          curl -X POST "http://localhost:8095/v1/tools/cassandra-primary" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "CASSANDRA",
                "name": "Cassandra Database",
                "description": "Cassandra Distributed Database",
                "url": "cassandra://openframe-cassandra",
                "port": 9042,
                "category": "NoSQL Database",
                "platformCategory": "OpenFrame Datasource",
                "enabled": true,
                "credentials": {},
                "layer": "Datasource",
                "layerOrder": 3,
                "layerColor": "#616161"
              }
            }'
            
          # Register Kafka
          curl -X POST "http://localhost:8095/v1/tools/kafka-primary" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "KAFKA",
                "name": "Kafka Message Broker",
                "description": "Apache Kafka Event Streaming Platform",
                "url": "http://openframe-kafka-ui",
                "port": 8081,
                "category": "Message Broker",
                "platformCategory": "OpenFrame Service",
                "enabled": true,
                "credentials": {},
                "layer": "Streaming",
                "layerOrder": 1,
                "layerColor": "#1E88E5"
              }
            }'
            
          # Register Redis
          curl -X POST "http://localhost:8095/v1/tools/redis-primary" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "REDIS",
                "name": "Redis Cache",
                "description": "Redis In-Memory Cache",
                "url": "redis://openframe-redis",
                "port": 6379,
                "category": "In-Memory Database",
                "platformCategory": "OpenFrame Datasource",
                "enabled": true,
                "credentials": {},
                "layer": "Datasource",
                "layerOrder": 2,
                "layerColor": "#616161"
              }
            }'
            
          # Register Authentik
          curl -X POST "http://localhost:8095/v1/tools/authentik" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "AUTHENTIK",
                "name": "Authentik SSO",
                "description": "Authentik Identity Provider",
                "url": "http://openframe-authentik-server",
                "port": 5001,
                "category": "Identity Provider",
                "platformCategory": "Integrated Tool",
                "enabled": true,
                "credentials": {
                  "username": "${{ secrets.AUTHENTIK_ADMIN_EMAIL }}",
                  "password": "${{ secrets.AUTHENTIK_ADMIN_PASSWORD }}",
                  "token": "${{ secrets.AUTHENTIK_API_TOKEN }}"
                },
                "layer": "Integrated Tools",
                "layerOrder": 2,
                "layerColor": "#455A64"
              }
            }'
            
          # Register NiFi
          curl -X POST "http://localhost:8095/v1/tools/nifi-primary" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "NIFI",
                "name": "Apache NiFi",
                "description": "NiFi Data Integration Platform",
                "url": "https://openframe-nifi",
                "port": 8443,
                "category": "Data Integration",
                "platformCategory": "OpenFrame Service",
                "enabled": true,
                "credentials": {
                  "username": "${{ secrets.NIFI_USERNAME }}",
                  "password": "${{ secrets.NIFI_PASSWORD }}"
                },
                "layer": "Data Integration",
                "layerOrder": 1,
                "layerColor": "#0D47A1"
              }
            }'
            
          # Register Grafana
          curl -X POST "http://localhost:8095/v1/tools/grafana-primary" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "GRAFANA",
                "name": "Grafana",
                "description": "Grafana Monitoring Dashboard",
                "url": "http://openframe-grafana",
                "port": 3000,
                "category": "Monitoring Dashboard",
                "platformCategory": "OpenFrame Service",
                "enabled": true,
                "credentials": {
                  "username": "${{ secrets.GRAFANA_USERNAME }}",
                  "password": "${{ secrets.GRAFANA_PASSWORD }}"
                },
                "layer": "Monitoring",
                "layerOrder": 1,
                "layerColor": "#78909C"
              }
            }'
            
          # Register Prometheus
          curl -X POST "http://localhost:8095/v1/tools/prometheus-primary" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "PROMETHEUS",
                "name": "Prometheus",
                "description": "Prometheus Metrics Database",
                "url": "http://openframe-prometheus",
                "port": 9090,
                "category": "Metrics Database",
                "platformCategory": "OpenFrame Service",
                "enabled": true,
                "credentials": {},
                "layer": "Monitoring",
                "layerOrder": 2,
                "layerColor": "#78909C"
              }
            }'
            
          # Register Loki
          curl -X POST "http://localhost:8095/v1/tools/loki-primary" \
            -H "Content-Type: application/json" \
            -d '{
              "tool": {
                "toolType": "LOKI",
                "name": "Loki",
                "description": "Loki Log Aggregation System",
                "url": "http://openframe-loki",
                "port": 3100,
                "category": "Log Aggregation",
                "platformCategory": "OpenFrame Service",
                "enabled": true,
                "credentials": {},
                "layer": "Monitoring",
                "layerOrder": 3,
                "layerColor": "#78909C"
              }
            }'
            
          echo "All tools registered successfully"

      - name: Verify deployment
        run: |
          # Test network connectivity
          ./scripts/test-network.sh
          
          # Test all public endpoints
          ./scripts/test-public-endpoints.sh
          
          # Check OpenFrame API health (required for tool registration)
          echo "Checking OpenFrame API health..."
          curl -f http://localhost:8095/health || exit 1
          
          echo "All services are healthy"

      # No GHCR package cleanup needed when using local images

      - name: Cleanup images and artifacts
        if: always()
        run: |
          echo "Cleaning up Docker images..."
          # List all images and their IDs
          docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | while read img id; do
            # Check if it's our image and not the current build
            if [[ $img == "openframe-"* ]] && \
               [[ $img != *":${{ github.sha }}" ]] && \
               [[ $img != *":latest" ]]; then
              echo "Removing old image: $img (ID: $id)"
              docker rmi --force $id || true
            fi
          done
          
          # Also remove any dangling images
          echo "Cleaning up dangling images..."
          docker image prune --force
          
          # List remaining images for verification
          echo "Remaining images:"
          docker images --filter "reference=openframe-*"

          echo "Cleaning up build artifacts..."
          find . -type f -name "*.jar" -delete
          find . -type d -name "target" -exec rm -rf {} +

      - name: Cleanup on failure
        if: failure()
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Deployment failed, cleaning up services..."
          docker compose -f docker-compose.openframe-infrastructure.yml down
          docker compose -f docker-compose.openframe-tactical-rmm.yml down
          docker compose -f docker-compose.openframe-fleet-mdm.yml down
          docker compose -f docker-compose.openframe-authentik.yml down

          # Clean up any remaining images
          echo "Cleaning up remaining Docker images..."
          # List all images and their IDs
          docker images --format "{{.Repository}}:{{.Tag}} {{.ID}}" | while read img id; do
            # Check if it's our image and not the current build
            if [[ $img == "openframe-"* ]] && \
               [[ $img != *":${{ github.sha }}" ]] && \
               [[ $img != *":latest" ]]; then
              echo "Removing old image: $img (ID: $id)"
              docker rmi --force $id || true
            fi
          done
          
          # Also remove any dangling images
          echo "Cleaning up dangling images..."
          docker image prune --force
          
          # List remaining images for verification
          echo "Remaining images:"
          docker images --filter "reference=openframe-*"

          # Clean up GHCR packages if not a PR
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            # Function to clean up GHCR packages
            cleanup_ghcr_packages() {
              local package_name=$1
              echo "Cleaning up old versions of $package_name..."
              
              # List all versions
              local versions=$(gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/${ORGANIZATION,,}/packages/container/$package_name/versions" \
                --paginate)
              
              # Get current SHA
              local current_sha=$(git rev-parse --short HEAD)
              
              # Process each version
              echo "$versions" | jq -r '.[] | select(.metadata.container.tags[] | . != "latest" and . != "'$current_sha'") | .id' | while read -r version_id; do
                echo "Deleting version $version_id..."
                gh api \
                  -X DELETE \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "/orgs/${ORGANIZATION,,}/packages/container/$package_name/versions/$version_id" || true
                
                # Rate limit protection
                sleep 1
              done
            }
            
            # Clean up each package
            for service in mongodb cassandra nifi config api management stream gateway ui; do
              cleanup_ghcr_packages "openframe-$service"
            done

            # Verify remaining package versions
            echo "Remaining package versions:"
            for service in mongodb cassandra nifi config api management stream gateway ui; do
              echo "Package: openframe-$service"
              gh api \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "/orgs/${ORGANIZATION,,}/packages/container/openframe-$service/versions" \
                --jq '.[] | select(.metadata.container.tags != null) | .metadata.container.tags[]'
            done
          fi
          echo "Cleanup completed"
