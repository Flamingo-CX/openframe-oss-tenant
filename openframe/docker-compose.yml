services:
  # Databases
  mongodb:
    build:
      context: infrastructure/mongodb/
      dockerfile: Dockerfile
    container_name: openframe-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: openframe
      MONGO_INITDB_ROOT_PASSWORD: password123456789
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./init/mongodb:/docker-entrypoint-initdb.d
    networks:
      - openframe-network

  mongodb-exporter:
    image: bitnami/mongodb-exporter:latest
    container_name: openframe-mongodb_exporter
    environment: 
      MONGODB_URI: mongodb://openframe:password123456789@mongodb:27017/openframe
    ports:
      - "9216:9216"
    depends_on:
      - mongodb
    networks:
      - openframe-network

  cassandra:
    build:
      context: infrastructure/cassandra/
      dockerfile: Dockerfile
    container_name: openframe-cassandra
    ports:
      - "9042:9042"
      - "7199:7199"
      - "9404:9404"
    volumes:
      - cassandra_data:/var/lib/cassandra
      - ./init/cassandra:/docker-entrypoint-initdb.d
      - ./infrastructure/cassandra/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    environment:
      CASSANDRA_CLUSTER_NAME: openframe_cluster
      CASSANDRA_DC: datacenter1
      CASSANDRA_START_RPC: true
      CASSANDRA_NATIVE_TRANSPORT_MAX_THREADS: 128
      CASSANDRA_NATIVE_TRANSPORT_PORT_SSL: 9142
      CASSANDRA_NATIVE_TRANSPORT_MAX_FRAME_SIZE: 256MB
      JVM_OPTS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9404:/opt/jmx_exporter/config.yml
    networks:
      - openframe-network

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: openframe-zookeeper
    ports:
      - "2181:2181"
      - "7070:7070"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      EXTRA_ARGS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=7070:/opt/jmx_exporter/config.yml
    volumes:
      - ./infrastructure/zookeeper/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    networks:
      - openframe-network

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: openframe-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9308:9308"
    volumes:
      - ./infrastructure/kafka/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_OPTS: -javaagent:/opt/jmx_exporter/jmx_prometheus_javaagent.jar=9308:/opt/jmx_exporter/config.yml
    networks:
      - openframe-network

  # NiFi
  nifi:
    image: apache/nifi:1.22.0
    container_name: openframe-nifi
    ports:
      - "8443:8443"
      - "9096:9096"
    environment:
      NIFI_WEB_HTTPS_PORT: 8443
      SINGLE_USER_CREDENTIALS_USERNAME: openframe
      SINGLE_USER_CREDENTIALS_PASSWORD: password123456789
    volumes:
      - nifi_conf:/opt/nifi/nifi-current/conf
      - nifi_content:/opt/nifi/nifi-current/content_repository
      - nifi_database:/opt/nifi/nifi-current/database_repository
      - nifi_flowfile:/opt/nifi/nifi-current/flowfile_repository
      - nifi_provenance:/opt/nifi/nifi-current/provenance_repository
      - nifi_state:/opt/nifi/nifi-current/state
      - ./infrastructure/nifi/jmx_exporter:/opt/jmx_exporter
      - ./monitoring/prometheus/jmx_prometheus_javaagent.jar:/opt/jmx_exporter/jmx_prometheus_javaagent.jar
      - ./infrastructure/nifi/bootsrap.conf:/opt/nifi/nifi-current/conf/bootstrap.conf
    networks:
      - openframe-network

  # Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: openframe-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - openframe-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.0.0
    container_name: openframe-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=openframe
      - GF_SECURITY_ADMIN_PASSWORD=password123456789
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - openframe-network

  # Development Tools
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: openframe-kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    depends_on:
      - kafka
    networks:
      - openframe-network

  mongo-express:
    image: mongo-express:latest
    container_name: openframe-mongo-express
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: openframe
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123456789
      ME_CONFIG_MONGODB_URL: mongodb://openframe:password123456789@mongodb:27017/
    depends_on:
      - mongodb
    networks:
      - openframe-network

  loki:
    image: grafana/loki:3.2.1
    container_name: openframe-loki
    ports:
      - "3100:3100"
    environment:
      - LOKI_SERVER_LOG_LEVEL=debug
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki/loki-config:/etc/loki 
      - loki_data:/loki
      - ./monitoring/loki/:/loki
    networks:
      - openframe-network
    restart: unless-stopped

networks:
  openframe-network:
    name: openframe-network
    driver: bridge
    external: true

volumes:
  loki_data:
  mongodb_data:
  cassandra_data:
  nifi_conf:
  nifi_content:
  nifi_database:
  nifi_flowfile:
  nifi_provenance:
  nifi_state:
  prometheus_data:
  grafana_data: