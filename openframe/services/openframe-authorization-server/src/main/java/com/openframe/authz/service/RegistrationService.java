package com.openframe.authz.service;

import com.openframe.authz.document.Tenant;
import com.openframe.authz.document.User;
import com.openframe.authz.dto.TokenResponse;
import com.openframe.authz.dto.UserRegistrationRequest;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.Base64;
import java.util.Optional;

@Slf4j
@Service
@RequiredArgsConstructor
public class RegistrationService {

    private final UserService userService;
    private final TenantService tenantService;

    public TokenResponse registerUser(UserRegistrationRequest request, String authHeader) {
        // Optional Basic client auth. For SPA best practice it's absent; keep backward compatibility.
        if (authHeader != null && authHeader.startsWith("Basic ")) {
            String base64Credentials = authHeader.substring("Basic ".length()).trim();
            String credentials = new String(Base64.getDecoder().decode(base64Credentials));
            final String[] values = credentials.split(":", 2);
            if (values.length != 2) {
                throw new IllegalArgumentException("Invalid client credentials format");
            }
            final String clientId = values[0];
            // Optionally validate clientId if needed; skipping strict secret checks for SPA
            if (!"openframe-ui".equals(clientId)) {
                throw new IllegalArgumentException("Invalid client");
            }
        }

        // Handle tenant creation or lookup
        Tenant tenant = getOrCreateTenant(request);

        // Check if tenant allows registration
        if (!tenant.canRegister()) {
            throw new IllegalArgumentException("Registration is closed for this organization");
        }

        // Register user with tenant
        User user = userService.registerUser(
                tenant.getId(),
                tenant.getDomain(),
                request.getEmail(),
                request.getFirstName(),
                request.getLastName(),
                request.getPassword()
        );

        tenantService.closeRegistration(tenant.getId());

        // Set user as tenant owner if first user
        if (tenant.getOwnerId() == null) {
            tenant.setOwnerId(user.getId());
            tenantService.save(tenant);
        }

        // Return success response (tokens will be generated by Spring Authorization Server flow)
        return TokenResponse.builder()
                .userId(user.getId())
                .tenantName(tenant.getName())
                .tenantDomain(tenant.getDomain())
                .tokenType("registration_success")
                .build();
    }

    /**
     * Get existing tenant or create new one based on request
     */
    private Tenant getOrCreateTenant(UserRegistrationRequest request) {
        String tenantName = request.getTenantName();

        Optional<Tenant> existingTenant = tenantService.findByName(tenantName);
        return existingTenant.orElseGet(() -> tenantService.createTenant(tenantName, request.getTenantDomain(), null));
    }

}