type Query {
    integratedTools(filter: ToolFilter): [IntegratedTool]!
    events(userId: ID!, from: String!, to: String!): [Event]
    eventById(id: ID!): Event
}

type Mutation {
    createEvent(input: CreateEventInput!): Event
}

type Event {
    id: ID!
    userId: ID!
    timestamp: String!
    type: String!
    data: String
}

input CreateEventInput {
    userId: ID!
    type: String!
    data: String
}

enum ToolUrlType {
    DASHBOARD
    API
    WS
    DATABASE
    CACHE
    BROKER
    COORDINATOR
    CONTROLLER
    SERVER
    METRICS
    LOGS
    INTERNAL
}

enum APIKeyType {
    HEADER
    BEARER_TOKEN
}

type APIKey {
    key: String!
    type: APIKeyType!
    keyName: String
}

type ToolUrl {
    url: String!
    port: String
    type: ToolUrlType!
}

type ToolCredentials {
    username: String
    password: String
    apiKey: APIKey
}

type IntegratedTool {
    id: ID!
    name: String!
    description: String
    icon: String
    toolUrls: [ToolUrl!]!
    type: String
    toolType: String
    category: String
    platformCategory: String
    enabled: Boolean!
    credentials: ToolCredentials
    
    # Layer information
    layer: String
    layerOrder: Int
    layerColor: String
    
    # Monitoring configuration
    metricsPath: String
    healthCheckEndpoint: String
    healthCheckInterval: Int
    connectionTimeout: Int
    readTimeout: Int
    allowedEndpoints: [String]
}

input ToolFilter {
    enabled: Boolean
    type: String
    search: String
    category: String
    platformCategory: String
} 