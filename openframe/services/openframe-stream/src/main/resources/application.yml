server:
  port: 8082
spring:
  application:
    name: openframe-stream
  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
    consumer:
      bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      group-id: event-processor
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        max.partition.fetch.bytes: 10485760
        fetch.max.bytes: 10485760
        receive.buffer.bytes: 10485760
    producer:
      bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        max.request.size: 10485760
        buffer.memory: 10485760
    listener:
      missing-topics-fatal: false
      type: single
      ack-mode: MANUAL_IMMEDIATE

nifi:
  url: http://localhost:8080/nifi-api
  username: openframe
  sensitive-properties-key: ${NIFI_PROPERTIES_KEY}

management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus
  metrics:
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true

logging:
  config: classpath:logback-spring.xml
  level:
    com.openframe.stream: DEBUG
    org.apache.kafka: DEBUG
    org.springframework.kafka: DEBUG
